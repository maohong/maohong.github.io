{"meta":{"title":"Hong's Notes","subtitle":"High Performance, High Availability and Scalable Architecture, ML, AI and Big Data","description":"Overthinking only lead to problems, actions lead to answers.","author":"Hong","url":"https://maohong.github.io","root":"/"},"pages":[{"title":"","date":"2025-03-03T09:38:38.051Z","updated":"2025-03-03T09:38:38.051Z","comments":true,"path":"404.html","permalink":"https://maohong.github.io/404.html","excerpt":"","text":""},{"title":"Tags","date":"2016-07-03T07:30:44.000Z","updated":"2025-03-09T11:03:37.911Z","comments":true,"path":"tags/index.html","permalink":"https://maohong.github.io/tags/index.html","excerpt":"","text":""},{"title":"Book Collection","date":"2017-01-14T16:16:30.000Z","updated":"2025-03-09T14:11:46.443Z","comments":true,"path":"books/index.html","permalink":"https://maohong.github.io/books/index.html","excerpt":"","text":"This page collects highly-rated computer science books. Computer Languages Title Author Description The Go Programming Language Alan A. A. Donovan, Brian W. Kernighan A comprehensive guide to Go, covering its syntax, concurrency, and practical applications. Effective Java Joshua Bloch A must-read for Java developers, offering best practices and design patterns. The C++ Programming Language Bjarne Stroustrup The definitive guide to C++ by its creator, covering modern C++ features. Fluent Python Luciano Ramalho A deep dive into Python’s features, focusing on idiomatic and efficient code. Programming in Scala Martin Odersky, Lex Spoon, Bill Venners A comprehensive introduction to Scala, written by its creator. JavaScript: The Good Parts Douglas Crockford A concise guide to the best parts of JavaScript, focusing on good practices. The Rust Programming Language Steve Klabnik, Carol Nichols A beginner-friendly guide to Rust, covering its memory safety and concurrency features. Programming Ruby Dave Thomas, Chad Fowler, Andy Hunt A comprehensive guide to Ruby, covering its syntax and advanced features. Eloquent JavaScript Marijn Haverbeke A modern introduction to JavaScript, focusing on programming fundamentals. Python Crash Course Eric Matthes A beginner-friendly guide to Python, with hands-on projects and exercises. Computer Fundamentals and Architecture Title Author Description Computer Systems: A Programmer’s Perspective Randal E. Bryant, David R. O’Hallaron A deep dive into computer systems, focusing on how programs interact with hardware. Operating System Concepts Abraham Silberschatz, Peter B. Galvin, Greg Gagne A comprehensive textbook on operating systems, covering theory and practice. Computer Organization and Design David A. Patterson, John L. Hennessy A classic textbook on computer architecture, focusing on MIPS and RISC-V. The Elements of Computing Systems Noam Nisan, Shimon Schocken A hands-on guide to building a computer from scratch, starting with NAND gates. Modern Operating Systems Andrew S. Tanenbaum A detailed exploration of modern operating systems, including Linux and Windows. Computer Networks Andrew S. Tanenbaum, David J. Wetherall A comprehensive textbook on computer networks, covering protocols and architectures. Structure and Interpretation of Computer Programs Harold Abelson, Gerald Jay Sussman, Julie Sussman A classic textbook on programming and computer science fundamentals. Computer Architecture: A Quantitative Approach John L. Hennessy, David A. Patterson A detailed exploration of computer architecture, focusing on performance and design. Introduction to the Theory of Computation Michael Sipser A comprehensive introduction to computational theory, including automata and complexity. Computer Networking: A Top-Down Approach James F. Kurose, Keith W. Ross A top-down approach to understanding computer networks, focusing on applications and protocols. Big Data Technologies and Applications Title Author Description Hadoop: The Definitive Guide Tom White A comprehensive guide to Hadoop, covering its architecture and applications. Designing Data-Intensive Applications Martin Kleppmann A deep dive into the principles of designing scalable and reliable data systems. Spark: The Definitive Guide Bill Chambers, Matei Zaharia A comprehensive guide to Apache Spark, covering its architecture and applications. Big Data: Principles and Best Practices Nathan Marz, James Warren A practical guide to building big data systems, focusing on Lambda Architecture. Data Science from Scratch Joel Grus A hands-on introduction to data science, covering Python and machine learning. Data-Intensive Text Processing with MapReduce Jimmy Lin, Chris Dyer A detailed exploration of text processing using MapReduce. Big Data Analytics Venkat Ankam A practical guide to big data analytics, covering tools and techniques for data processing. Data Mining: Concepts and Techniques Jiawei Han, Micheline Kamber, Jian Pei A comprehensive textbook on data mining, covering algorithms and applications. Streaming Systems Tyler Akidau, Slava Chernyak, Reuven Lax A detailed exploration of streaming data systems, focusing on real-time processing. Big Data: A Revolution That Will Transform How We Live, Work, and Think Viktor Mayer-Schönberger, Kenneth Cukier A non-technical exploration of the impact of big data on society and business. Machine Learning and Artificial Intelligence Title Author Description Deep Learning Ian Goodfellow, Yoshua Bengio, Aaron Courville The definitive textbook on deep learning, covering theory and applications. Pattern Recognition and Machine Learning Christopher M. Bishop A comprehensive textbook on machine learning, focusing on probabilistic models. Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow Aurélien Géron A practical guide to machine learning, with hands-on examples using Python. Artificial Intelligence: A Modern Approach Stuart Russell, Peter Norvig The most widely used textbook on AI, covering a broad range of topics. Reinforcement Learning: An Introduction Richard S. Sutton, Andrew G. Barto A comprehensive introduction to reinforcement learning, covering theory and algorithms. Machine Learning Yearning Andrew Ng A practical guide to structuring machine learning projects, focusing on best practices. The Hundred-Page Machine Learning Book Andriy Burkov A concise yet comprehensive introduction to machine learning, covering key concepts. Deep Learning with Python François Chollet A practical guide to deep learning using Keras and TensorFlow. Machine Learning: A Probabilistic Perspective Kevin P. Murphy A detailed textbook on machine learning, focusing on probabilistic methods. Python Machine Learning Sebastian Raschka, Vahid Mirjalili A practical guide to machine learning using Python, covering libraries and techniques. High-Performance, High-Availability, and Scalable Distributed Systems Design Title Author Description Designing Distributed Systems Brendan Burns A practical guide to designing scalable and reliable distributed systems. Distributed Systems: Principles and Paradigms Andrew S. Tanenbaum, Maarten Van Steen A comprehensive textbook on distributed systems, covering principles and paradigms. Building Microservices Sam Newman A practical guide to designing and building microservices architectures. Site Reliability Engineering Google SRE Team A detailed exploration of Google’s approach to building reliable and scalable systems. Scalability Rules: 50 Principles for Scaling Web Sites Martin L. Abbott, Michael T. Fisher A practical guide to scaling web applications, with 50 key principles. High Performance Browser Networking Ilya Grigorik A detailed exploration of networking performance in web applications. Designing Data-Intensive Applications Martin Kleppmann A deep dive into the principles of designing scalable and reliable data systems. Cloud Native Patterns Cornelia Davis A practical guide to building cloud-native applications, focusing on patterns and best practices. Kubernetes: Up and Running Kelsey Hightower, Brendan Burns, Joe Beda A practical guide to Kubernetes, covering its architecture and applications. The Art of Scalability Martin L. Abbott, Michael T. Fisher A comprehensive guide to scaling systems, focusing on architecture and organizational strategies."},{"title":"Archives","date":"2016-07-03T07:36:16.000Z","updated":"2025-03-09T11:02:56.729Z","comments":true,"path":"archives/index.html","permalink":"https://maohong.github.io/archives/index.html","excerpt":"","text":""},{"title":"Test Page","date":"2025-03-09T13:16:30.000Z","updated":"2025-03-09T14:44:04.021Z","comments":true,"path":"test/index.html","permalink":"https://maohong.github.io/test/index.html","excerpt":"","text":"Mermaid ExamplesAvailable Type: https://github.com/mermaid-js/mermaid?tab=readme-ov-file#examples graph TD A[Hard] --&gt;|Text| B(Round) B --&gt; C{Decision} C --&gt;|One| D[Result 1] C --&gt;|Two| E[Result 2] flowchart LR A[Hard] --&gt;|Text| B(Round) B --&gt; C{Decision} C --&gt;|One| D[Result 1] C --&gt;|Two| E[Result 2] sequenceDiagram Alice-&gt;&gt;John: Hello John, how are you? loop HealthCheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts! John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d gitGraph commit commit branch develop checkout develop commit commit checkout main merge develop commit commit classDiagram Class01 &lt;|-- AveryLongClass : Cool &lt;&lt;Interface&gt;&gt; Class01 Class09 --&gt; C2 : Where am I? Class09 --* C3 Class09 --|&gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { &lt;&lt;service&gt;&gt; int id size() } journey title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 3: Me pie &quot;Dogs&quot; : 386 &quot;Cats&quot; : 85.9 &quot;Rats&quot; : 15 C4Context title System Context diagram for Internet Banking System Person(customerA, &quot;Banking Customer A&quot;, &quot;A customer of the bank, with personal bank accounts.&quot;) Person(customerB, &quot;Banking Customer B&quot;) Person_Ext(customerC, &quot;Banking Customer C&quot;) System(SystemAA, &quot;Internet Banking System&quot;, &quot;Allows customers to view information about their bank accounts, and make payments.&quot;) Person(customerD, &quot;Banking Customer D&quot;, &quot;A customer of the bank, &lt;br&#x2F;&gt; with personal bank accounts.&quot;) Enterprise_Boundary(b1, &quot;BankBoundary&quot;) { SystemDb_Ext(SystemE, &quot;Mainframe Banking System&quot;, &quot;Stores all of the core banking information about customers, accounts, transactions, etc.&quot;) System_Boundary(b2, &quot;BankBoundary2&quot;) { System(SystemA, &quot;Banking System A&quot;) System(SystemB, &quot;Banking System B&quot;, &quot;A system of the bank, with personal bank accounts.&quot;) } System_Ext(SystemC, &quot;E-mail system&quot;, &quot;The internal Microsoft Exchange e-mail system.&quot;) SystemDb(SystemD, &quot;Banking System D Database&quot;, &quot;A system of the bank, with personal bank accounts.&quot;) Boundary(b3, &quot;BankBoundary3&quot;, &quot;boundary&quot;) { SystemQueue(SystemF, &quot;Banking System F Queue&quot;, &quot;A system of the bank, with personal bank accounts.&quot;) SystemQueue_Ext(SystemG, &quot;Banking System G Queue&quot;, &quot;A system of the bank, with personal bank accounts.&quot;) } } BiRel(customerA, SystemAA, &quot;Uses&quot;) BiRel(SystemAA, SystemE, &quot;Uses&quot;) Rel(SystemAA, SystemC, &quot;Sends e-mails&quot;, &quot;SMTP&quot;) Rel(SystemC, customerA, &quot;Sends e-mails to&quot;)"},{"title":"Categories","date":"2016-07-03T07:22:46.000Z","updated":"2025-03-09T11:03:29.629Z","comments":true,"path":"categories/index.html","permalink":"https://maohong.github.io/categories/index.html","excerpt":"","text":""},{"title":"About the Author","date":"2016-03-03T07:16:19.000Z","updated":"2025-03-09T11:03:10.935Z","comments":true,"path":"about/index.html","permalink":"https://maohong.github.io/about/index.html","excerpt":"","text":"Interests:Database&#x2F;Middleware&#x2F;Architecture&#x2F;Distributed System&#x2F;Machine Learning&#x2F;Artificial Intelligence&#x2F;BigData… Contact：Github：https://github.com/maohongEmail：&#x68;&#x6d;&#x61;&#111;&#x2e;&#116;&#x65;&#99;&#104;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;"}],"posts":[{"title":"Storm源码编译及本地调试方法","slug":"storm源码编译及本地调试方法","date":"2016-07-13T15:53:12.000Z","updated":"2025-03-09T14:33:45.558Z","comments":true,"path":"20160713/storm源码编译及本地调试方法/","permalink":"https://maohong.github.io/20160713/storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95%E6%96%B9%E6%B3%95/","excerpt":"基础环境 IDE开发环境：intelliJIdea JDK1.7 64bit intelliJIdea安装maven插件，配置好仓库源 intelliJIdea安装clojure插件Cursive（需要注册并获取一个license，否则只能使用30天） 如果需要自己创建clojure项目进行开发，需要安装leiningen，下载地址 源码获取从github checkout代码到本地即可，https://github.com/apache/storm.git 我这里编译的是我们目前正在用的0.10.0版本的代码。 导入idea及编译打开idea，新建project，从源码导入，如下： 导入后，idea会自动根据pom.xml下载相关依赖包，部分依赖包如果下载不到，需要手动添加。完成后，可以看到project的module如下图所示：","text":"基础环境 IDE开发环境：intelliJIdea JDK1.7 64bit intelliJIdea安装maven插件，配置好仓库源 intelliJIdea安装clojure插件Cursive（需要注册并获取一个license，否则只能使用30天） 如果需要自己创建clojure项目进行开发，需要安装leiningen，下载地址 源码获取从github checkout代码到本地即可，https://github.com/apache/storm.git 我这里编译的是我们目前正在用的0.10.0版本的代码。 导入idea及编译打开idea，新建project，从源码导入，如下： 导入后，idea会自动根据pom.xml下载相关依赖包，部分依赖包如果下载不到，需要手动添加。完成后，可以看到project的module如下图所示： 这时候，通过idea就可以直接跟踪看源码了，但直接运行storm-starter中的例子还是会报错并提示有些类找不到，经查看是clojure的代码还未编译出class文件。可以在源码目录下执行mvn compile进行编译。 使用idea调试源码编译完成后，可以直接启动storm-starter中的例子运行。期间可能出现找不到类，检查classpath，依赖包的scope由provided改为compile。 在源代码中加断点，run或者debug即可。gt; 2739 [main] INFO b.s.u.Utils - Using defaults.yaml from resources&gt; 4546 [main] INFO b.s.u.Utils - Using defaults.yaml from resources&gt; 5218 [main] INFO b.s.zookeeper - Starting inprocess zookeeper at port 2000 and dir /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//eeb57be9-5478-4fa9-ab31-6dfce38e7695&gt; 5243 [main] INFO b.s.u.Utils - Using defaults.yaml from resources&gt; 5340 [main] INFO b.s.d.nimbus - Starting Nimbus with conf &#123;&quot;topology.builtin.metrics.bucket.size.secs&quot; 60, ......&gt; 5342 [main] INFO b.s.d.nimbus - Using default scheduler&gt; 5360 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 5457 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 5529 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 5531 [main-EventThread] INFO b.s.zookeeper - Zookeeper state update: :connected:none&gt; 6569 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6569 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6574 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6605 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6605 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6609 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6609 [main-EventThread] INFO b.s.zookeeper - Zookeeper state update: :connected:none&gt; 6617 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6618 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6620 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6621 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6623 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6625 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6649 [main-EventThread] INFO b.s.zookeeper - Zookeeper state update: :connected:none&gt; 6652 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6653 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6657 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6671 [main] INFO b.s.d.supervisor - Starting Supervisor with conf &#123;&quot;topology.builtin.metrics.bucket.size.secs&quot; 60, ......&gt; 6693 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6694 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6697 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6697 [main-EventThread] INFO b.s.zookeeper - Zookeeper state update: :connected:none&gt; 6700 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6701 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6704 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6722 [main] INFO b.s.d.supervisor - Starting supervisor with id 913c90f6-3f78-4646-8998-aa901ae3c360 at host localhost&gt; 6725 [main] INFO b.s.d.supervisor - Starting Supervisor with conf &#123;&quot;topology.builtin.metrics.bucket.size.secs&quot; 60, .....&gt; 6732 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6732 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6736 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6736 [main-EventThread] INFO b.s.zookeeper - Zookeeper state update: :connected:none&gt; 6740 [main] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 6741 [main] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 6744 [main-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 6753 [main] INFO b.s.d.supervisor - Starting supervisor with id 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 at host localhost&gt; 7035 [main] INFO b.s.d.nimbus - [req 1] Access from: principal: op:submitTopology&gt; 7113 [main] INFO b.s.d.nimbus - Received topology submission for wordCounter with conf &#123;&quot;topology.max.task.parallelism&quot; nil, &quot;topology.submitter.principal&quot; &quot;&quot;, &quot;topology.acker.executors&quot; nil, &quot;topology.max.spout.pending&quot; 20, &quot;storm.zookeeper.superACL&quot; nil, &quot;topology.users&quot; (), &quot;topology.submitter.user&quot; &quot;&quot;, &quot;topology.kryo.register&quot; &#123;&quot;storm.trident.topology.TransactionAttempt&quot; nil, &quot;storm.trident.spout.RichSpoutBatchId&quot; &quot;storm.trident.spout.RichSpoutBatchIdSerializer&quot;&#125;, &quot;topology.kryo.decorators&quot; (), &quot;storm.id&quot; &quot;wordCounter-1-1468420782&quot;, &quot;topology.name&quot; &quot;wordCounter&quot;&#125;&gt; 7123 [main] INFO b.s.d.nimbus - nimbus file location:/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782&gt; 7152 [main] INFO b.s.d.nimbus - Activating wordCounter: wordCounter-1-1468420782&gt; 7346 [main] INFO b.s.s.EvenScheduler - Available slots: ([&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1028] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1029] [&quot;913c90f6-3f78-4646-8998-aa901ae3c360&quot; 1024] [&quot;913c90f6-3f78-4646-8998-aa901ae3c360&quot; 1025] [&quot;913c90f6-3f78-4646-8998-aa901ae3c360&quot; 1026])&gt; 7398 [main] INFO b.s.d.nimbus - Setting new assignment for topology id wordCounter-1-1468420782: #backtype.storm.daemon.common.Assignment&#123;:master-code-dir &quot;/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782&quot;, :node-&gt;host &#123;&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; &quot;localhost&quot;&#125;, :executor-&gt;node+port &#123;[8 8] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [12 12] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [2 2] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [7 7] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [22 22] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [3 3] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [24 24] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [1 1] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [18 18] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [6 6] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [20 20] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [9 9] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [23 23] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [11 11] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [16 16] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [13 13] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [19 19] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [21 21] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [5 5] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [26 26] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [10 10] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [14 14] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [4 4] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [15 15] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [25 25] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027], [17 17] [&quot;49c35a73-7500-4ea4-aaa2-4b1c1f231fd4&quot; 1027]&#125;, :executor-&gt;start-time-secs &#123;[8 8] 1468420782, [12 12] 1468420782, [2 2] 1468420782, [7 7] 1468420782, [22 22] 1468420782, [3 3] 1468420782, [24 24] 1468420782, [1 1] 1468420782, [18 18] 1468420782, [6 6] 1468420782, [20 20] 1468420782, [9 9] 1468420782, [23 23] 1468420782, [11 11] 1468420782, [16 16] 1468420782, [13 13] 1468420782, [19 19] 1468420782, [21 21] 1468420782, [5 5] 1468420782, [26 26] 1468420782, [10 10] 1468420782, [14 14] 1468420782, [4 4] 1468420782, [15 15] 1468420782, [25 25] 1468420782, [17 17] 1468420782&#125;&#125;&gt; 7751 [Thread-7] INFO b.s.d.supervisor - Extracting resources from jar at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/lib/ant-javafx.jar to /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//29645b09-90e9-4b9a-a657-60c418f92841/supervisor/stormdist/wordCounter-1-1468420782/resources&gt; 7788 [Thread-8] INFO b.s.d.supervisor - Launching worker with assignment &#123;:storm-id &quot;wordCounter-1-1468420782&quot;, :executors [[8 8] [12 12] [2 2] [7 7] [22 22] [3 3] [24 24] [1 1] [18 18] [6 6] [20 20] [9 9] [23 23] [11 11] [16 16] [13 13] [19 19] [21 21] [5 5] [26 26] [10 10] [14 14] [4 4] [15 15] [25 25] [17 17]]&#125; for this supervisor 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 on port 1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99&gt; 7791 [Thread-8] INFO b.s.d.worker - Launching worker for wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99 and conf &#123;&quot;topology.builtin.metrics.bucket.size.secs&quot; 60, ......&gt; 7793 [Thread-8] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 7794 [Thread-8] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 7798 [Thread-8-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 7798 [Thread-8-EventThread] INFO b.s.zookeeper - Zookeeper state update: :connected:none&gt; 7801 [Thread-8] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 7802 [Thread-8] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 7805 [Thread-8-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 7809 [Thread-8] INFO b.s.s.a.AuthUtils - Got AutoCreds []&gt; 7811 [Thread-8] INFO b.s.d.worker - Reading Assignments.&gt; 7881 [Thread-8] INFO b.s.d.worker - Launching receive-thread for 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027&gt; 7884 [Thread-9-worker-receiver-thread-0] INFO b.s.m.loader - Starting receive-thread: [stormId: wordCounter-1-1468420782, port: 1027, thread-id: 0 ]&gt; 8261 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[8 8]&gt; 8285 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[8 8]&gt; 8300 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[8 8]&gt; 8311 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[12 12]&gt; 8329 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[12 12]&gt; 8331 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[12 12]&gt; 8340 [Thread-8] INFO b.s.d.executor - Loading executor $spoutcoord-spout0:[2 2]&gt; 8343 [Thread-8] INFO b.s.d.executor - Loaded executor tasks $spoutcoord-spout0:[2 2]&gt; 8346 [Thread-8] INFO b.s.d.executor - Finished loading executor $spoutcoord-spout0:[2 2]&gt; 8355 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[7 7]&gt; 8372 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[7 7]&gt; 8375 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[7 7]&gt; 8381 [Thread-8] INFO b.s.d.executor - Loading executor b-3:[22 22]&gt; 8401 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-3:[22 22]&gt; 8404 [Thread-8] INFO b.s.d.executor - Finished loading executor b-3:[22 22]&gt; 8412 [Thread-8] INFO b.s.d.executor - Loading executor __acker:[3 3]&gt; 8414 [Thread-8] INFO b.s.d.executor - Loaded executor tasks __acker:[3 3]&gt; 8424 [Thread-8] INFO b.s.d.executor - Timeouts disabled for executor __acker:[3 3]&gt; 8425 [Thread-8] INFO b.s.d.executor - Finished loading executor __acker:[3 3]&gt; 8443 [Thread-8] INFO b.s.d.executor - Loading executor b-5:[24 24]&gt; 8465 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-5:[24 24]&gt; 8467 [Thread-8] INFO b.s.d.executor - Finished loading executor b-5:[24 24]&gt; 8530 [Thread-8] INFO b.s.d.executor - Loading executor $mastercoord-bg0:[1 1]&gt; 8539 [Thread-8] INFO b.s.d.executor - Loaded executor tasks $mastercoord-bg0:[1 1]&gt; 8576 [Thread-8] INFO b.s.d.executor - Finished loading executor $mastercoord-bg0:[1 1]&gt; 8603 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[18 18]&gt; 8633 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[18 18]&gt; 8635 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[18 18]&gt; 8646 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[6 6]&gt; 8681 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[6 6]&gt; 8683 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[6 6]&gt; 8719 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[20 20]&gt; 8757 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[20 20]&gt; 8763 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[20 20]&gt; 8782 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[9 9]&gt; 8808 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[9 9]&gt; 8818 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[9 9]&gt; 8828 [Thread-8] INFO b.s.d.executor - Loading executor b-4:[23 23]&gt; 8847 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-4:[23 23]&gt; 8851 [Thread-8] INFO b.s.d.executor - Finished loading executor b-4:[23 23]&gt; 8858 [refresh-active-timer] INFO b.s.d.worker - All connections are ready for worker 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99&gt; 8864 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[11 11]&gt; 8877 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[11 11]&gt; 8879 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[11 11]&gt; 8886 [Thread-8] INFO b.s.d.executor - Loading executor __system:[-1 -1]&gt; 8887 [Thread-8] INFO b.s.d.executor - Loaded executor tasks __system:[-1 -1]&gt; 8890 [Thread-8] INFO b.s.d.executor - Finished loading executor __system:[-1 -1]&gt; 8914 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[16 16]&gt; 9052 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[16 16]&gt; 9055 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[16 16]&gt; 9070 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[13 13]&gt; 9081 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[13 13]&gt; 9089 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[13 13]&gt; 9116 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[19 19]&gt; 9129 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[19 19]&gt; 9132 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[19 19]&gt; 9148 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[21 21]&gt; 9160 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[21 21]&gt; 9163 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[21 21]&gt; 9178 [Thread-8] INFO b.s.d.executor - Loading executor b-1:[5 5]&gt; 9192 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-1:[5 5]&gt; 9194 [Thread-8] INFO b.s.d.executor - Finished loading executor b-1:[5 5]&gt; 9204 [Thread-8] INFO b.s.d.executor - Loading executor spout1:[26 26]&gt; 9205 [Thread-8] INFO b.s.d.executor - Loaded executor tasks spout1:[26 26]&gt; 9208 [Thread-8] INFO b.s.d.executor - Finished loading executor spout1:[26 26]&gt; 9220 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[10 10]&gt; 9226 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[10 10]&gt; 9228 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[10 10]&gt; 9234 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[14 14]&gt; 9237 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[14 14]&gt; 9239 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[14 14]&gt; 9244 [Thread-8] INFO b.s.d.executor - Loading executor b-0:[4 4]&gt; 9248 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-0:[4 4]&gt; 9249 [Thread-8] INFO b.s.d.executor - Finished loading executor b-0:[4 4]&gt; 9255 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[15 15]&gt; 9260 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[15 15]&gt; 9261 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[15 15]&gt; 9273 [Thread-8] INFO b.s.d.executor - Loading executor spout0:[25 25]&gt; 9275 [Thread-8] INFO b.s.d.executor - Loaded executor tasks spout0:[25 25]&gt; 9277 [Thread-8] INFO b.s.d.executor - Finished loading executor spout0:[25 25]&gt; 9284 [Thread-8] INFO b.s.d.executor - Loading executor b-2:[17 17]&gt; 9289 [Thread-8] INFO b.s.d.executor - Loaded executor tasks b-2:[17 17]&gt; 9291 [Thread-8] INFO b.s.d.executor - Finished loading executor b-2:[17 17]&gt; 9298 [Thread-8] INFO b.s.d.worker - Worker has topology config &#123;&quot;topology.builtin.metrics.bucket.size.secs&quot; 60, ......&gt; 9298 [Thread-8] INFO b.s.d.worker - Worker 9dd8aeac-1cd6-467a-a84c-2637d0825d99 for storm wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 has finished loading&gt; 9298 [Thread-8] INFO b.s.config - SET worker-user 9dd8aeac-1cd6-467a-a84c-2637d0825d99&gt; 9875 [Thread-27-b-2] INFO b.s.d.executor - Preparing bolt b-2:(18)&gt; 9882 [Thread-35-b-4] INFO b.s.d.executor - Preparing bolt b-4:(23)&gt; 9882 [Thread-41-b-2] INFO b.s.d.executor - Preparing bolt b-2:(16)&gt; 9883 [Thread-13-b-2] INFO b.s.d.executor - Preparing bolt b-2:(12)&gt; 9883 [Thread-59-b-2] INFO b.s.d.executor - Preparing bolt b-2:(15)&gt; 9883 [Thread-47-b-2] INFO b.s.d.executor - Preparing bolt b-2:(21)&gt; 9893 [Thread-35-b-4] INFO b.s.d.executor - Prepared bolt b-4:(23)&gt; 9896 [Thread-47-b-2] INFO b.s.d.executor - Prepared bolt b-2:(21)&gt; 9896 [Thread-59-b-2] INFO b.s.d.executor - Prepared bolt b-2:(15)&gt; 9896 [Thread-27-b-2] INFO b.s.d.executor - Prepared bolt b-2:(18)&gt; 9896 [Thread-13-b-2] INFO b.s.d.executor - Prepared bolt b-2:(12)&gt; 9896 [Thread-41-b-2] INFO b.s.d.executor - Prepared bolt b-2:(16)&gt; 9898 [Thread-31-b-2] INFO b.s.d.executor - Preparing bolt b-2:(20)&gt; 9898 [Thread-15-$spoutcoord-spout0] INFO b.s.d.executor - Preparing bolt $spoutcoord-spout0:(2)&gt; 9899 [Thread-61-spout0] INFO b.s.d.executor - Preparing bolt spout0:(25)&gt; 9900 [Thread-15-$spoutcoord-spout0] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 9900 [Thread-61-spout0] INFO b.s.d.executor - Prepared bolt spout0:(25)&gt; 9901 [Thread-15-$spoutcoord-spout0] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 9901 [Thread-31-b-2] INFO b.s.d.executor - Prepared bolt b-2:(20)&gt; 9907 [Thread-15-$spoutcoord-spout0-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 9908 [Thread-43-b-2] INFO b.s.d.executor - Preparing bolt b-2:(13)&gt; 9908 [Thread-37-b-2] INFO b.s.d.executor - Preparing bolt b-2:(11)&gt; 9908 [Thread-63-b-2] INFO b.s.d.executor - Preparing bolt b-2:(17)&gt; 9910 [Thread-43-b-2] INFO b.s.d.executor - Prepared bolt b-2:(13)&gt; 9910 [Thread-37-b-2] INFO b.s.d.executor - Prepared bolt b-2:(11)&gt; 9911 [Thread-63-b-2] INFO b.s.d.executor - Prepared bolt b-2:(17)&gt; 9918 [Thread-49-b-1] INFO b.s.d.executor - Preparing bolt b-1:(5)&gt; 9918 [Thread-39-__system] INFO b.s.d.executor - Preparing bolt __system:(-1)&gt; 9918 [Thread-29-b-2] INFO b.s.d.executor - Preparing bolt b-2:(6)&gt; 9920 [Thread-49-b-1] INFO b.s.d.executor - Prepared bolt b-1:(5)&gt; 9920 [Thread-29-b-2] INFO b.s.d.executor - Prepared bolt b-2:(6)&gt; 9921 [Thread-15-$spoutcoord-spout0] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 9922 [Thread-15-$spoutcoord-spout0] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 9924 [Thread-39-__system] INFO b.s.d.executor - Prepared bolt __system:(-1)&gt; 9929 [Thread-51-spout1] INFO b.s.d.executor - Opening spout spout1:(26)&gt; 9929 [Thread-25-$mastercoord-bg0] INFO b.s.d.executor - Opening spout $mastercoord-bg0:(1)&gt; 9929 [Thread-15-$spoutcoord-spout0-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 9938 [Thread-51-spout1] INFO b.s.d.executor - Opened spout spout1:(26)&gt; 9937 [Thread-25-$mastercoord-bg0] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 9940 [Thread-25-$mastercoord-bg0] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 9940 [Thread-33-b-2] INFO b.s.d.executor - Preparing bolt b-2:(9)&gt; 9942 [Thread-51-spout1] INFO b.s.d.executor - Activating spout spout1:(26)&gt; 9942 [Thread-33-b-2] INFO b.s.d.executor - Prepared bolt b-2:(9)&gt; 9947 [Thread-53-b-2] INFO b.s.d.executor - Preparing bolt b-2:(10)&gt; 9950 [Thread-53-b-2] INFO b.s.d.executor - Prepared bolt b-2:(10)&gt; 9956 [Thread-11-b-2] INFO b.s.d.executor - Preparing bolt b-2:(8)&gt; 9956 [Thread-45-b-2] INFO b.s.d.executor - Preparing bolt b-2:(19)&gt; 9957 [Thread-23-b-5] INFO b.s.d.executor - Preparing bolt b-5:(24)&gt; 9958 [Thread-23-b-5] INFO b.s.d.executor - Prepared bolt b-5:(24)&gt; 9958 [Thread-11-b-2] INFO b.s.d.executor - Prepared bolt b-2:(8)&gt; 9958 [Thread-17-b-2] INFO b.s.d.executor - Preparing bolt b-2:(7)&gt; 9959 [Thread-55-b-2] INFO b.s.d.executor - Preparing bolt b-2:(14)&gt; 9959 [Thread-19-b-3] INFO b.s.d.executor - Preparing bolt b-3:(22)&gt; 9960 [Thread-19-b-3] INFO b.s.d.executor - Prepared bolt b-3:(22)&gt; 9960 [Thread-25-$mastercoord-bg0-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; 9960 [Thread-17-b-2] INFO b.s.d.executor - Prepared bolt b-2:(7)&gt; 9962 [Thread-45-b-2] INFO b.s.d.executor - Prepared bolt b-2:(19)&gt; 9963 [Thread-55-b-2] INFO b.s.d.executor - Prepared bolt b-2:(14)&gt; 9964 [Thread-57-b-0] INFO b.s.d.executor - Preparing bolt b-0:(4)&gt; 9964 [Thread-21-__acker] INFO b.s.d.executor - Preparing bolt __acker:(3)&gt; 9965 [Thread-57-b-0] INFO b.s.d.executor - Prepared bolt b-0:(4)&gt; 9966 [Thread-21-__acker] INFO b.s.d.executor - Prepared bolt __acker:(3)&gt; 9969 [Thread-15-$spoutcoord-spout0] INFO b.s.d.executor - Prepared bolt $spoutcoord-spout0:(2)&gt; 9971 [Thread-25-$mastercoord-bg0] INFO b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]&gt; 9972 [Thread-25-$mastercoord-bg0] INFO o.a.c.f.i.CuratorFrameworkImpl - Starting&gt; 9984 [Thread-25-$mastercoord-bg0-EventThread] INFO o.a.c.f.s.ConnectionStateManager - State change: CONNECTED&gt; DRPC RESULT: [[0]]&gt; 9988 [Thread-25-$mastercoord-bg0] INFO b.s.d.executor - Opened spout $mastercoord-bg0:(1)&gt; 9988 [Thread-25-$mastercoord-bg0] INFO b.s.d.executor - Activating spout $mastercoord-bg0:(1)&gt; DRPC RESULT: [[60]]&gt; DRPC RESULT: [[120]]&gt; DRPC RESULT: [[179]]&gt; DRPC RESULT: [[239]]&gt; DRPC RESULT: [[299]]&gt; DRPC RESULT: [[359]]&gt; DRPC RESULT: [[414]]&gt; DRPC RESULT: [[474]]&gt; DRPC RESULT: [[534]]&gt; DRPC RESULT: [[593]]&gt; DRPC RESULT: [[653]]&gt; DRPC RESULT: [[713]]&gt; DRPC RESULT: [[768]]&gt;&gt; Process finished with exit code 130","categories":[{"name":"Storm","slug":"Storm","permalink":"https://maohong.github.io/categories/Storm/"}],"tags":[{"name":"storm","slug":"storm","permalink":"https://maohong.github.io/tags/storm/"},{"name":"源码编译","slug":"源码编译","permalink":"https://maohong.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"},{"name":"本地调试","slug":"本地调试","permalink":"https://maohong.github.io/tags/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/"}]},{"title":"kafka-0.10.0启动过程分析","slug":"kafka-0-10-0启动过程分析","date":"2016-07-08T14:46:18.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20160708/kafka-0-10-0启动过程分析/","permalink":"https://maohong.github.io/20160708/kafka-0-10-0%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/","excerpt":"kafka-0.10.0是官方出的最新稳定版本，提供了大量新的feature，具体可见这里，本文主要分析kafka-0.10-0的源码结构和启动过程。 源码结构kafka-0.10.0的源码可以从github上fork一份，在源码目录下执行.&#x2F;gradlew idea生成idea项目，然后导入idea即可。这中间需要使用gradle进行依赖包的下载，导入后可以看到其源码结构如下图所示： 包括几大重要模块： clients主要是kafka-client相关的代码，包括consumer、producer，还包括一些公共逻辑，如授权认证、序列化等。 connect主要是kafka-connect模块的代码逻辑，Kafka connect是0.9版本增加的特性,支持创建和管理数据流管道。通过它可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统，比如数据库、elastic search等。 core模块是kafka的核心部分，主要包括broker的实现逻辑、producer和consumer的javaapi等。 streams模块主要是kafka-streaming的实现，提供了一整套描述常见流操作的高级语言API（比如 joining, filtering以及aggregation等），我们可以基于此开发流处理应用程序。","text":"kafka-0.10.0是官方出的最新稳定版本，提供了大量新的feature，具体可见这里，本文主要分析kafka-0.10-0的源码结构和启动过程。 源码结构kafka-0.10.0的源码可以从github上fork一份，在源码目录下执行.&#x2F;gradlew idea生成idea项目，然后导入idea即可。这中间需要使用gradle进行依赖包的下载，导入后可以看到其源码结构如下图所示： 包括几大重要模块： clients主要是kafka-client相关的代码，包括consumer、producer，还包括一些公共逻辑，如授权认证、序列化等。 connect主要是kafka-connect模块的代码逻辑，Kafka connect是0.9版本增加的特性,支持创建和管理数据流管道。通过它可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统，比如数据库、elastic search等。 core模块是kafka的核心部分，主要包括broker的实现逻辑、producer和consumer的javaapi等。 streams模块主要是kafka-streaming的实现，提供了一整套描述常见流操作的高级语言API（比如 joining, filtering以及aggregation等），我们可以基于此开发流处理应用程序。 启动入口kafka的启动入口在core_main这个module下，入口函数如下： 12345678910111213141516171819202122def main(args: Array[String]): Unit = &#123; try &#123; val serverProps = getPropsFromArgs(args) val kafkaServerStartable = KafkaServerStartable.fromProps(serverProps) // attach shutdown handler to catch control-c Runtime.getRuntime().addShutdownHook(new Thread() &#123; override def run() = &#123; kafkaServerStartable.shutdown &#125; &#125;) kafkaServerStartable.startup kafkaServerStartable.awaitShutdown &#125; catch &#123; case e: Throwable =&gt; fatal(e) System.exit(1) &#125; System.exit(0) &#125; 先从命令行指定的配置文件加载配置，然后通过KafkaServerStartable类启动broker，实际上在KafkaServerStartable中维护了一个KafkaServer对象，它通过调用KafkaServer的startup方法启动broker。 broker启动过程下面并启动过程代码按启动顺序分两部分做说明。 第一部分主要是核心模块的启动，代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546metrics = new Metrics(metricConfig, reporters, kafkaMetricsTime, true) brokerState.newState(Starting) /* start scheduler */ kafkaScheduler.startup() /* setup zookeeper */ zkUtils = initZk() /* start log manager */ logManager = createLogManager(zkUtils.zkClient, brokerState) logManager.startup() /* generate brokerId */ config.brokerId = getBrokerId this.logIdent = &quot;[Kafka Server &quot; + config.brokerId + &quot;], &quot; socketServer = new SocketServer(config, metrics, kafkaMetricsTime) socketServer.startup() /* start replica manager */ replicaManager = new ReplicaManager(config, metrics, time, kafkaMetricsTime, zkUtils, kafkaScheduler, logManager, isShuttingDown) replicaManager.startup() /* start kafka controller */ kafkaController = new KafkaController(config, zkUtils, brokerState, kafkaMetricsTime, metrics, threadNamePrefix) kafkaController.startup() /* start group coordinator */ groupCoordinator = GroupCoordinator(config, zkUtils, replicaManager, kafkaMetricsTime) groupCoordinator.startup() /* Get the authorizer and initialize it if one is specified.*/ authorizer = Option(config.authorizerClassName).filter(_.nonEmpty).map &#123; authorizerClassName =&gt; val authZ = CoreUtils.createObject[Authorizer](authorizerClassName) authZ.configure(config.originals()) authZ &#125; /* start processing requests */ apis = new KafkaApis(socketServer.requestChannel, replicaManager, groupCoordinator, kafkaController, zkUtils, config.brokerId, config, metadataCache, metrics, authorizer) requestHandlerPool = new KafkaRequestHandlerPool(config.brokerId, socketServer.requestChannel, apis, config.numIoThreads) brokerState.newState(RunningAsBroker) 首先是初始化Metrics注册信息。 接着把当前broker的状态先置为Starting。 启动kafkaScheduler，其内部维护了一个ScheduledThreadPoolExecutor，用于执行broker内置的一些周期性运行的job或定时job。比如，启动自动提交时，broker会定期维护客户端的消费topic-partition的offset信息。 初始化zookeeper访问工具，建立必要的数据路径。 启动LogManager，也就是日志数据管理子系统，负责日志数据的创建、截断、滚动、和清理等。 启动SocketServer，一个基于NIO的socker服务端，其线程模型是有一个acceptor线程来接受客户端的连接，对应这个acceptor有N个processor线程，每个processor有自己的selector来从sockets读取收到的请求。另外，有M个handler线程专门处理请求并把处理结果返回给processor线程并通过socket写回给客户端。 启动ReplicaManager，也即副本管理器，用于管理每个topic-partition的副本状态，包括主从、ISR列表等。 启动KafkaController，可以理解为kafka集群的中央控制器，负责全局的协调，比如选取leader，reassignment等，其自身也支持动态选举高可用。 启动GroupCoordinator，主要用于broker组管理和offset管理。 初始化授权认证管理器，用户可以自己通过参数authorizer.class.name指定具体的Authorizer实现。kafka自带有SimpleAclAuthorizer的简单实现。 初始化KafkaApis，用于统一接收外部请求。 初始化KafkaRequestHandlerPool，内部是一个线程池，用于具体处理外部请求。 将当前broker的状态置为RunningAsBroker，这时，broker已经可以对外提供服务了。 第二部分主要是辅助模块的启动，代码如下： 1234567891011121314151617181920212223242526272829303132333435363738Mx4jLoader.maybeLoad()/* start dynamic config manager */dynamicConfigHandlers = Map[String, ConfigHandler](ConfigType.Topic -&gt; new TopicConfigHandler(logManager, config), ConfigType.Client -&gt; new ClientIdConfigHandler(apis.quotaManagers))// Apply all existing client configs to the ClientIdConfigHandler to bootstrap the overrides// TODO: Move this logic to DynamicConfigManagerAdminUtils.fetchAllEntityConfigs(zkUtils, ConfigType.Client).foreach &#123; case (clientId, properties) =&gt; dynamicConfigHandlers(ConfigType.Client).processConfigChanges(clientId, properties)&#125;// Create the config manager. start listening to notificationsdynamicConfigManager = new DynamicConfigManager(zkUtils, dynamicConfigHandlers)dynamicConfigManager.startup()/* tell everyone we are alive */val listeners = config.advertisedListeners.map &#123;case(protocol, endpoint) =&gt; if (endpoint.port == 0) (protocol, EndPoint(endpoint.host, socketServer.boundPort(protocol), endpoint.protocolType)) else (protocol, endpoint)&#125;kafkaHealthcheck = new KafkaHealthcheck(config.brokerId, listeners, zkUtils, config.rack, config.interBrokerProtocolVersion)kafkaHealthcheck.startup()// Now that the broker id is successfully registered via KafkaHealthcheck, checkpoint itcheckpointBrokerId(config.brokerId)/* register broker metrics */registerStats()shutdownLatch = new CountDownLatch(1)startupComplete.set(true)isStartingUp.set(false)AppInfoParser.registerAppInfo(jmxPrefix, config.brokerId.toString)info(&quot;started&quot;) 启动jmx，通过参数kafka_mx4jenable控制是否启用jmx，默认为false。 初始化TopicConfigHandler和ClientIdConfigHandler，前者用于处理zk上的topic配置变更信息，后者用于zk上的clientId配置变更信息。 启动DynamicConfigManager，通过动态配置管理器，监听zk上的配置节点变化，并根据具体变化的配置信息调用TopicConfigHandler或ClientIdConfigHandler更新配置。 启动KafkaHealthcheck，用于在zk上注册当前broker节点信息，以便节点退出时其他broker和consumer能监听到，目前的节点健康度判断比较简单，只是单纯的看zk上的节点是否存在。 最后，在本地对当前broker做个checkpoint，并注册jmx bean信息","categories":[{"name":"Kafka","slug":"Kafka","permalink":"https://maohong.github.io/categories/Kafka/"}],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://maohong.github.io/tags/kafka/"},{"name":"源码分析","slug":"源码分析","permalink":"https://maohong.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"}]},{"title":"Storm的消息可靠处理机制","slug":"Storm的消息可靠处理机制","date":"2015-11-05T12:51:50.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20151105/Storm的消息可靠处理机制/","permalink":"https://maohong.github.io/20151105/Storm%E7%9A%84%E6%B6%88%E6%81%AF%E5%8F%AF%E9%9D%A0%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/","excerpt":"简介提交进入Storm运行的topology实际上是一个有向无环图（DAG），其中的节点是由spout和bolt组成，边则可以理解为消息从一个节点到传输到另一个节点的过程。对于spout产生的tuple，只有在topology上处理完毕后，才认为这个tuple被storm可靠处理。 Storm提供了可靠处理消息（storm中的通用名叫tuple）的框架，我们在写一个topology程序时，若需要保证spout产生的消息的可靠处理，需要做到两点： 第一是spout&#x2F;bolt每生成一个新的tuple都告诉storm一下（其中spout发出的tuple有个id叫rootId），从而让storm能够追踪rootId和每个衍生tuple的处理状态。 第二是每个tuple被下游bolt处理完毕后，无论处理成功或失败，也再告诉storm一下，从而让storm知道是否需要spout重新发送rootId。 做了这两件事，storm就能知道这个tuple是否被处理完毕。如果是处理成功了的，就说明最初从spout发出的tuple（rootId）已在topology中处理完毕，无需spout重新发送。如果是处理失败的，storm则会告知spout重新发送rootId这个tuple。 在程序中实现消息可靠处理那在写一个topology时，我们该如何做上面提到的两件事呢？","text":"简介提交进入Storm运行的topology实际上是一个有向无环图（DAG），其中的节点是由spout和bolt组成，边则可以理解为消息从一个节点到传输到另一个节点的过程。对于spout产生的tuple，只有在topology上处理完毕后，才认为这个tuple被storm可靠处理。 Storm提供了可靠处理消息（storm中的通用名叫tuple）的框架，我们在写一个topology程序时，若需要保证spout产生的消息的可靠处理，需要做到两点： 第一是spout&#x2F;bolt每生成一个新的tuple都告诉storm一下（其中spout发出的tuple有个id叫rootId），从而让storm能够追踪rootId和每个衍生tuple的处理状态。 第二是每个tuple被下游bolt处理完毕后，无论处理成功或失败，也再告诉storm一下，从而让storm知道是否需要spout重新发送rootId。 做了这两件事，storm就能知道这个tuple是否被处理完毕。如果是处理成功了的，就说明最初从spout发出的tuple（rootId）已在topology中处理完毕，无需spout重新发送。如果是处理失败的，storm则会告知spout重新发送rootId这个tuple。 在程序中实现消息可靠处理那在写一个topology时，我们该如何做上面提到的两件事呢？ Storm提供了BaseRichBolt抽象类（实现了IRichBolt接口），一个示例bolt如下： 1234567891011121314151617181920public class SplitSentence extends BaseRichBolt &#123; OutputCollector _collector; public void prepare(Map conf, TopologyContext context, OutputCollector collector) &#123; _collector = collector; &#125; public void execute(Tuple t) &#123; String sentence = t.getString(0); for(String word: sentence.split(&quot; &quot;)) &#123; //1. 告诉storm生成了一个新的tuple，并且这个tuple的锚点是tuple _collector.emit(t, new Values(word)); &#125; _collector.ack(t); //2. 告诉storm，t这个tuple已处理完毕 &#125; public void declareOutputFields(OutputFieldsDeclarer declarer) &#123; declarer.declare(new Fields(&quot;word&quot;)); &#125;&#125; 这段代码就做了这两件事，一是输出新的tuple并告知storm，二是对当前tuple t处理完毕后，告知storm。 对于第一件事，这里要注意的是，在BaseRichBolt中输出一个新的tuple（示例中是word）时，必须指定其锚点（即当前bolt正在处理的tuple），因为输出新的tuple会继续被下游bolt处理，这个锚点tuple和下游tuple之间的路径就是DAG的一条边。如果不指定锚点，则可以理解为storm不知道这条边的存在，也就不会对新输出的tuple进行跟踪了。 如果我们确实不需要保证消息的可靠处理，则使用以下方式输出新tuple即可。 1_collector.emit(new Values(word)); 另外，一个tuple的锚点tuple可以有多个，比如如下代码，新输出的tuple的锚点就是tuple1和tuple2。 1234List anchors = new ArrayList();anchors.add(tuple1);anchors.add(tuple2);_collector.emit(anchors, new Values(1, 2, 3)); 对于第二件事，通过调用OutputCollector的ack或fail方法，即可告知storm当前tuple的处理结果。比如，假设我们在bolt中做一些操作的时候出现异常（比如访问redis、DB、hdfs等），可以调fail方法快速重放rootId，避免等到storm判断这个tuple处理超时后才重放。 更简便的方式很明显，以上方式有几个弊端： 输出新tuple和对tuple的ack&#x2F;fail操作需要我们自己维护，代价很高，容易遗忘。 storm是在内存中维护每个tuple的处理状态，如果只对tuple进行锚点标记但处理完毕后忘记ack&#x2F;fail，在tuple量非常大时，有内存溢出的风险。 鉴于此，storm提供了BaseBasicBolt抽象类（实现了IBasicBolt接口）来帮助我们实现对每个tuple的锚点标记和ack&#x2F;fail。前面的例子可改写如下： 1234567891011public class SplitSentence extends BaseBasicBolt &#123; public void execute(Tuple tuple, BasicOutputCollector collector) &#123; String sentence = tuple.getString(0); for(String word: sentence.split(&quot; &quot;)) &#123; collector.emit(new Values(word)); &#125; &#125; public void declareOutputFields(OutputFieldsDeclarer declarer) &#123; declarer.declare(new Fields(&quot;word&quot;)); &#125;&#125; 可见，在代码中，我们只需要关心bolt的处理逻辑即可，至于标记锚点和ack&#x2F;fail，均不用关心。 细究一下storm框架对IBasicBolt的处理可知，在创建topology时，IBasicBolt是被封装在BasicBoltExecutor类（实现了IRichBolt接口）中处理的。 构建topology时的setBolt方法： 原理&amp;示例刚刚提到对每个topology，storm都在内存中维护其tuple的处理状态，那么对于一个大规模集群，storm是如何高效的维护大量tuple的处理状态的呢？ 其实，topology在运行时，内部有一组特殊的任务叫acker，专门用来做tuple的ack&#x2F;fail。当一个root tuple（spout输出的tuple）在DAG中处理完毕后，acker会向产生该tuple的spout发送消息来ack这个tuple。 我们可通过参数Config.TOPOLOGY_ACKER_EXECUTORS指定topology中的acker任务的数量，默认是与topology中的worker数相同，在处理大量消息的场景下，可以通过此参数增加topology的acker任务数，以提高对message做ack&#x2F;fail的效率。 storm通过给每个tuple设置一个全局唯一id，并在输出tuple和tuple处理完毕时收集tuple的id，并进行异或运算，巧妙的实现tuple状态的维护。先看下图示例： 在这个topology其中包含一个spout，3个bolt和一个acker bolt，紫色线表示tuple的流向，绿色线表示每个bolt处理完tuple后的ack&#x2F;fail调用，红色线表示acker回调spout的ack&#x2F;fail方法来标记root tuple处理完毕。 以下是storm的ack框架对tuple的处理状态维护过程说明： 第(1)(2)步，spout发送T1到bolt1，发送T2到bolt2，T1和T2具有相同的内容（可以认为都把spout的输出作为自己的输入）。每条消息都会有一个全局唯一id，T1的锚点为&lt;rootId,T1&gt;，T2的锚点为&lt;rootId,T2&gt;。 第(3)步，spout发送完毕T1、T2后，在acker中注册一条记录rootId&#x3D;T1^T2。 第(4)(5)步，bolt1收到T1处理完毕后对T1进行ack并发送T3,T4到bolt3，所以在acker中注册T1,T3,T4，acker中的跟踪项变为rootId&#x3D;T1^T2^T1^T3^T4&#x3D;T2^T3^T4 第(6)(7)步，bolt2收到T2处理完毕后对T2进行ack并发送T5,T6,T7到bolt4，所以在acker中注册T2,T5,T6,T7，acker中的跟踪项变为rootId&#x3D;T2^T3^T4^T2^T5^T6^T7&#x3D;T3^T4^T5^T6^T7 第(8)步，bolt3收到T3,T4处理完毕后对T3,T4进行ack，没有输出新的tuple，所以在acker中注册T3,T4，acker中的跟踪项变为rootId&#x3D;T3^T4^T5^T6^T7^T3^T4&#x3D;T5^T6^T7 第(9)步，bolt4收到T5,T6,T7处理完毕后对T5,T6,T7进行ack，没有输出新的tuple，所以在acker中注册T5,T6,T7，acker中的跟踪项变为rootId&#x3D;T5^T6^T7^T5^T6^T7&#x3D;0 第(10)步，acker bolt发现rootId对应的追踪值为0，说明该rootId对应的源消息以及衍生出来的所有消息（bolt1,bolt2新输出的消息）都被成功处理完毕。于是acker bolt会回调spout的ack方法，标识消息rootId已被topology处理成功。","categories":[{"name":"Storm","slug":"Storm","permalink":"https://maohong.github.io/categories/Storm/"}],"tags":[{"name":"storm","slug":"storm","permalink":"https://maohong.github.io/tags/storm/"},{"name":"实时计算","slug":"实时计算","permalink":"https://maohong.github.io/tags/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97/"}]},{"title":"Spark on yarn的内存分配问题","slug":"Spark-on-yarn的内存分配问题","date":"2015-08-11T05:23:13.000Z","updated":"2025-03-03T09:38:38.051Z","comments":true,"path":"20150811/Spark-on-yarn的内存分配问题/","permalink":"https://maohong.github.io/20150811/Spark-on-yarn%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98/","excerpt":"问题描述在测试spark on yarn时，发现一些内存分配上的问题，具体如下。 在$SPARK_HOME&#x2F;conf&#x2F;spark-env.sh中配置如下参数： SPARK_EXECUTOR_INSTANCES&#x3D;4 在yarn集群中启动的executor进程数 SPARK_EXECUTOR_MEMORY&#x3D;2G 为每个executor进程分配的内存大小 SPARK_DRIVER_MEMORY&#x3D;1G 为spark-driver进程分配的内存大小 执行$SPARK_HOME&#x2F;bin&#x2F;spark-sql –master yarn，按yarn-client模式启动spark-sql交互命令行（即driver程序运行在本地，而非yarn的container中），日志显示的关于AppMaster和Executor的内存信息如下： 日志显示，AppMaster的内存是896MB，其中包含了384MB的memoryOverhead；启动了5个executor，第一个的可用内存是530.3MB，其余每个Executor的可用内存是1060.3MB。 到yarnUI看下资源使用情况，共启动了5个container，占用内存13G，其中一台NodeManager启动了2个container，占用内存4G（1个AppMaster占1G、另一个占3G），另外3台各启了1个container，每个占用3G内存。 再到sparkUI看下executors的情况，这里有5个executor，其中driver是运行在执行spark-sql命令的本地服务器上，另外4个是运行在yarn集群中。Driver的可用storage memory为530.3MB，另外4个都是1060.3MB（与日志信息一致）。 那么问题来了： Yarn为container分配的最小内存由yarn.scheduler.minimum-allocation-mb参数决定，默认是1G，从yarnUI中看确实如此，可为何spark的日志里显示AppMaster的实际内存是896-384&#x3D;512MB呢？384MB是怎么算出来的？ spark配置文件里指定了每个executor的内存为2G，为何日志和sparkUI上显示的是1060.3MB？ driver的内存配置为1G，为何sparkUI里显示的是530.3MB呢？ 为何yarn中每个container分配的内存是3G，而不是executor需要的2G呢？ 问题解析进过一番调研，发现这里有些概念容易混淆，整理如下，序号对应上面的问题：","text":"问题描述在测试spark on yarn时，发现一些内存分配上的问题，具体如下。 在$SPARK_HOME&#x2F;conf&#x2F;spark-env.sh中配置如下参数： SPARK_EXECUTOR_INSTANCES&#x3D;4 在yarn集群中启动的executor进程数 SPARK_EXECUTOR_MEMORY&#x3D;2G 为每个executor进程分配的内存大小 SPARK_DRIVER_MEMORY&#x3D;1G 为spark-driver进程分配的内存大小 执行$SPARK_HOME&#x2F;bin&#x2F;spark-sql –master yarn，按yarn-client模式启动spark-sql交互命令行（即driver程序运行在本地，而非yarn的container中），日志显示的关于AppMaster和Executor的内存信息如下： 日志显示，AppMaster的内存是896MB，其中包含了384MB的memoryOverhead；启动了5个executor，第一个的可用内存是530.3MB，其余每个Executor的可用内存是1060.3MB。 到yarnUI看下资源使用情况，共启动了5个container，占用内存13G，其中一台NodeManager启动了2个container，占用内存4G（1个AppMaster占1G、另一个占3G），另外3台各启了1个container，每个占用3G内存。 再到sparkUI看下executors的情况，这里有5个executor，其中driver是运行在执行spark-sql命令的本地服务器上，另外4个是运行在yarn集群中。Driver的可用storage memory为530.3MB，另外4个都是1060.3MB（与日志信息一致）。 那么问题来了： Yarn为container分配的最小内存由yarn.scheduler.minimum-allocation-mb参数决定，默认是1G，从yarnUI中看确实如此，可为何spark的日志里显示AppMaster的实际内存是896-384&#x3D;512MB呢？384MB是怎么算出来的？ spark配置文件里指定了每个executor的内存为2G，为何日志和sparkUI上显示的是1060.3MB？ driver的内存配置为1G，为何sparkUI里显示的是530.3MB呢？ 为何yarn中每个container分配的内存是3G，而不是executor需要的2G呢？ 问题解析进过一番调研，发现这里有些概念容易混淆，整理如下，序号对应上面的问题： (1) spark的yarn-client向ResourceManager申请提交作业&#x2F;启动AppMaster时，会判断是否是集群模式，如果是集群模式，则AppMaster的内存大小与driver内存大小一致，否则由spark.yarn.am.memory决定，这个参数的默认值是512MB。我们使用的是yarn-client模式，所以实际内存是512MB。 384MB是spark-client为appMaster额外申请的内存，计算方法如下： 即，默认从参数读取（集群模式从spark.yarn.driver.memoryOverhead参数读，否则从spark.yarn.am.memoryOverhead参数读），若没配此参数，则从AppMaster的内存*一定系数和默认最小overhead中取较大值。 在spark-1.4.1版本中，MEMORY_OVERHEAD_FACTOR的默认值为0.10（之前是0.07），MEMORY_OVERHEAD_MIN默认为384，我们没有指定spark.yarn.driver.memoryOverhead和spark.yarn.am.memoryOverhead，而amMemory&#x3D;512M（由spark.yarn.am.memory决定），因此memoryOverhead为max(512*0.10, 384)&#x3D;384MB。 Executor的memoryOverhead计算方法与此一样，只是不区分是否集群模式，都默认由spark.yarn.executor.memoryOverhead配置。 (2) 日志和sparkUI上显示的是executor内部用于缓存计算结果的内存空间，并不是executor所拥有的全部内存。这部分内存是由以下公式计算： Runtime.getRuntime.maxMemory按2048MB算，storage memory大小为1105.92MB，sparkUI显示的略小于此值，是正常的。 (3) 与上述第2点一样，storage memory的大小略小于10240.90.6&#x3D;552.96MB (4) 前面提到spark会为container额外申请一部分内存（memoryOverhead），因此，实际为container提交申请的内存大小是2048 + max(2048*0.10, 384) &#x3D; 2432MB，而yarn在做资源分配时会做资源规整化，即应用程序申请的资源量一定是最小可申请资源量的整数倍（向上取整），最小可申请内存量由yarn.scheduler.minimum-allocation-mb指定，因此，会为container分配3G内存。 验证为了验证上述规则，继续修改配置参数： SPARK_EXECUTOR_INSTANCES&#x3D;4 在yarn集群中启动的executor进程数 SPARK_EXECUTOR_MEMORY&#x3D;4G 为每个executor进程分配的内存大小 SPARK_DRIVER_MEMORY&#x3D;3G 为spark-driver进程分配的内存大小 并在启动spark-sql时指定spark.yarn.am.memory参数： bin&#x2F;spark-sql –master yarn –conf spark.yarn.am.memory&#x3D;1024m 再看日志信息： yarnUI状态： sparkUI的executors信息： 可见，AppMaster的实际内存为1024M（1408-384），而其在yarn中的container内存大小为2G（1408大于1G，yarn按资源规整化原则为其分配2G）。 同理，driver的storage memory空间为3G*0.9*0.6&#x3D;1.62G，executor的storage memory空间为4G*0.9*0.6&#x3D;2.16G，executor所在container占用5G内存（4096+max(4096*0.10,384)&#x3D; 4505.6，大于4G， yarn按资源规整化原则为其分配5G）。 Yarn集群的内存总占用空间为2+5*4&#x3D;22G。","categories":[{"name":"Spark","slug":"Spark","permalink":"https://maohong.github.io/categories/Spark/"}],"tags":[{"name":"spark","slug":"spark","permalink":"https://maohong.github.io/tags/spark/"},{"name":"yarn","slug":"yarn","permalink":"https://maohong.github.io/tags/yarn/"},{"name":"内存分配","slug":"内存分配","permalink":"https://maohong.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"}]},{"title":"storm集群supervisor节点异常退出问题排查","slug":"storm集群supervisor节点异常退出问题排查","date":"2015-07-03T12:48:50.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20150703/storm集群supervisor节点异常退出问题排查/","permalink":"https://maohong.github.io/20150703/storm%E9%9B%86%E7%BE%A4supervisor%E8%8A%82%E7%82%B9%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/","excerpt":"问题出现测试storm集群为0.9.4版本，前段时间出现supervisor进程挂掉，而其上work进程仍然运行的诡异情况，通过日志看到supervisor进程挂掉之前出现以下异常： 问题排查过程很明显，是commons-io包的FileUtils工具类抛出的异常，原因是在调用commons-io包的FileUtils工具类做move directory操作时，目的文件夹已存在。 查看调用代码（supervisor.clj的第374行），是调用download-storm-code方法从nimbus下载topology的代码，并且download-storm-code方法中做代码下载前加了锁避免并发写文件。 果然，这里没有判断stormroot文件夹是否已存在，是个bug，具体可见这个issue：https://issues.apache.org/jira/browse/STORM-805。 这个问题在0.9.5版本中随着STORM-130一起修复了，代码如下： 但这里有三个问题： 在调用download-storm-code方法前，代码中已做判断是否已下载topology代码，若已下载就不会调用download-storm-code方法了。为何进入这个方法后，做move directory操作时，代码却已经下载好了呢？ storm的历史发布版本有很多，为何0.9.4版本里会出现这个不该出现的问题，0.9.4相对老的版本是不是做了什么修改？ 为何抛出异常后，supervisor进程就这么直接退出了？太弱了吧。。","text":"问题出现测试storm集群为0.9.4版本，前段时间出现supervisor进程挂掉，而其上work进程仍然运行的诡异情况，通过日志看到supervisor进程挂掉之前出现以下异常： 问题排查过程很明显，是commons-io包的FileUtils工具类抛出的异常，原因是在调用commons-io包的FileUtils工具类做move directory操作时，目的文件夹已存在。 查看调用代码（supervisor.clj的第374行），是调用download-storm-code方法从nimbus下载topology的代码，并且download-storm-code方法中做代码下载前加了锁避免并发写文件。 果然，这里没有判断stormroot文件夹是否已存在，是个bug，具体可见这个issue：https://issues.apache.org/jira/browse/STORM-805。 这个问题在0.9.5版本中随着STORM-130一起修复了，代码如下： 但这里有三个问题： 在调用download-storm-code方法前，代码中已做判断是否已下载topology代码，若已下载就不会调用download-storm-code方法了。为何进入这个方法后，做move directory操作时，代码却已经下载好了呢？ storm的历史发布版本有很多，为何0.9.4版本里会出现这个不该出现的问题，0.9.4相对老的版本是不是做了什么修改？ 为何抛出异常后，supervisor进程就这么直接退出了？太弱了吧。。 继续看0.9.4的源码发现，supervisor中有以下两个事件线程，都会调用download-storm-code方法： 一个是synchronize-supervisor，用于同步nimbus任务，每隔10秒执行一次，会调用mk-synchronize-supervisor方法，以及时获取nimbus分配给该supervisor的新任务并移除已分配但不再需要执行的任务。 另一个是sync-processes，用于根据任务变化同步管理worker进程，执行周期由SUPERVISOR-MONITOR-FREQUENCY-SECS（默认3秒）指定，会调用sync-processes方法，以关闭当前不处于valid状态的worker和启动新分配给该supervisor的worker。 其中，mk-synchronize-supervisor方法和sync-processes方法都会调用download-storm-code方法。 两个事件线程的定义： mk-synchronize-supervisor方法调用download-storm-code方法： sync-processes调用download-storm-code方法： mk-synchronize-supervisor方法和sync-processes方法在调用前都会判断topology代码是否已下载，所以，出现上述异常的原因很可能是两个线程再调用download-storm-code方法时不同步引起的，即同时判断到需要下载topology代码并进入了download-storm-code方法，从而产生两次move directory的操作引发异常。 虽然download-storm-code方法内部通过加锁控制了写文件时的并发，但对进入download-storm-code方法并没有做好同步。 再回过头看0.9.5版本的代码，虽然在move directory前判断了目的文件夹是否存在以避免问题，但实际上还是存在两个线程同时进入download-storm-code方法的问题。 最后再比较了下0.9.3和0.9.4的代码（supervisor.clj），发现0.9.4的sync-processes方法中调用download-storm-code的逻辑是新加进去的，也就是说这个bug是0.9.4新引入的，以前的版本不会存在这个问题。 左边为0.9.3，右边为0.9.4： 关于第3个问题，再回看定义synchronize-supervisor事件线程的代码，是通过事件管理器event-manager来实现的，查看event.clj中的实现，event-manager会从一个LinkedBlockingQueue取出新事件并启动线程处理，线程若抛出非Interrupted异常，则直接退出进程了。 至此，问题分析完毕。","categories":[{"name":"Storm","slug":"Storm","permalink":"https://maohong.github.io/categories/Storm/"}],"tags":[{"name":"storm","slug":"storm","permalink":"https://maohong.github.io/tags/storm/"},{"name":"supervisor","slug":"supervisor","permalink":"https://maohong.github.io/tags/supervisor/"},{"name":"异常排查","slug":"异常排查","permalink":"https://maohong.github.io/tags/%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/"}]},{"title":"交换空间使用率过高问题分析","slug":"交换空间使用率过高问题分析","date":"2015-06-22T02:02:04.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20150622/交换空间使用率过高问题分析/","permalink":"https://maohong.github.io/20150622/%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/","excerpt":"问题现象线上两台java后台服务每次上线后再过段时间，就出现swap空间使用率较高的现象，而jvm内存使用和垃圾回收情况则很正常。相关图表如下： 图中，每次上线后过一段时间，swap空间使用量会出现一个陡增，并随时间推移逐渐增加，期间会出现小幅度下降。 首先，从操作系统层面分析，swap空间使用较高，说明是系统物理内存不够用从而发生内存页交换，将部分内存数据搬至虚拟内存空间，也就是swap空间。但究竟是什么原因引起物理内存不足呢？因为Jvm堆大小是固定的，所以推断是因堆外内存占用空间较大引起。 于是，使用jmap -histo:live 把进程中的对象信息dump出来，dump信息如下： 确实发现存在大量DirectByteBuffer对象，这说明内存中确实有大量引用了堆外内存的对象没有被回收！ 同时，内存中也对应存在着大量的sun.misc.Cleaner和java.nio.DirectByteBuffer$Deallocator对象。这两个类是用于回收堆外内存的。Cleaner对象是在DirectByteBuffer的构造函数中创建，其中封装了回收堆外内存的逻辑，Cleaner执行clean资源的操作是通过启动Deallocator线程实现的，这个线程把DirectByteBuffer对象引用的堆外内存做回收。 那么问题来了： 为什么DirectByteBuffer对象没有被回收？ 怎么做才能让DirectByteBuffer对象能被及时回收？ 问题分析","text":"问题现象线上两台java后台服务每次上线后再过段时间，就出现swap空间使用率较高的现象，而jvm内存使用和垃圾回收情况则很正常。相关图表如下： 图中，每次上线后过一段时间，swap空间使用量会出现一个陡增，并随时间推移逐渐增加，期间会出现小幅度下降。 首先，从操作系统层面分析，swap空间使用较高，说明是系统物理内存不够用从而发生内存页交换，将部分内存数据搬至虚拟内存空间，也就是swap空间。但究竟是什么原因引起物理内存不足呢？因为Jvm堆大小是固定的，所以推断是因堆外内存占用空间较大引起。 于是，使用jmap -histo:live 把进程中的对象信息dump出来，dump信息如下： 确实发现存在大量DirectByteBuffer对象，这说明内存中确实有大量引用了堆外内存的对象没有被回收！ 同时，内存中也对应存在着大量的sun.misc.Cleaner和java.nio.DirectByteBuffer$Deallocator对象。这两个类是用于回收堆外内存的。Cleaner对象是在DirectByteBuffer的构造函数中创建，其中封装了回收堆外内存的逻辑，Cleaner执行clean资源的操作是通过启动Deallocator线程实现的，这个线程把DirectByteBuffer对象引用的堆外内存做回收。 那么问题来了： 为什么DirectByteBuffer对象没有被回收？ 怎么做才能让DirectByteBuffer对象能被及时回收？ 问题分析 先看了下启动jvm参数为-Xmn8192M -Xms13312M -Xmx13312M -XX:PermSize&#x3D;512m -XX:MaxPermSize&#x3D;512m，很明显，新生代空间配的太大，同时，也没有指定堆外内存的最大空间（-XX:MaxDirectMemorySize），这个参数没设置则默认等于-Xmx，然而服务器总内存只有16G，所以时间长了很可能会发生堆外内存溢出！ 因为此服务是kafka集群的消费者，每天接收的报文量在1亿以上，这个过程中产生了大量的DirectByteBuffer对象，这些对象直接引用堆外内存，而同时，这些临时对象也会被回收，由于新生代空间配的很大，触发minor GC的频率不够高，从而不能及时释放已被占用的堆外内存，随着时间的推移，进程启动过一段时间后，堆外内存占用越来越多，最终被OS交换到swap空间。 解决方案调整jvm参数，减少新生代大小为jvm堆空间的3&#x2F;8，并指定堆外内存大小，调整后的jvm参数为-Xmn3840M -Xms10240M -Xmx10240M -XX:PermSize&#x3D;512m -XX:MaxPermSize&#x3D;512m -XX:MaxDirectMemorySize&#x3D;4096m 调整后，swap空间占用情况有所好转，但依然占用2G左右！如下图所示。 4月21日调整参数重启服务后，在相当长的一段时间内，swap空间占用率极低，但在5月2日又出现swap空间使用率上升的情况。继续看了下jvm堆空间使用情况和full gc情况，如下： 结合上面两张图，可见young gc较多，jvm堆空间整体使用率稳步上升，在5月2日与5月8日发生了两次full gc，并且每次发生fullgc后，jvm堆空间使用率下降较多，swap空间使用量只有小范围下降。这说明有一部分DirectByteBuffer对象在fullgc阶段做了回收，但依然有很多DirectByteBuffer对象没有被回收，仍然占用着堆外内存。 选择一台机器，继续减小其堆空间，jvm参数为-Xmn2048M -Xms6144M -Xmx6144M -XX:PermSize&#x3D;512m -XX:MaxPermSize&#x3D;512m -XX:MaxDirectMemorySize&#x3D;4096m，经过一段时间观察，交换空间使用率很低，应该没再发生内存页交换了，同时gc频率变高，jvm堆空间的使用率在正常范围，说明DirectByteBuffer对象被更及时的回收了。 由此可见，swap空间占用率高的原因主要还是JVM堆空间太高导致的堆外内存回收不及时。 遗留问题看了下kafka-client的源码，接受消息时使用的是ByteBuffer，并没有使用DirectByteBuffer，所以很奇怪，这些大量的DirectByteBuffer对象是从哪生成的？哪里用到的？ 运行命令jmap -dump:live,format&#x3D;b,file&#x3D;&#x2F;data&#x2F;server.dump ，dump出内存快照，并用eclipse mat分析后，发现是zkclient中的一个地方用的，由于dump出的这个快照是问题解决后的内存快照，所以并不能说明问题，如果要找到根本原因，还是需要复现swap空间过高的场景，再做内存快照的dump。","categories":[{"name":"问题分析","slug":"问题分析","permalink":"https://maohong.github.io/categories/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"}],"tags":[{"name":"swap分区","slug":"swap分区","permalink":"https://maohong.github.io/tags/swap%E5%88%86%E5%8C%BA/"},{"name":"问题分析","slug":"问题分析","permalink":"https://maohong.github.io/tags/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"},{"name":"jvm调优","slug":"jvm调优","permalink":"https://maohong.github.io/tags/jvm%E8%B0%83%E4%BC%98/"}]},{"title":"hadoop-yarn中ResourceManager的服务模块","slug":"hadoop-yarn中ResourceManager的服务模块","date":"2015-06-06T05:10:10.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20150606/hadoop-yarn中ResourceManager的服务模块/","permalink":"https://maohong.github.io/20150606/hadoop-yarn%E4%B8%ADResourceManager%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97/","excerpt":"","text":"Yarn简述Hadoop2.0引入了yarn（Yet Another Resource Negotiator）资源管理框架。1.0中的MapReduce计算框架变为运行在yarn上的一种application。 Yarn依然采用了master&#x2F;slave结构，master是ResourceManager，负责整个集群的资源管理和调度，并且支持HA，slave是NodeManager，负责管理各子节点上的资源和任务。每个MapReduce作业提交给ResourceManager并被接受后，ResourceManager会通知某个NodeManager启动一个ApplicationMaster管理此作业的生命周期。 ResourceManager中的模块划分Yarn中的大多数服务都是带状态的service实现，并通过事件驱动机制实现服务的状态转换和服务之间的交互。ResourceManager是yarn的核心组件，与NodeManager、ApplicationMaster、Client都有交互，提供了非常多的功能，下面基于hadoop2.7版本的实现，梳理一下ResourceManager中的重要service组件及其功能。 ResourceManager中按功能划分的service模块如下图所示。 ResourceManager中核心模块主要包括客户端交互模块、NodeManager管理模块、ApplicationMaster管理模块、Application管理模块、安全管理模块、以及资源管理模块（调度、预留）等。 各模块中的服务介绍客户端交互模块： AdminService 管理员可通过此接口管理集群，如更新节点、更新ACL、更新队列等。内部有个EmbeddedElectorService，如果RM启用了自动HA，则通过这个service做leader election。 ClientRMService 负责为客户端提供服务，是ApplicationClientProtocol协议的服务端。负责处理来自客户端的RPC请求，包括提交app、查询app运行状态、终止app等。 Webapp 提供web页面服务，展示集群状态和资源使用情况。 NodeManager管理模块 NMLivelinessMonitor 用于监控NM是否存活，若NM在一定时间内（默认10分钟）未上报心跳，则认为其挂了。 NodesListManager 负责维护节点列表，并动态加载白名单（yarn.resourcemanager.nodes.include-path）和黑名单（yarn.resourcemanager.nodes.exlude-path）节点。 RMNodeLabelsManager 负责节点的标签管理。 ResourceTrackerService 负责与NodeManager通信，处理来自NodeManager的请求，包括注册NodeManager和节点心跳两种。接口定义在ResourceTracker中。 ApplicationMaster管理模块 AMLivelinessMonitor：两个实例 用于监控ApplicationMaster是否正常，如果在指定时间内（默认10分钟）未收到AM的心跳，则认为其死掉了。 ApplicationMasterLauncher 负责通知某个NodeManager启动或销毁ApplicationMaster。在app请求被接受后，与某个NodeManager通信，告知其为此app启动相应的ApplicationMaster。若app运行结束或被kill，则通知app所在NodeManager销毁ApplicationMaster。其内部也维护了一个阻塞队列，并有一个后台线程异步处理提交进来的启动ApplicationMaster的请求。 ApplicationMasterService 负责与ApplicationMaster通信，是ApplicationMasterProtocol协议的服务端，ApplicationMaster在NodeManager上启动后通过此协议向ResourceManager注册自己，运行过程中向ResourceManager发送心跳，以及app运行结束后告知RM自己所在的container可以被释放了。 Application管理模块 RMAppManager ResourceManager接受客户端提交的app后，会通过RMAppManager来触发启动app的事件RMAppEventType.START，具体启动app的工作由RMAppImpl实现。 ApplicationACLsManager 负责app权限控制，包括查看和修改权限。 ContainerAllocationExpirer 用于监听NodeManager上是否正常启动了分配给ApplicationMaster的container，若在指定时间未启动（默认10分钟），ResourceManager会强制回收该container。 RMApplicationHistoryWriter 负责异步持久化Application运行中的相关日志，主要是Container、Application、ApplicationAttempt在启动和结束时的日志信息。 安全管理模块 RMSecretManagerService 负责管理各种通信密钥，包括： RM与NM通信的NMTokenSecretManagerInRM RM与container通信的RMContainerTokenSecretManager 客户端与AM通信的ClientToAMTokenSecretManagerInRM AM与RM通信的AMRMTokenSecretManager DelegationTokenRenewer 启用了安全时，负责定时更新认证token。 资源管理模块 ResourceScheduler 资源调度器，可通过yarn.resourcemanager.scheduler.class指定，ResourceManager默认使用的是org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler。 SchedulerEventDispatcher 用于处理SchedulerEventType类型的事件，其内部维护了一个存储SchedulerEvent的阻塞队列，并由一个后台线程从队列中取出资源请求事件，再调用ResourceScheduler进行处理。 ReservationSystem 资源预留系统，对应的实现有CapacityReservationSystem和FairReservationSystem。 此外，SystemMetricsPublisher负责发布RM的系统统计信息。AsyncDispatcher是中央事件处理分发器，ResourceManager启动时，通过它绑定了几种类型的事件的处理器，包括SchedulerEventType、RMAppEventType、ApplicationAttempt、RMAppAttemptEventType、RMNodeEventType、RMAppManagerEventType、AMLaunchEventType等。 上述各service在ResourceManager中的启动顺序为： AsyncDispatcher AdminService RMActiveServices：是个CompositeService（即service列表，ResourceManager本身就是一个CompositeService），用于管理ResourceManager中的“活动”服务（必须在active的ResourceManager上启动的服务，启用HA时，备份ResourceManager上不启动这些服务），包括以下（按启动顺序）： RMSecretManagerService ContainerAllocationExpirer AMLivelinessMonitor RMNodeLabelsManager RMApplicationHistoryWriter SystemMetricsPublisher NodesListManager ResourceScheduler SchedulerEventDispatcher NMLivelinessMonitor ResourceTrackerService ApplicationMasterService ClientRMService ApplicationMasterLauncher DelegationTokenRenewer","categories":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://maohong.github.io/categories/Hadoop/"}],"tags":[{"name":"yarn","slug":"yarn","permalink":"https://maohong.github.io/tags/yarn/"},{"name":"hadoop","slug":"hadoop","permalink":"https://maohong.github.io/tags/hadoop/"}]},{"title":"mac系统下hadoop-2.7源码编译、导入eclipse及打包","slug":"mac系统下hadoop-2-7源码编译、导入eclipse及打包","date":"2015-05-18T02:00:44.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20150518/mac系统下hadoop-2-7源码编译、导入eclipse及打包/","permalink":"https://maohong.github.io/20150518/mac%E7%B3%BB%E7%BB%9F%E4%B8%8Bhadoop-2-7%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E3%80%81%E5%AF%BC%E5%85%A5eclipse%E5%8F%8A%E6%89%93%E5%8C%85/","excerpt":"","text":"编译环境要求 JDK1.7+MAVEN 3.0以上版本如果需要编译native code，还需要CMake 2.6、Zlib devel、openssl devel（mac下一般安装了xcode后应该都会有这些包）。 编译方法解压源码包hadoop-2.7.0-src.tar.gz，iterm下进入文件夹hadoop-2.7.0-src，然后根据需要执行相应的mvn命令就可以了。 仅编译：mvn compile打包生成jar：mvn package生成eclipse项目：eclipse:eclipse -DskipTests，加上-DskipTests可跳过test阶段。 期间遇到几个问题，记录如下。 问题记录先执行mvn eclipse:eclipse -DskipTest生成eclipse项目，执行到一半时，提示下面的报错： ‘protoc –version’ did not return a version -&gt; [Help 1] 意思也就是是找不到protoc命令，安装protocolbuffer后重试，又提示错误： protoc version is ‘libprotoc 2.6.1′, expected version is ’2.5.0′ 看上去是protocolbuffer版本问题，hadoop需要的版本是2.5.0，而系统安装的是2.6.1，查了很多资料，都是说protocolbuffer版本太低后来升到2.5的，而我这是2.6.1的版本，难不成还得降回去，不至于吧。因此，猜测这个版本限制是在pom.xml中写死的，于是grep了一下，发现果然在hadoop-project&#x2F;pom.xml中配置了编译时使用的pb版本。 &lt;protobuf.version&gt;2.5.0&lt;&#x2F;protobuf.version&gt; 把以上配置项改为2.6.1，再重新执行生成eclipse项目的命令就OK了。 导入eclipse及打包生成eclipse项目后，从eclipse里import existing project into workspace，选择hadoop-2.7.0-src目录，就会把所有代码模块导入eclipse了。接下来就可以看代码并修改了，比如增加一些日志信息等。 代码修改完毕后，可以再打出一个新的hadoop-distribution包来验证代码修改效果。 在hadoop-2.7.0-src目录下执行命令：mvn package -Pdist -Ptar -Pdocs -skipTests 等上漫长的一段时间，编译成功后，可以到hadoop-dist&#x2F;target下找到新的jar包。 补充说明编译过程需要从maven中央仓库下载大量依赖包，我使用的是oschina的库。 1234567891011121314151617181920212223242526272829303132333435&lt;mirror&gt; &lt;id&gt;CN&lt;/id&gt; &lt;name&gt;OSChina Central&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;&lt;/mirror&gt; &lt;profile&gt; &lt;id&gt;oschina&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;local private nexus&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;nexus&lt;/id&gt; &lt;name&gt;local private nexus&lt;/name&gt; &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/snapshots&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt;","categories":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://maohong.github.io/categories/Hadoop/"}],"tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://maohong.github.io/tags/hadoop/"},{"name":"eclipse","slug":"eclipse","permalink":"https://maohong.github.io/tags/eclipse/"}]},{"title":"使用hexo+gitpage搭建博客","slug":"使用hexo-gitpage搭建博客","date":"2014-09-02T11:50:40.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20140902/使用hexo-gitpage搭建博客/","permalink":"https://maohong.github.io/20140902/%E4%BD%BF%E7%94%A8hexo-gitpage%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"环境准备系统：mac osx软件：Node.js，npm，git，hexo具体安装以及git与github打通的配置就不详述了，可以google到各种方法。 hexo命令hexo init &lt;folder&gt; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #表示执行init命令初始化hexo到你指定的目录以下命令需要在&lt;folder&gt;目录下执行：hexo generate &nbsp;&nbsp;&nbsp;#自动根据当前目录下文件,生成静态网页hexo server &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#运行本地服务 启动服务后，就可以通过访问 http://localhost:4000 来看看效果了。接下来，可以使用以下命令来创建一篇新博文：hexo new “test blog 1”创建一个名为test blog 1的博客页面，对应的md文件路径是&lt;folder&gt;&#x2F;source&#x2F;_posts\\test blog 1.md 接下来就可以在这个md文件中写文章了，我使用的是MacDown来编辑md文件，支持实时查看页面效果，还是挺好用的。 发布博客文章写好后，通过以下方式发布到github上。1.编辑.&#x2F;_config.yml文件，修改以下部分，配置本地内容同步至github： deploy: &nbsp;&nbsp;type: git &nbsp;&nbsp;repository: &#x67;&#105;&#x74;&#64;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#109;:maohong&#x2F;maohong.github.io.git &nbsp;&nbsp;branch: master 2.执行hexo generate(hexo g)生成html内容3.执行hexo deploy(hexo d)讲更新内容发布至guthub 然后就可以访问主页查看效果了，可以使用github帐户名.github.io进行访问, 也可以设置个性域名。","categories":[{"name":"工具","slug":"工具","permalink":"https://maohong.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://maohong.github.io/tags/hexo/"},{"name":"gitpage","slug":"gitpage","permalink":"https://maohong.github.io/tags/gitpage/"}]},{"title":"redis服务端连接断开问题诊断","slug":"redis服务端连接断开问题诊断","date":"2014-06-01T13:29:28.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20140601/redis服务端连接断开问题诊断/","permalink":"https://maohong.github.io/20140601/redis%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%96%AD%E5%BC%80%E9%97%AE%E9%A2%98%E8%AF%8A%E6%96%AD/","excerpt":"","text":"问题现象前段时间，由于线上redis服务器的内存使用率达到了机器总内存的50%以上，导致内存数据的dump持久化一直失败。扩展到多台redis后，应用系统访问redis时，在业务量较少时，时不时会出现以下异常，当业务量较大，redis访问频率很高时，却不会发生这个异常，一时觉得很诡异。 redis.clients.jedis.exceptions.JedisConnectionException: It seems like server has closed the connection.at redis.clients.util.RedisInputStream.readLine(RedisInputStream.java:90) ~[jedis-2.1.0.jar:na]at redis.clients.jedis.Protocol.processInteger(Protocol.java:110) ~[jedis-2.1.0.jar:na]at redis.clients.jedis.Protocol.process(Protocol.java:70) ~[jedis-2.1.0.jar:na]at redis.clients.jedis.Protocol.read(Protocol.java:131) ~[jedis-2.1.0.jar:na]at redis.clients.jedis.Connection.getIntegerReply(Connection.java:188) ~[jedis-2.1.0.jar:na]at redis.clients.jedis.Jedis.sismember(Jedis.java:1266) ~[jedis-2.1.0.jar:na] 看提示，应该是服务端主动关闭了连接。查看了新上线的redis服务器的配置，有这么一项： # Close the connection after a client is idle for N seconds (0 to disable)timeout 120 这项配置指的是客户端连接空闲超过多少秒后，服务端主动关闭连接，默认值0表示服务端永远不主动关闭。而op人员把服务器端的超时时间设置为了120秒。 这就解释了发生这个异常的原因。客户端使用了一个连接池管理访问redis的所有连接，这些连接是长连接，当业务量较小时，客户端部分连接使用率较低，当两次使用之间的间隔超过120秒时，redis服务端就主动关闭了这个连接，而等客户端下次再使用这个连接对象时，发现服务端已经关闭了连接，进而报错。 于是，再查看访问redis的系统（客户端）的配置： 客户端使用的是jedis内置的连接池，看其源码本质上是基于apache commons-pool实现的，其中有一个eviction线程，用于回收idle对象，对于redis连接池来说，也就是回收空闲连接。 JedisPoolConfig类继承自GenericObjectPoolConfig并覆盖了几项关于eviction线程的配置，具体如下： *_timeBetweenEvictionRunsMillis*：eviction线程的运行周期。默认是-1，表示不启动eviction线程。这里设置为30秒。 *_minEvictableIdleTimeMillis*：对象处于idle状态的最长时间，默认是30分钟，这里设置为60秒。 通过客户端的默认配置看，对象的最大空闲时长是小于服务端的配置的，应该不是配置上的问题了。 于是，继续看是不是客户端代码使用上的问题。追踪到客户端代码如下： 可见，客户端首先尝试从本线程的ThreadLocal对象中获取jedis对象，若获取不到，再从masterJedisPool中取得jedis对象并放入ThreadLocal对象以便下次使用，并且jedis对象使用完毕后，没有从ThreadLocal中清除，也没有returnResource给masterJedisPool。 因此，问题产生的原因就在于此。ThreadLocal中的这个jedis对象被取出后没有return，对于对象池来说是处于非idle状态，因此不会被对象池evict。当业务量大时，这个jedis会被频繁使用，服务端认为这个jedis对应的连接是非空闲的，或者空闲时间达不到120秒，不会主动关闭，所以没什么问题。然而当业务量小时，这个jedis使用频率很低，当两次之间的使用间隔超出120秒时，服务端会主动把这个jedis的连接关闭，第二次调用时，就会出现上面的报错。 从代码开发者的角度来说，这么做的目的是避免频繁从pool中获取jedis对象和return jedis对象以提高性能。 解决方案有两个： 在redis-cli下在线修改redis 的配置，把timeout改回为0，无需重启redis即可直接生效，但redis若重启，配置会恢复。 修改客户端代码，使用完jedis对象后，从ThreadLocal中清除，再返回给连接池。 出于改动成本考虑，先采用了第一种方案，在线修改redis配置后，报错不再出现。","categories":[{"name":"Redis","slug":"Redis","permalink":"https://maohong.github.io/categories/Redis/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://maohong.github.io/tags/redis/"},{"name":"连接断开","slug":"连接断开","permalink":"https://maohong.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%96%AD%E5%BC%80/"}]},{"title":"基于zookeeper的分布式独占锁实现","slug":"基于zookeeper的分布式独占锁实现","date":"2014-05-13T13:05:01.000Z","updated":"2025-03-03T09:38:38.053Z","comments":true,"path":"20140513/基于zookeeper的分布式独占锁实现/","permalink":"https://maohong.github.io/20140513/%E5%9F%BA%E4%BA%8Ezookeeper%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%8B%AC%E5%8D%A0%E9%94%81%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"背景在分布式系统中，经常遇到这样一种场景：选举一个节点执行某一个任务，当此节点宕机后，其他节点可以接管并继续执行这个任务。由于各个节点运行的代码是一样的，彼此之间也是平等的，各个节点如何可以知道自己是否可以执行这个任务呢？当有节点宕机时，又如何判断自己是否可以接管任务呢？在我们的分布式任务调度系统中，需要选取调度器集群中的一个节点进行轮询任务状态，这里使用了zookeeper来实现一个统一的分布式锁，从而选出轮询节点。 原理如图所示，每台服务器启动后，都在同一目录下建一个临时顺序节点（EPHEMERAL_SEQUENTIAL），并获取此目录下的所有节点信息，如果自己的序号是最小的，就认为获取到了锁，可以执行任务。若自己的节点不是最小的，就认为自己没有获取到锁，不执行任务，同时，在比自己小1个序号的节点上增加监听。当比自己小1个序号的节点发生变化的时候，再次检查自己是否是最小序号的节点，如果是则获取锁，否则继续监听比自己小1个序号的节点。 实现以下是一个demo实现程序：public class DistributedExclusiveLock implements Watcher&#123; private ZooKeeper zk; private String lockDir = &quot;/testlock&quot;;//锁节点所在zk的目录 private String lockSymbol = &quot;_lock_&quot;;//锁节点标志 private String lockName;//锁节点前缀，构造锁时由外部传入 private String waitNodePath;//等待的前一个锁的节点名称 private String myNodePath;//当前锁 private CountDownLatch latch;//计数器 private String threadId; /** * 创建分布式锁 * @param lockName 竞争资源标志,lockName中不能包含单词lock * @throws Exception */ public DistributedExclusiveLock(String zkServers, String lockName) throws Exception &#123; //简单校验lockDir路径 if (!lockDir.startsWith(&quot;/&quot;)) throw new Exception(&quot;LockDir Path must start with / character! lockDir=&quot; + lockDir); if (lockDir.endsWith(&quot;/&quot;)) throw new Exception(&quot;LockDir Path must not end with / character! lockDir=&quot; + lockDir); this.lockName = lockName; this.threadId = getThreadId(); // 创建一个与服务器的连接 try &#123; zk = new ZooKeeper(zkServers, 3000, this); createLockDirIfNecessary(lockDir); &#125; catch (Exception e) &#123; throw new Exception(&quot;Error while initializing DistributedExclusiveLock!&quot; + e.getMessage(), e); &#125; &#125; private String getThreadId() &#123; return &quot;Thread-&quot; + Thread.currentThread().getId(); &#125; /** * 在zk上建立lock目录，如果目录不存在，逐级创建节点 */ private synchronized void createLockDirIfNecessary(String zkDir) throws KeeperException, InterruptedException &#123; //zkDir是一级节点，如/cloudscheduler if (zkDir.indexOf(&quot;/&quot;) == zkDir.lastIndexOf(&quot;/&quot;)) &#123; Stat stat = zk.exists(zkDir, false); if(stat == null)&#123; // 创建一级节点 zk.create(zkDir, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); &#125; &#125; else //zkDir非一级节点 &#123; String parentDir = zkDir.substring(0, zkDir.lastIndexOf(&quot;/&quot;)); if (zk.exists(parentDir, false) != null) &#123; //如果父节点存在，建当前节点 Stat stat = zk.exists(zkDir, false); if(stat == null)&#123; // 创建非一级节点 zk.create(zkDir, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); &#125; &#125; else &#123; //否则，先建父节点，再建当前节点 createLockDirIfNecessary(parentDir); createLockDirIfNecessary(zkDir); &#125; &#125; &#125; /** * zookeeper节点的监视器 */ @Override public void process(WatchedEvent event) &#123; if (event.getType() == EventType.NodeDeleted) &#123; if (this.latch!=null) this.latch.countDown(); try &#123; List&lt;String&gt; childrenNodes = zk.getChildren(lockDir, false); // 排序 Collections.sort(childrenNodes); System.out.println(&quot;Node: &quot; + event.getPath() + &quot; change event is deleted! Current locked nodes:\\n\\t&quot; + StringUtils.join(childrenNodes,&quot;\\n\\t&quot;)); &#125; catch (KeeperException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; public boolean tryLock() &#123; try &#123; if(tryLockInner()) return true; else return waitForLockInner(waitNodePath); &#125; catch (Exception e) &#123; e.printStackTrace(); return false; &#125; &#125; private boolean tryLockInner() throws Exception &#123; try &#123; if(lockName.contains(lockSymbol)) throw new Exception(&quot;lockName can not contains &quot; + lockSymbol); //创建临时子节点 myNodePath = zk.create(lockDir + &quot;/&quot; + lockName + lockSymbol, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL); System.out.println(threadId + &quot; created &quot; + myNodePath); //取出所有子节点 List&lt;String&gt; subNodes = zk.getChildren(lockDir, false); //取出所有lockName的锁 List&lt;String&gt; lockedNodes = new ArrayList&lt;String&gt;(); for (String node : subNodes) &#123; String nodePrefix = node.split(lockSymbol)[0]; if(nodePrefix.equals(lockName))&#123;//对锁名做个判断，前缀相同即为同一组锁 lockedNodes.add(node); &#125; &#125; Collections.sort(lockedNodes); System.out.println(&quot;Current locked nodes: \\n\\t&quot; + StringUtils.join(lockedNodes, &quot;\\n\\t&quot;)); if(myNodePath.equals(lockDir + &quot;/&quot; + lockedNodes.get(0)))&#123; //如果是最小的节点,则表示取得锁 return true; &#125; //如果不是最小的节点，找到比自己小1的节点，在List中的位置是自己的前一位 String myZnodeName = myNodePath.substring(myNodePath.lastIndexOf(&quot;/&quot;) + 1); waitNodePath = lockDir + &quot;/&quot; + lockedNodes.get(lockedNodes.indexOf(myZnodeName)-1); &#125; catch (KeeperException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; return false; &#125; private boolean waitForLockInner(String waitPath) throws InterruptedException, KeeperException &#123; Stat stat = zk.exists(waitPath, true); //判断比自己小一个数的节点是否存在,如果存在则需等待锁,同时注册监听 if (stat != null) &#123; System.out.println(threadId + &quot; waiting for &quot; + waitPath); this.latch = new CountDownLatch(1); this.latch.await(); //不加超时时间，无限等待 // //waiting //Zzzzz... //still waiting // // 探测到节点变化，刷新节点信息 this.latch = null; try &#123; // 确认myNodePath是否真的是列表中的最小节点 List&lt;String&gt; childrenNodes = zk.getChildren(lockDir, false); // 排序 Collections.sort(childrenNodes); if(myNodePath.equals(lockDir + &quot;/&quot; + childrenNodes.get(0))) return true; else &#123; // 说明waitNodePath是由于出现异常而挂掉的 , 更新waitNodePath String thisNodeName = myNodePath.substring(myNodePath.lastIndexOf(&quot;/&quot;) + 1); int index = childrenNodes.indexOf(thisNodeName); waitNodePath = lockDir + &quot;/&quot; + childrenNodes.get(index - 1); //重新等待锁 return waitForLockInner(waitNodePath); &#125; &#125; catch (KeeperException e) &#123; e.printStackTrace(); return false; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); return false; &#125; &#125; return true; &#125; public void unlock() throws Exception &#123; try &#123; System.out.println(threadId + &quot; unlock &quot; + myNodePath); zk.delete(myNodePath,-1); myNodePath = null; zk.close(); &#125; catch (InterruptedException e) &#123; throw new Exception(&quot;Error while releasing lock! &quot; + e.getMessage(), e); &#125; catch (KeeperException e) &#123; throw new Exception(&quot;Error while releasing lock! &quot; + e.getMessage(), e); &#125; &#125; public static void main(String[] args) throws Exception &#123; //一个简单的测试 List&lt;Thread&gt; workers = new ArrayList&lt;Thread&gt;(10); for (int i=1; i&lt;10; ++i) &#123; Thread thread = new Thread(new Runnable() &#123; String zk = &quot;10.12.10.169:2181,10.12.139.141:2181&quot;; @Override public void run() &#123; try &#123; DistributedExclusiveLock lock = new DistributedExclusiveLock(zk, &quot;zkLock&quot;); if (lock.tryLock()); &#123; String tid = &quot;Thread-&quot; + Thread.currentThread().getId(); int time = new Random().nextInt(5000); System.out.println(tid + &quot; gets lock and is working, sleep for &quot; + time + &quot; ms&quot;); Thread.sleep(time); lock.unlock(); System.out.println(tid + &quot; releases lock&quot;); &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; &#125;); thread.setDaemon(true); workers.add(thread); &#125; for (Thread t : workers) &#123; t.start(); &#125; Thread.sleep(100000); &#125;&#125;","categories":[{"name":"分布式应用","slug":"分布式应用","permalink":"https://maohong.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"zookeeper","slug":"zookeeper","permalink":"https://maohong.github.io/tags/zookeeper/"},{"name":"分布式协调","slug":"分布式协调","permalink":"https://maohong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83/"},{"name":"分布式应用","slug":"分布式应用","permalink":"https://maohong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"}]},{"title":"使用httpclient引起的tcp连接数超高问题","slug":"使用httpclient引起的tcp连接数超高问题","date":"2014-03-28T09:44:58.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20140328/使用httpclient引起的tcp连接数超高问题/","permalink":"https://maohong.github.io/20140328/%E4%BD%BF%E7%94%A8httpclient%E5%BC%95%E8%B5%B7%E7%9A%84tcp%E8%BF%9E%E6%8E%A5%E6%95%B0%E8%B6%85%E9%AB%98%E9%97%AE%E9%A2%98/","excerpt":"","text":"组内的一个系统新上线了通过图片url上传图片到图片存储平台的功能。其中使用了httpclient，通过向图片存储平台发送MultipartPostMethod上传图片。当业务量较大时，10个处理线程满负荷运行，上传图片时，发现应用系统服务器的tcp连接数陡然升高，峰值能达到几万个tcp连接数！ 排查系统代码并结合分析httpclient的源码发现，应用系统每次上传图片时，都会做new HttpClient()操作，这个操作内部默认使用的是SimpleHttpConnectionManager来管理http连接，而SimpleHttpConnectionManager有个默认字段alwaysClose&#x3D;false，表示当外部程序调用了HttpMethod.releaseConnection()时并不会立即释放连接，而是保持这个连接并尝试用于后续的请求，在连接空闲一段时间后（默认3秒）才真正释放。 因此，当业务量较大，系统高并发发送post请求时，new出来的HttpClient对象会很多，而这个对象使用完毕后，而当中建立的client对象在短时间内并不会立即释放连接，因此，随着时间的积累，tcp连接数保持居高不下。 通过查看官方文档，建议在高并发环境下使用MultiThreadedHttpConnectionManager来管理httpclient，因此，我们将httpclient改为单例后，tcp连接数回复正常水平。 通过管理httpclient的代码如下： 12345678910111213141516private static HttpClient initHttpClient()&#123; HttpConnectionManagerParams params = new HttpConnectionManagerParams(); //指定向每个host发起的最大连接数，默认是2，太少了 params.setDefaultMaxConnectionsPerHost(1000); //指定总共发起的最大连接数，默认是20，太少了 params.setMaxTotalConnections(5000); //连接超时时间-10s params.setConnectionTimeout(60*1000); //读取数据超时时间-60s params.setSoTimeout(60*1000); MultiThreadedHttpConnectionManager manager = new MultiThreadedHttpConnectionManager(); manager.setParams(params); return new HttpClient(manager);&#125;","categories":[{"name":"问题分析","slug":"问题分析","permalink":"https://maohong.github.io/categories/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"}],"tags":[{"name":"httpclient","slug":"httpclient","permalink":"https://maohong.github.io/tags/httpclient/"},{"name":"tcp连接数","slug":"tcp连接数","permalink":"https://maohong.github.io/tags/tcp%E8%BF%9E%E6%8E%A5%E6%95%B0/"}]},{"title":"前后端的CharacterEncoding不一致导致提交的表单数据丢失问题","slug":"前后端的CharacterEncoding不一致导致提交的表单数据丢失问题","date":"2014-03-20T03:09:03.000Z","updated":"2025-03-03T09:38:38.053Z","comments":true,"path":"20140320/前后端的CharacterEncoding不一致导致提交的表单数据丢失问题/","permalink":"https://maohong.github.io/20140320/%E5%89%8D%E5%90%8E%E7%AB%AF%E7%9A%84CharacterEncoding%E4%B8%8D%E4%B8%80%E8%87%B4%E5%AF%BC%E8%87%B4%E6%8F%90%E4%BA%A4%E7%9A%84%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/","excerpt":"","text":"最近在开发分布式任务调度系统的web端时，遇到一个坑，记录如下： 在页面上新增和修改任务，提交后，任务的属性在后端怎么都接收不到，但是在另一个协同开发的同学那边本地调试就OK，在我的本地和公共开发环境都不行，这不合理啊。。。。。 排查了很多地方，js、setter等等，一直没发现问题在哪。跟负责前端的同学交流了下，发现前端post的数据确实是修改过的，也就是后端接收有问题。 于是把最新版本和历史版本对比，发现最新版本新增了一个LogFilter，用于记录pagedelay的，仔细一看，logFilter里面是 12request.setCharacterEncoding(“UTF-8″);response.setContentType(“text/html;charset=UTF-8″); 但页面上是GBK编码，所以导致数据在这个filter中编码出错，造成数据丢失，后端接收到的数据为null。 解决方法： 把logFilter里的UTF-8改为GBK，就一切正常了。 疑问： 为何历史本没问题呢，因为历史版本中的logFilter配在struts2Filter之后，请求根本走不到logFilter里去。。。。 为何协同开发的同学本地调试没问题呢，那是因为他把web.xml里的LogFilter的filtermapping注掉了。。。。 好一个歪萝卜大烂坑。。。","categories":[{"name":"问题分析","slug":"问题分析","permalink":"https://maohong.github.io/categories/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"}],"tags":[{"name":"web开发","slug":"web开发","permalink":"https://maohong.github.io/tags/web%E5%BC%80%E5%8F%91/"},{"name":"java","slug":"java","permalink":"https://maohong.github.io/tags/java/"}]},{"title":"使用shell切割文件","slug":"使用shell切割文件","date":"2013-03-07T05:49:44.000Z","updated":"2025-03-03T09:38:38.053Z","comments":true,"path":"20130307/使用shell切割文件/","permalink":"https://maohong.github.io/20130307/%E4%BD%BF%E7%94%A8shell%E5%88%87%E5%89%B2%E6%96%87%E4%BB%B6/","excerpt":"","text":"最近工作中需要使用shell，从远程rsync数据过来预处理后提交到hdfs中，再调用pig脚本在hadoop集群上处理数据，完了fs -get下来结果文件并进行进一步处理，再推送给其他系统使用。其间需要将pig作业的结果文件合并并且均分为10个文件推送给远程服务器上的应用加载。因为结果文件比较大，远程应用拿到结果文件后使用多线程加载，所以需均分为10个小文件。虽然mr作业出来的文件结果也是part-00000、part-00001，但若pig脚本中不指定reduce任务数，产生的结果文件个数是3个，而且下下来之后需要进行重命名。与其这样还不如自己处理。 123456789101112131415161718192021222324252627282930rm -rf $TODAY_ALL_INDUSKEY for allName in `find $TODAY_ALL_TMP_DIR -name &quot;part-*&quot;` do INFO &quot;Processing result file&quot; $allName cat $allName &gt;&gt; $TODAY_ALL_INDUSKEY #把结果文件重定向到一个文件 done ALL_INDUSKEY_FILE_NUM=10 #拆分的文件数量 ALL_KEY_LINES=0 #结果文件行数 INFO &quot;Split $TODAY_ALL_INDUSKEY into $ALL_INDUSKEY_FILE_NUM files&quot; for str in `wc -l $TODAY_ALL_INDUSKEY`; do t=`expr match $str &quot;[1-9][0-9]*$&quot;`; if [ $t -gt 0 ]; then ALL_KEY_LINES=$str #获取结果文件行数 INFO &quot;Line of $TODAY_ALL_INDUSKEY is $ALL_KEY_LINES&quot; fi done if [ $ALL_KEY_LINES -ne 0 ]; then tmpLine=`echo &quot;scale=2;$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM&quot;|bc` #每个小文件的行数，保留两位小数 INFO &quot;$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM=$tmpLine&quot; subFileLines=`echo $(($&#123;tmpLine//.*/+1&#125;))` #向上取整 INFO &quot;Per subfile lines:$subFileLines&quot; split -l $subFileLines -a 1 -d $TODAY_ALL_INDUSKEY $TODAY_ALL_INDUSKEY&quot;_&quot; #拆分文件 fi if [ -f $TODAY_ALL_INDUSKEY ]; then touch $TODAY_ALL_INDUSKEY.done #创建done文件 rm -rf $TODAY_ALL_TMP_DIR INFO &quot;Process result file dir $TODAY_ALL_TMP_DIR done!&quot; fi","categories":[],"tags":[{"name":"shell","slug":"shell","permalink":"https://maohong.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://maohong.github.io/tags/linux/"}]},{"title":"Shell中的IFS分隔符使用","slug":"shell中的IFS分隔符","date":"2013-01-29T12:41:54.000Z","updated":"2025-03-03T09:38:38.052Z","comments":true,"path":"20130129/shell中的IFS分隔符/","permalink":"https://maohong.github.io/20130129/shell%E4%B8%AD%E7%9A%84IFS%E5%88%86%E9%9A%94%E7%AC%A6/","excerpt":"","text":"在linux中，shell把每个 $IFS 字符对待成一个分隔符，且基于这些字符把其他扩展的结果分割。 工作中需要处理一个文件datafile，文件中有好几列，列与列之间以‘\\3′分割，如下(终端下’\\3′显示为方块)： 我需要拿到文件中第三列为1的数据行再做具体的处理，比如取其中的某一列数据再去其他文件grep数据等等。简单点，直接逐行cat数据吧。 脚本如下： 1234for line in `awk -F&quot;\\3&quot; &#x27;&#123;if($3==1) print $0&#125;&#x27; datafile` do echo $linedone 结果如下： 本来是想要逐行打印出来的，可结果却不是我想要的，究其原因，是因为在shell的for循环中，列出集合的item时，默认是以或或为分隔符，我们的数据文件中有空格，因此它就以空格分割打印了。 可以通过显式设置IFS的值来达到我们要的效果，修改后的脚本如下： 1234567oldifs=$IFSIFS=$&#x27;\\n&#x27; #change seperator to &#x27;\\n&#x27; to get a linefor line in `awk -F&quot;\\3&quot; &#x27;&#123;if($3==1) print $0&#125;&#x27; datafile` do echo $linedoneIFS=$oldifs #reset seperator 通过先保存当前的IFS变量的值到一个临时变量，再显式设置为我们想要的行分隔符$’\\n’，然后在for循环结束后，再重置IFS的值即可。 结果如下：","categories":[{"name":"Shell","slug":"Shell","permalink":"https://maohong.github.io/categories/Shell/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://maohong.github.io/tags/shell/"}]},{"title":"将Hadoop RPC框架应用于多节点任务调度","slug":"将Hadoop-RPC框架应用于多节点任务调度","date":"2013-01-21T12:53:38.000Z","updated":"2025-03-03T09:38:38.053Z","comments":true,"path":"20130121/将Hadoop-RPC框架应用于多节点任务调度/","permalink":"https://maohong.github.io/20130121/%E5%B0%86Hadoop-RPC%E6%A1%86%E6%9E%B6%E5%BA%94%E7%94%A8%E4%BA%8E%E5%A4%9A%E8%8A%82%E7%82%B9%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/","excerpt":"背景在hadoop中，主从节点之间保持着心跳通信，用于传输节点状态信息、任务调度信息以及节点动作信息等等。 hdfs的namenode与datanode，mapreduce的jobtracker与tasktracker，hbase的hmaster与 regionserver之间的通信，都是基于hadoop RPC。Hadoop RPC是hadoop里非常基础的通信框架。hadoop 2.0以前hadoop RPC的数据序列化是通过实现自己定义的Writable接口实现，而从hadoop 2.0开始，数据的序列化工作交给了ProtocolBuffer去做。关于Hadoop RPC的实现原理已经有很多文章进行了详细的介绍（源码级强力分析hadoop的RPC机制，Hadoop基于Protocol Buffer的RPC实现代码分析-Server端，带有HA功能的Hadoop Client端RPC实现原理与代码分析），这里就不在赘述了。下面就直接引入问题和方案吧。 问题工作中经常需要在定时任务系统上写一些定时任务，随着业务规模的增长和扩大，需要定时处理的任务越来越多，任务之间的执行间隔越来越小，某一时间段内（比如0点、整点或半点）执行的任务会越来越密集，只在一台机器上执行这些任务的话，会出现较大的风险： 任务并发度较高时，单机的系统资源将成为瓶颈 如果一个任务的运行占用了整个机器的大部分资源，比如sql查询耗费巨大内存和CPU资源，将直接影响其他任务的运行 任务失败后，如果仍然在同一台节点自动重新执行，失败率较高 机器宕机后，必须第一时间重启机器或重新部署定时任务系统，所有任务都不能按时执行 等等 方案可想而知的是，可以通过将定时任务系统进行分布式改造，使用多个节点执行任务，将任务分发到不同节点上进行处理，并且完善失败重试机制，从而提高系统稳定性，实现任务系统的高可靠。既然是在多个节点之间分发任务，肯定得有个任务的管理者(主节点)，在我们现有的系统中，也就是一套可以部署定时任务的web系统，任务代码更新后，部署好这套web系统，即可通过web页面设置定时任务并且进行调度(在单个节点上执行)。执行任务的节点(子节点)有多个以后，如何分发任务到子节点呢，我们可以把任务的信息封装成一个bean，通过RPC发布给子节点，子节点通过这个任务bean获得任务信息，并在指定的时刻执行任务。同时，子节点可以通过与主节点的心跳通信将节点状态和执行任务的情况告诉主节点。这样其实就与hadoop mapreduce分发任务有点相似了，呵呵，这里主节点与子节点之间的通信，我们就可以通过Hadoop RPC框架来实现了，不同的是，我们分发的任务是定时任务，发布任务时需要将任务的定时信息一并发给子节点。 实现单点的定时任务系统是基于Quartz的，在分布式环境下，可以继续基于Quartz进行改造，任务的定时信息可以通过Quartz中的JobDetail和Trigger对象来描述并封装，加上任务执行的入口类信息，再通过RPC由主节点发给子节点。子节点收到封装好的任务信息对象后，再构造JobDetail和Trigger，设置好启动时间后，通过入口类启动任务。下面是一个简单的demo。","text":"背景在hadoop中，主从节点之间保持着心跳通信，用于传输节点状态信息、任务调度信息以及节点动作信息等等。 hdfs的namenode与datanode，mapreduce的jobtracker与tasktracker，hbase的hmaster与 regionserver之间的通信，都是基于hadoop RPC。Hadoop RPC是hadoop里非常基础的通信框架。hadoop 2.0以前hadoop RPC的数据序列化是通过实现自己定义的Writable接口实现，而从hadoop 2.0开始，数据的序列化工作交给了ProtocolBuffer去做。关于Hadoop RPC的实现原理已经有很多文章进行了详细的介绍（源码级强力分析hadoop的RPC机制，Hadoop基于Protocol Buffer的RPC实现代码分析-Server端，带有HA功能的Hadoop Client端RPC实现原理与代码分析），这里就不在赘述了。下面就直接引入问题和方案吧。 问题工作中经常需要在定时任务系统上写一些定时任务，随着业务规模的增长和扩大，需要定时处理的任务越来越多，任务之间的执行间隔越来越小，某一时间段内（比如0点、整点或半点）执行的任务会越来越密集，只在一台机器上执行这些任务的话，会出现较大的风险： 任务并发度较高时，单机的系统资源将成为瓶颈 如果一个任务的运行占用了整个机器的大部分资源，比如sql查询耗费巨大内存和CPU资源，将直接影响其他任务的运行 任务失败后，如果仍然在同一台节点自动重新执行，失败率较高 机器宕机后，必须第一时间重启机器或重新部署定时任务系统，所有任务都不能按时执行 等等 方案可想而知的是，可以通过将定时任务系统进行分布式改造，使用多个节点执行任务，将任务分发到不同节点上进行处理，并且完善失败重试机制，从而提高系统稳定性，实现任务系统的高可靠。既然是在多个节点之间分发任务，肯定得有个任务的管理者(主节点)，在我们现有的系统中，也就是一套可以部署定时任务的web系统，任务代码更新后，部署好这套web系统，即可通过web页面设置定时任务并且进行调度(在单个节点上执行)。执行任务的节点(子节点)有多个以后，如何分发任务到子节点呢，我们可以把任务的信息封装成一个bean，通过RPC发布给子节点，子节点通过这个任务bean获得任务信息，并在指定的时刻执行任务。同时，子节点可以通过与主节点的心跳通信将节点状态和执行任务的情况告诉主节点。这样其实就与hadoop mapreduce分发任务有点相似了，呵呵，这里主节点与子节点之间的通信，我们就可以通过Hadoop RPC框架来实现了，不同的是，我们分发的任务是定时任务，发布任务时需要将任务的定时信息一并发给子节点。 实现单点的定时任务系统是基于Quartz的，在分布式环境下，可以继续基于Quartz进行改造，任务的定时信息可以通过Quartz中的JobDetail和Trigger对象来描述并封装，加上任务执行的入口类信息，再通过RPC由主节点发给子节点。子节点收到封装好的任务信息对象后，再构造JobDetail和Trigger，设置好启动时间后，通过入口类启动任务。下面是一个简单的demo。 以下是一个简单的定时任务信息描述对象CronJobInfo，包括JobDetailInfo和TriggerInfo两个属性： /** * 定时任务信息，包括任务信息和触发器信息 */ public class CronJobInfo implements Writable &#123; private JobDetailInfo jobDetailInfo = new JobDetailInfo(); private TriggerInfo triggerInfo = new TriggerInfo(); @Override public void readFields(DataInput in) throws IOException &#123; jobDetailInfo.readFields(in); triggerInfo.readFields(in); &#125; @Override public void write(DataOutput out) throws IOException &#123; jobDetailInfo.write(out); triggerInfo.write(out); &#125; // getters and setters... &#125; 任务信息JobDetailInfo，由主节点构造，子节点解析构造JobDetail对象： public class JobDetailInfo implements Writable &#123; private String name; // 任务名称 private String group = Scheduler.DEFAULT_GROUP; // 任务组 private String description; // 任务描述 private Class jobClass; // 任务的启动类 private JobDataMap jobDataMap; // 任务所需的参数，用来给作业提供数据支持的数据结构 private boolean volatility = false; // &lt;span&gt;重启应用之后是否删除任务的相关信息,&lt;/span&gt; private boolean durability = false; // 任务完成之后是否依然保留到数据库 private boolean shouldRecover = false; // 应用重启之后时候忽略过期任务 @Override public void readFields(DataInput in) throws IOException &#123; name = WritableUtils.readString(in); group = WritableUtils.readString(in); description = WritableUtils.readString(in); String className = WritableUtils.readString(in); if (className != null) &#123; try &#123; jobClass = Class.forName(new String(className)); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; &#125; int dataMapSize = WritableUtils.readVInt(in); while (dataMapSize-- &gt; 0) &#123; String key = WritableUtils.readString(in); String value = WritableUtils.readString(in); jobDataMap.put(key, value); &#125; volatility = in.readBoolean(); durability = in.readBoolean(); shouldRecover = in.readBoolean(); &#125; @Override public void write(DataOutput out) throws IOException &#123; WritableUtils.writeString(out, name); WritableUtils.writeString(out, group); WritableUtils.writeString(out, description); WritableUtils.writeString(out, jobClass.getName()); if (jobDataMap == null) WritableUtils.writeVInt(out, 0); else &#123; WritableUtils.writeVInt(out, jobDataMap.size()); for (Object k : jobDataMap.keySet()) &#123; WritableUtils.writeString(out, k.toString()); WritableUtils.writeString(out, jobDataMap.get(k).toString()); &#125; &#125; out.writeBoolean(volatility); out.writeBoolean(durability); out.writeBoolean(shouldRecover); &#125; //getters and setters //..... &#125; 任务触发器信息TriggerInfo ，由主节点构造，子节点解析构造Trigger对象： public class TriggerInfo implements Writable &#123; private String name; // trigger名称 private String group = Scheduler.DEFAULT_GROUP; // triger组名称 private String description; // trigger描述 private Date startTime; // 启动时间 private Date endTime; // 结束时间 private long repeatInterval; // 重试时间间隔 private int repeatCount; //重试次数 @Override public void readFields(DataInput in) throws IOException &#123; name = WritableUtils.readString(in); group = WritableUtils.readString(in); description = WritableUtils.readString(in); long start = in.readLong(); startTime = start==0 ? null : new Date(start); long end = in.readLong(); endTime = end==0 ? null : new Date(end); repeatInterval = in.readLong(); repeatCount = in.readInt(); &#125; @Override public void write(DataOutput out) throws IOException &#123; WritableUtils.writeString(out, name); WritableUtils.writeString(out, group); WritableUtils.writeString(out, description); out.writeLong(startTime == null ? 0 : startTime.getTime()); out.writeLong(endTime == null ? 0 : endTime.getTime()); out.writeLong(repeatInterval); out.writeInt(repeatCount); &#125; //getters and setters //..... &#125; 主从节点通信的协议： public interface TaskProtocol extends VersionedProtocol &#123; public CronJobInfo hearbeat(); &#125; 在这个demo中，主节点启动后，启动RPC server线程，等待客户端（子节点）的连接，当客户端调用heartbeat方法时，主节点将会生成一个任务信息返回给客户端： public class TaskScheduler implements TaskProtocol &#123; private Logger logger = Logger.getLogger(getClass()); private Server server; public TaskScheduler() &#123; try &#123; server = RPC.getServer(this, &quot;192.168.1.101&quot;, 8888, new Configuration()); server.start(); server.join(); &#125; catch (UnknownHostException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; @Override public long getProtocolVersion(String arg0, long arg1) throws IOException &#123; return 1; &#125; @Override public CronJobInfo generateCronJob() &#123; // 1、创建JobDetial对象 JobDetailInfo detail = new JobDetailInfo(); // 设置工作项 detail.setJobClass(DemoTask.class); detail.setName(&quot;MyJob_1&quot;); detail.setGroup(&quot;JobGroup_1&quot;); // 2、创建Trigger对象 TriggerInfo trigger = new TriggerInfo(); trigger.setName(&quot;Trigger_1&quot;); trigger.setGroup(&quot;Trigger_Group_1&quot;); trigger.setStartTime(new Date()); // 设置重复停止时间，并销毁该Trigger对象 Calendar c = Calendar.getInstance(); c.setTimeInMillis(System.currentTimeMillis() + 1000 * 1L); trigger.setEndTime(c.getTime()); // 设置重复间隔时间 trigger.setRepeatInterval(1000 * 1L); // 设置重复执行次数 trigger.setRepeatCount(3); CronJobInfo info = new CronJobInfo(); info.setJobDetailInfo(detail); info.setTriggerInfo(trigger); return info; &#125; public static void main(String[] args) &#123; TaskScheduler ts = new TaskScheduler(); &#125; &#125; demo任务类，打印信息： public class DemoTask implements Job &#123; public void execute(JobExecutionContext context) throws JobExecutionException &#123; System.out.println(this + &quot;: executing task @&quot; + new Date()); &#125; &#125; 子节点demo，启动后连接主节点，远程调用generateCronJob方法，获得一个任务描述信息，并启动定时任务。 public class TaskRunner &#123; private Logger logger = Logger.getLogger(getClass()); private TaskProtocol proxy; public TaskRunner() &#123; InetSocketAddress addr = new InetSocketAddress(&quot;localhost&quot;, 8888); try &#123; proxy = (TaskProtocol) RPC.waitForProxy(TaskProtocol.class, 1, addr, new Configuration()); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public void close() &#123; RPC.stopProxy(proxy); &#125; /** * 从server获取一个定时任务 */ public void getCronJob() &#123; CronJobInfo info = proxy.generateCronJob(); JobDetail jobDetail = getJobDetail(info.getJobDetailInfo()); SimpleTrigger trigger = getTrigger(info.getTriggerInfo()); // 创建Scheduler对象，并配置JobDetail和Trigger对象 SchedulerFactory sf = new StdSchedulerFactory(); Scheduler scheduler = null; try &#123; scheduler = sf.getScheduler(); scheduler.scheduleJob(jobDetail, trigger); // 执行启动操作 scheduler.start(); &#125; catch (SchedulerException e) &#123; e.printStackTrace(); &#125; &#125; /** * @param jobDetailInfo * @return */ private JobDetail getJobDetail(JobDetailInfo info) &#123; JobDetail detail = new JobDetail(); detail.setName(info.getName()); detail.setGroup(info.getGroup()); detail.setDescription(info.getDescription()); detail.setJobClass(info.getJobClass()); detail.setJobDataMap(info.getJobDataMap()); detail.setRequestsRecovery(info.isShouldRecover()); detail.setDurability(info.isDurability()); detail.setVolatility(info.isVolatility()); logger.info(&quot;client get jobdetail:&quot; + detail); return detail; &#125; /** * @param triggerInfo * @return */ private SimpleTrigger getTrigger(TriggerInfo info) &#123; SimpleTrigger trigger = new SimpleTrigger(); trigger.setName(info.getName()); trigger.setGroup(info.getGroup()); trigger.setDescription(info.getDescription()); trigger.setStartTime(info.getStartTime()); trigger.setEndTime(info.getEndTime()); trigger.setRepeatInterval(info.getRepeatInterval()); trigger.setRepeatCount(info.getRepeatCount()); logger.info(&quot;client get trigger:&quot; + trigger); return trigger; &#125; public static void main(String[] args) &#123; TaskRunner t = new TaskRunner(); t.getCronJob(); t.close(); &#125; &#125; 先启动TaskScheduler，再启动TaskRunner，结果如下： TaskScheduler日志:2013-01-20 15:42:21,661 [Socket Reader #1 for port 8888] INFO [org.apache.hadoop.ipc.Server] – Starting Socket Reader #1 for port 88882013-01-20 15:42:21,662 [main] INFO [org.apache.hadoop.ipc.metrics.RpcMetrics] – Initializing RPC Metrics with hostName&#x3D;TaskScheduler, port&#x3D;88882013-01-20 15:42:21,706 [main] INFO [org.apache.hadoop.ipc.metrics.RpcDetailedMetrics] – Initializing RPC Metrics with hostName&#x3D;TaskScheduler, port&#x3D;88882013-01-20 15:42:21,710 [IPC Server listener on 8888] INFO [org.apache.hadoop.ipc.Server] – IPC Server listener on 8888: starting2013-01-20 15:42:21,711 [IPC Server Responder] INFO [org.apache.hadoop.ipc.Server] – IPC Server Responder: starting2013-01-20 15:42:21,711 [IPC Server handler 0 on 8888] INFO [org.apache.hadoop.ipc.Server] – IPC Server handler 0 on 8888: starting2013-01-20 15:42:24,084 [IPC Server handler 0 on 8888] INFO [org.mh.rpc.task.TaskScheduler] – generate a task: org.mh.rpc.task.JobDetailInfo@1f26605 TaskRunner:2013-01-20 15:42:26,323 [main] INFO [org.mh.rpc.task.TaskRunner] – client get jobdetail:JobDetail ‘JobGroup_1.MyJob_1′: jobClass: ‘org.mh.rpc.quartz.GetSumTask isStateful: false isVolatile: false isDurable: false requestsRecovers: false2013-01-20 15:42:26,329 [main] INFO [org.mh.rpc.task.TaskRunner] – client get trigger:Trigger ‘Trigger_Group_1.Trigger_1′: triggerClass: ‘org.quartz.SimpleTrigger isVolatile: false calendar: ‘null’ misfireInstruction: 0 nextFireTime: null2013-01-20 15:42:26,382 [main] INFO [org.quartz.simpl.SimpleThreadPool] – Job execution threads will use class loader of thread: main2013-01-20 15:42:26,411 [main] INFO [org.quartz.core.SchedulerSignalerImpl] – Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl2013-01-20 15:42:26,411 [main] INFO [org.quartz.core.QuartzScheduler] – Quartz Scheduler v.1.6.5 created.2013-01-20 15:42:26,413 [main] INFO [org.quartz.simpl.RAMJobStore] – RAMJobStore initialized.2013-01-20 15:42:26,413 [main] INFO [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler ‘DefaultQuartzScheduler’ initialized from default resource file in Quartz package: ‘quartz.properties’2013-01-20 15:42:26,413 [main] INFO [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler version: 1.6.52013-01-20 15:42:26,415 [main] INFO [org.quartz.core.QuartzScheduler] – Scheduler DefaultQuartzScheduler_$_NON_CLUSTERED started.org.mh.rpc.quartz.DemoTask@1b66b06: executing task @Sun Jan 20 15:42:26 CST 2013 上面是一个简单的demo，演示了如何通过RPC将任务调度给节点去执行，对于Quartz来说，任务的形式可以千变万化，关键就看怎么去使用了，分发到多个节点上执行的话，就还需要对任务的信息做更多的封装了。","categories":[{"name":"Hadoop","slug":"Hadoop","permalink":"https://maohong.github.io/categories/Hadoop/"}],"tags":[{"name":"hadoop","slug":"hadoop","permalink":"https://maohong.github.io/tags/hadoop/"},{"name":"分布式应用","slug":"分布式应用","permalink":"https://maohong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"},{"name":"RPC","slug":"RPC","permalink":"https://maohong.github.io/tags/RPC/"},{"name":"任务调度","slug":"任务调度","permalink":"https://maohong.github.io/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"}]},{"title":"使用zookeeper协调多服务器的任务处理","slug":"使用zookeeper协调多服务器的任务处理","date":"2012-11-13T08:16:43.000Z","updated":"2025-03-03T09:38:38.053Z","comments":true,"path":"20121113/使用zookeeper协调多服务器的任务处理/","permalink":"https://maohong.github.io/20121113/%E4%BD%BF%E7%94%A8zookeeper%E5%8D%8F%E8%B0%83%E5%A4%9A%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%BB%BB%E5%8A%A1%E5%A4%84%E7%90%86/","excerpt":"背景Zookeeper是hadoop的子项目，是google的chubby的开源实现，是一个针对大规模分布式系统的可靠的分布式协调系统。Zookeeper一般部署在一个集群上，通过在集群间维护一个数据树，使得连接到集群的client能够获得统一的数据信息，比如系统公共配置信息、节点存活状态等等。因此，在互联网公司中，zookeeper被广泛运用于统一配置管理、名字服务、分布式同步等。问题我们看下这样一种场景：前台系统每时每刻都生成大量数据，这些原生数据由后台系统处理完毕后再作他用，我们暂且不谈这些数据的存储形式，只关注如何能够尽可能高效的处理。举个例子，前台系统可能是微博的前端发布系统、搜索引擎上的广告投放系统，或者是任务发布系统，后台系统则可能是对微博和广告信息的审查系统，比如用户发的微博如果包含近期敏感信息则不予显示，若是任务，后台系统则负责处理任务具体的执行。若数据量和任务量较小，单节点的后台系统或许可以处理得过来，但是如果数据量和任务量很大（比如新浪微博，龙年正月初一0点0分0秒，共有32312条微博同时发布），单节点的后台系统肯定吃不消，这时候，可想而知的是多节点同时处理前台过来的数据。最简单的方法是，按消息id对后台节点数取模（msgid%server_num&#x3D;mod），每个后台节点取自己那份数据进行处理，这就需要每个节点都知晓当前有多少个后台节点以及本节点所应取的mod数。但是，当某个节点宕机时，这个节点所应处理的数据无法被继续处理了，势必会造成阻塞，除非重新配置各节点上的参数，将节点数server_num减1，并修改各节点取数据的mod数。毋庸置疑，这样非常麻烦！如果能够将这种配置信息（实际上是数据在节点间分配的控制信息）统一管理起来，在配置信息发生变化时，各个后台节点能够及时知晓其变化，就可以避免上述情况的发生。因此，采用多节点处理数据时，有两个问题：1.避免多个节点重复处理同一条数据，否则造成资源浪费。2.不能有数据被遗漏处理，尤其是在有后台节点down掉的时候。也就是说，采用多节点同时处理数据时，需要将数据隔离开，分别给不同的节点处理，而且在有节点宕机的情况下，所有数据也必须可以无误的被其他可用节点处理。如何做到这一点呢，使用zookeeper吧！","text":"背景Zookeeper是hadoop的子项目，是google的chubby的开源实现，是一个针对大规模分布式系统的可靠的分布式协调系统。Zookeeper一般部署在一个集群上，通过在集群间维护一个数据树，使得连接到集群的client能够获得统一的数据信息，比如系统公共配置信息、节点存活状态等等。因此，在互联网公司中，zookeeper被广泛运用于统一配置管理、名字服务、分布式同步等。问题我们看下这样一种场景：前台系统每时每刻都生成大量数据，这些原生数据由后台系统处理完毕后再作他用，我们暂且不谈这些数据的存储形式，只关注如何能够尽可能高效的处理。举个例子，前台系统可能是微博的前端发布系统、搜索引擎上的广告投放系统，或者是任务发布系统，后台系统则可能是对微博和广告信息的审查系统，比如用户发的微博如果包含近期敏感信息则不予显示，若是任务，后台系统则负责处理任务具体的执行。若数据量和任务量较小，单节点的后台系统或许可以处理得过来，但是如果数据量和任务量很大（比如新浪微博，龙年正月初一0点0分0秒，共有32312条微博同时发布），单节点的后台系统肯定吃不消，这时候，可想而知的是多节点同时处理前台过来的数据。最简单的方法是，按消息id对后台节点数取模（msgid%server_num&#x3D;mod），每个后台节点取自己那份数据进行处理，这就需要每个节点都知晓当前有多少个后台节点以及本节点所应取的mod数。但是，当某个节点宕机时，这个节点所应处理的数据无法被继续处理了，势必会造成阻塞，除非重新配置各节点上的参数，将节点数server_num减1，并修改各节点取数据的mod数。毋庸置疑，这样非常麻烦！如果能够将这种配置信息（实际上是数据在节点间分配的控制信息）统一管理起来，在配置信息发生变化时，各个后台节点能够及时知晓其变化，就可以避免上述情况的发生。因此，采用多节点处理数据时，有两个问题：1.避免多个节点重复处理同一条数据，否则造成资源浪费。2.不能有数据被遗漏处理，尤其是在有后台节点down掉的时候。也就是说，采用多节点同时处理数据时，需要将数据隔离开，分别给不同的节点处理，而且在有节点宕机的情况下，所有数据也必须可以无误的被其他可用节点处理。如何做到这一点呢，使用zookeeper吧！解决方案我们通过zookeeper维护一个目录（比如&#x2F;app&#x2F;config），服务器启动时连接zookeeper集群并在该目录下创建表示自己的临时节点（CreateMode.EPHEMERAL），相当于注册一个节点，节点名可以是本服务器的ip，节点的值为该服务器的mod值，按注册顺序从0递增，即第一个注册的节点值为0，第二个为1，依次下去，因此&#x2F;app&#x2F;config的子节点数就是注册到zookeeper的服务器数。同时，各服务器监听&#x2F;app&#x2F;config目录，当其发生变化（新加入子节点、子节点失效等）时，每个服务器都将获取到这个事件并进行相应的处理。demo下面针对以上场景给出一个示例demo。Server类：服务器ClientThread类：服务器上的单个线程NodeStateWatcher类：服务器监听zookeeper集群的监听器ZkOperationImpl类：zookeeper的操作封装（实现ZkOperation接口）Server.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169public class Server extends Thread&#123; private ClientThread[] clients = new ClientThread[Constant.THREAD_COUNT]; // 数据处理线程 private ZkOperation operationCient = null; // 与zookeeper的连接 private Watcher nodeWatcher = null; // 向zookeeper注册的监听器 private String name; // 服务器名 private String ip; // 服务器ip public Server(String name, String ip) throws IOException, KeeperException, InterruptedException &#123; this.name = name; this.ip = ip; this.operationCient = new ZkOperationImpl(); this.nodeWatcher = new NodeStateWatcher(this); this.operationCient.init(Constant.ZK_ADDRESS, nodeWatcher); for (int i=0; i&lt;Constant.THREAD_COUNT; ++i) &#123; ClientThread c = new ClientThread(i, ip, name); this.clients[i]= c; &#125; initialize(); &#125; /** * 向zookeeper集群注册 * @throws InterruptedException * @throws KeeperException */ private void registerServer() throws KeeperException, InterruptedException &#123; List&lt;String&gt; children = operationCient.getChilds(Constant.ROOT_PATH); int max = -1; for (String childName : children) &#123; String childPath = Constant.ROOT_PATH + &quot;/&quot; + childName; int mod = Integer.parseInt(operationCient.getData(childPath)); if (mod &gt; max) max = mod; &#125; String path = Constant.ROOT_PATH + &quot;/&quot; + ip; operationCient.apendTempNode(path, String.valueOf(max&lt;0 ? 0 : ++max)); &#125; /** * 启动数据处理线程 * @throws Exception */ public void run() &#123; for (ClientThread c : clients) &#123; CommonUtil.log(&quot;Start thread-&quot; + c); c.start(); &#125; &#125; /** * 服务器初始化 * @throws InterruptedException * @throws KeeperException */ private void initialize() throws KeeperException, InterruptedException &#123; CommonUtil.log(&quot;================&quot;); CommonUtil.log(this + &quot; initializing...&quot;); // 配置信息的上级目录不存在 if (!operationCient.exist(Constant.ROOT_PATH)) &#123; System.err.println(&quot;Root path &quot; + Constant.ROOT_PATH + &quot;does not exist!!! Create root path...&quot;); operationCient.apendPresistentNode(Constant.ROOT_PATH, &quot;1&quot;); CommonUtil.log(&quot;Create root path &quot; + Constant.ROOT_PATH + &quot; successfully!&quot;); &#125; registerServer(); refreshConfig(); CommonUtil.log(this + &quot; finish initializing...&quot;); CommonUtil.log(&quot;================&quot;); &#125; /** * watch到节点变化后，刷新节点数和模数 * @throws InterruptedException * @throws KeeperException */ public void refresh() throws KeeperException, InterruptedException &#123; CommonUtil.log(&quot;================&quot;); CommonUtil.log(this + &quot;:freshing...&quot;); refreshConfig(); CommonUtil.log(this + &quot;:end freshing...&quot;); CommonUtil.log(&quot;================&quot;); &#125; private void refreshConfig() throws KeeperException, InterruptedException &#123; String version = operationCient.getData(Constant.ROOT_PATH); CommonUtil.log(&quot;SYSTEM VERSION: &quot; + version); List&lt;String&gt; children = operationCient.getChilds(Constant.ROOT_PATH); // 1. 服务器数量为子节点的个数 int nodeCount = children.size(); CommonUtil.log(&quot;Server count:&quot; + nodeCount); synchronized (CommonUtil.BASE) &#123; CommonUtil.BASE = nodeCount * Constant.THREAD_COUNT; &#125; if (CommonUtil.BASE.intValue() == 0) return; Integer mod = null; for (String childName : children) &#123; // 2. 获取本服务器的模数 if (childName.equals(ip)) &#123; String childPath = Constant.ROOT_PATH + &quot;/&quot; + childName; mod = Integer.parseInt(operationCient.getData(childPath)); break; &#125; &#125; // 3. 刷新数据处理线程的取模数 if (mod == null) &#123; System.err.println(&quot;Did not get the mod number for &quot; + this); &#125; else &#123; CommonUtil.log(this + &quot;, mod=&quot; + mod + &quot;,base=&quot; + CommonUtil.BASE); for (ClientThread c : clients) &#123; c.refresh(mod); &#125; &#125; &#125; public String toString() &#123; return this.name + &quot;@&quot; + this.ip + &quot;&quot;; &#125; public ClientThread[] getClients() &#123; return clients; &#125; public ZkOperation getOperationCient() &#123; return operationCient; &#125; public Watcher getNodeWatcher() &#123; return nodeWatcher; &#125; public String getIp() &#123; return ip; &#125;&#125; ClientThread.java 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100public class ClientThread extends Thread&#123; private Integer modNum = -1; private Integer threadId; private String ip; private String clientName; public ClientThread(Integer threadId, String ip, String clientName) throws IOException, KeeperException, InterruptedException &#123; this.threadId = threadId; this.ip = ip; this.clientName = clientName; &#125; /** * watch到节点变化后，调用刷新节点数和模数 * @throws InterruptedException * @throws KeeperException */ public void refresh(int mod) throws KeeperException, InterruptedException &#123;// CommonUtil.log(&quot;================&quot;);// CommonUtil.log(this + &quot;:freshing...&quot;); synchronized (this.modNum) &#123; this.modNum = threadId + mod * Constant.THREAD_COUNT; &#125; CommonUtil.log(this + &quot;:&quot; + modNum + &quot;/&quot; + CommonUtil.BASE); // CommonUtil.log(this + &quot;:end freshing...&quot;);// CommonUtil.log(&quot;================&quot;); &#125; @Override public void run() &#123; long start = System.currentTimeMillis(); while (System.currentTimeMillis() - start &lt; Constant.DURATION) &#123; // 处理数据 processData(); try &#123; Thread.sleep(5000); //等待2秒 &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /** * 模拟处理数据逻辑：打印属于本线程的数据 */ private void processData() &#123; if (CommonUtil.BASE.equals(0) || modNum.equals(-1)) &#123; CommonUtil.err(this + &quot;: did not get server_count and modNum!!!&quot;); return; &#125; StringBuilder sb = new StringBuilder(this + &quot;-&quot; + modNum + &quot;/&quot; + CommonUtil.BASE + &quot;:&quot;); for (int i=0; i&lt;Constant.NUMBERS.length; ++i) &#123; int n = Constant.NUMBERS[i]; if (n % CommonUtil.BASE == modNum) &#123; sb.append(n).append(&quot; &quot;); &#125; &#125; CommonUtil.log(sb.toString()); &#125; @Override public String toString() &#123; return &quot;ClientThread_&quot; + this.clientName + &quot;@&quot; + this.ip + &quot;-thread_&quot; + this.threadId; &#125; public Integer getModNum() &#123; return modNum; &#125; public synchronized void setModNum(Integer modNum) &#123; this.modNum = modNum; &#125; public String getClientName() &#123; return clientName; &#125;&#125; NodeStateWatcher.java 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class NodeStateWatcher implements Watcher&#123; private Server server; public NodeStateWatcher(Server server) &#123; this.server = server; &#125; @Override public void process(WatchedEvent event) &#123; StringBuilder outputStr = new StringBuilder(); if (server.getName() != null) &#123; outputStr.append(server.getName() + &quot; get an event.&quot;); &#125; outputStr.append(&quot;Path:&quot; + event.getPath()); outputStr.append(&quot;,state:&quot; + event.getState()); outputStr.append(&quot;,type:&quot; + event.getType()); CommonUtil.log(outputStr.toString()); // 发现子节点有变化 if (event.getType() == EventType.NodeChildrenChanged || event.getType() == EventType.NodeDataChanged || event.getType() == EventType.NodeDeleted) &#123; CommonUtil.log(&quot;In event: &quot; + event.getType()); try &#123; server.refresh(); &#125; catch (KeeperException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; CommonUtil.log(&quot;End event: &quot; + event.getType()); &#125; &#125;&#125; ZkOperationImpl.java 部分zk操作代码 1234567891011121314151617181920212223242526272829303132@Override public void apendPresistentNode(String path, String data) throws KeeperException, InterruptedException &#123; if (zk != null) &#123; zk.create(path, data.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT); &#125; &#125; @Override public void delNode(String path) throws KeeperException, InterruptedException &#123; if (zk != null) &#123; zk.delete(path, -1); &#125; &#125; @Override public boolean exist(String path) throws KeeperException, InterruptedException &#123; if (zk != null) &#123; return zk.exists(path, true) != null; &#125; return false; &#125;&#125; Main.java：主类，启动demo 12345678910111213public class Main&#123; public static void main(String[] args) throws Exception &#123; Server c1 = new Server(&quot;ServerA&quot;, &quot;1.1.1.1&quot;); Server c2 = new Server(&quot;ServerB&quot;, &quot;1.1.1.2&quot;); Server c3 = new Server(&quot;ServerC&quot;, &quot;1.1.1.3&quot;); c1.start(); c2.start(); c3.start(); &#125;&#125; 验证由于Server的3个实例在同一台机器上运行，连接到zookeeper时，用的是一个session，所以demo中没有通过程序断开server与zookeeper的连接，如果serverA断开，那么serverB和serverC与zookeeper的session连接也会失效，达不到演示效果，所以我们只能暂时在zookeeper客户端手工更改zookeeper上的配置信息，用于模拟server与zookeeper集群断开连接和增加server的情形。server启动后，会先向zookeeper注册节点，因此我们先手工删除节点，再手工添加节点。手工执行的命令如下： [zk: localhost:2181(CONNECTED) 141] delete &#x2F;demo&#x2F;1.1.1.3[zk: localhost:2181(CONNECTED) 142] delete &#x2F;demo&#x2F;1.1.1.2[zk: localhost:2181(CONNECTED) 143] delete &#x2F;demo&#x2F;1.1.1.1[zk: localhost:2181(CONNECTED) 144] create -e &#x2F;demo&#x2F;1.1.1.1 0[zk: localhost:2181(CONNECTED) 145] create -e &#x2F;demo&#x2F;1.1.1.2 1[zk: localhost:2181(CONNECTED) 146] create -e &#x2F;demo&#x2F;1.1.1.3 2 可以通过程序打印信息发现，在节点配置信息每个服务器(Server)上的线程会动态的获取属于自己的数据并打印。当然，这里对数据的处理逻辑很简单，仅仅是打印出来，处理的数据也只是内存中的一个数组，对于类似这样的但是更复杂的应用场景，zookeeper同样适用，但是需要更多的考虑服务器与zookeeper集群连接的可靠性（比如session超时重连）、权限机制等等。上面的demo程序打印信息如下： [2012-11-14 15:18:42] New zk connection session: 0[2012-11-14 15:18:42] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:42] &#83;&#101;&#114;&#118;&#x65;&#114;&#x41;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#46;&#49; initializing…[2012-11-14 15:18:47] Thread-0 get an event.Path:null,state:SyncConnected,type:None[2012-11-14 15:18:47] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:18:47] In event: NodeChildrenChanged[2012-11-14 15:18:47] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:47] &#x53;&#x65;&#114;&#x76;&#x65;&#114;&#x41;&#64;&#x31;&#x2e;&#49;&#x2e;&#49;&#x2e;&#x31;:freshing…[2012-11-14 15:18:47] SYSTEM VERSION: 1[2012-11-14 15:18:47] SYSTEM VERSION: 1[2012-11-14 15:18:47] Server count:1[2012-11-14 15:18:47] Server count:1[2012-11-14 15:18:47] &#83;&#101;&#x72;&#x76;&#x65;&#114;&#x41;&#64;&#49;&#46;&#x31;&#x2e;&#49;&#46;&#49;, mod&#x3D;0,base&#x3D;5[2012-11-14 15:18:47] &#67;&#108;&#x69;&#101;&#110;&#x74;&#84;&#104;&#114;&#x65;&#97;&#x64;&#95;&#83;&#101;&#x72;&#x76;&#101;&#x72;&#x41;&#64;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#45;&#116;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#48;:0&#x2F;5[2012-11-14 15:18:47] &#67;&#x6c;&#105;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#x65;&#97;&#100;&#95;&#83;&#x65;&#114;&#118;&#101;&#x72;&#65;&#64;&#49;&#46;&#x31;&#46;&#49;&#x2e;&#x31;&#x2d;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#x31;:1&#x2F;5[2012-11-14 15:18:47] &#67;&#108;&#105;&#101;&#x6e;&#116;&#x54;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#83;&#x65;&#x72;&#118;&#x65;&#x72;&#x41;&#x40;&#49;&#x2e;&#x31;&#46;&#x31;&#x2e;&#x31;&#45;&#x74;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#x32;:2&#x2F;5[2012-11-14 15:18:47] &#x43;&#x6c;&#105;&#x65;&#x6e;&#116;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#x5f;&#83;&#x65;&#114;&#x76;&#x65;&#114;&#x41;&#64;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2d;&#x74;&#x68;&#114;&#x65;&#97;&#x64;&#x5f;&#x33;:3&#x2F;5[2012-11-14 15:18:47] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#84;&#104;&#x72;&#101;&#97;&#x64;&#95;&#83;&#101;&#114;&#118;&#x65;&#x72;&#x41;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#46;&#x31;&#45;&#116;&#104;&#114;&#x65;&#x61;&#100;&#95;&#x34;:4&#x2F;5[2012-11-14 15:18:47] &#x53;&#101;&#114;&#118;&#x65;&#x72;&#65;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#46;&#49; finish initializing…[2012-11-14 15:18:47] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:47] &#83;&#101;&#114;&#118;&#x65;&#x72;&#65;&#x40;&#x31;&#x2e;&#49;&#x2e;&#49;&#x2e;&#x31;, mod&#x3D;0,base&#x3D;5[2012-11-14 15:18:47] &#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#84;&#x68;&#x72;&#101;&#97;&#100;&#95;&#83;&#101;&#x72;&#x76;&#101;&#114;&#65;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#49;&#45;&#116;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#48;:0&#x2F;5[2012-11-14 15:18:47] &#67;&#108;&#105;&#101;&#x6e;&#116;&#x54;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#x72;&#65;&#64;&#49;&#x2e;&#49;&#46;&#x31;&#x2e;&#49;&#45;&#116;&#104;&#x72;&#101;&#97;&#100;&#95;&#49;:1&#x2F;5[2012-11-14 15:18:47] &#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#x54;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#83;&#x65;&#114;&#x76;&#x65;&#x72;&#65;&#x40;&#49;&#46;&#49;&#46;&#49;&#x2e;&#x31;&#45;&#116;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#x32;:2&#x2F;5[2012-11-14 15:18:47] &#67;&#108;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#97;&#100;&#95;&#83;&#x65;&#x72;&#x76;&#x65;&#114;&#x41;&#x40;&#49;&#x2e;&#x31;&#46;&#x31;&#x2e;&#49;&#45;&#116;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#x33;:3&#x2F;5[2012-11-14 15:18:47] &#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#65;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2d;&#116;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#52;:4&#x2F;5[2012-11-14 15:18:47] &#83;&#101;&#114;&#x76;&#x65;&#114;&#65;&#64;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#49;:end freshing…[2012-11-14 15:18:47] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:47] End event: NodeChildrenChanged[2012-11-14 15:18:47] New zk connection session: 0[2012-11-14 15:18:47] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:47] &#x53;&#101;&#x72;&#x76;&#101;&#x72;&#x42;&#x40;&#49;&#46;&#49;&#46;&#x31;&#46;&#x32; initializing…[2012-11-14 15:18:51] Thread-6 get an event.Path:null,state:SyncConnected,type:None[2012-11-14 15:18:51] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:18:51] In event: NodeChildrenChanged[2012-11-14 15:18:51] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:51] &#x53;&#x65;&#114;&#x76;&#101;&#x72;&#65;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#46;&#49;:freshing…[2012-11-14 15:18:51] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:18:51] In event: NodeChildrenChanged[2012-11-14 15:18:51] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:51] &#83;&#x65;&#x72;&#x76;&#101;&#114;&#66;&#x40;&#x31;&#x2e;&#49;&#x2e;&#49;&#x2e;&#50;:freshing…[2012-11-14 15:18:51] SYSTEM VERSION: 1[2012-11-14 15:18:51] SYSTEM VERSION: 1[2012-11-14 15:18:51] Server count:2[2012-11-14 15:18:51] SYSTEM VERSION: 1[2012-11-14 15:18:51] &#83;&#x65;&#x72;&#x76;&#x65;&#x72;&#x41;&#x40;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#49;, mod&#x3D;0,base&#x3D;10[2012-11-14 15:18:51] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#97;&#x64;&#x5f;&#x53;&#x65;&#x72;&#x76;&#101;&#x72;&#65;&#64;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2d;&#x74;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#x30;:0&#x2F;10[2012-11-14 15:18:51] &#67;&#108;&#105;&#x65;&#110;&#116;&#84;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#x53;&#x65;&#114;&#x76;&#x65;&#114;&#65;&#x40;&#49;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2d;&#x74;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#49;:1&#x2F;10[2012-11-14 15:18:51] &#x43;&#108;&#105;&#x65;&#x6e;&#x74;&#84;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#x53;&#101;&#114;&#x76;&#x65;&#x72;&#x41;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2d;&#116;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#x32;:2&#x2F;10[2012-11-14 15:18:51] &#x43;&#x6c;&#x69;&#101;&#x6e;&#116;&#84;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#83;&#101;&#114;&#x76;&#x65;&#114;&#65;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#x31;&#45;&#116;&#104;&#x72;&#101;&#97;&#x64;&#95;&#x33;:3&#x2F;10[2012-11-14 15:18:51] &#x43;&#x6c;&#x69;&#x65;&#110;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#101;&#114;&#x76;&#101;&#114;&#x41;&#x40;&#49;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#49;&#45;&#x74;&#104;&#x72;&#101;&#97;&#x64;&#95;&#52;:4&#x2F;10[2012-11-14 15:18:51] &#x53;&#x65;&#114;&#118;&#101;&#x72;&#65;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#49;:end freshing…[2012-11-14 15:18:51] Server count:2[2012-11-14 15:18:51] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:51] End event: NodeChildrenChanged[2012-11-14 15:18:51] Server count:2[2012-11-14 15:18:51] &#83;&#101;&#x72;&#x76;&#x65;&#x72;&#x42;&#64;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#50;, mod&#x3D;1,base&#x3D;10[2012-11-14 15:18:51] &#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#84;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#118;&#101;&#x72;&#66;&#x40;&#x31;&#46;&#49;&#x2e;&#x31;&#46;&#50;&#x2d;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#48;:5&#x2F;10[2012-11-14 15:18:51] &#x43;&#108;&#x69;&#x65;&#x6e;&#116;&#x54;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#114;&#x76;&#x65;&#x72;&#66;&#64;&#49;&#46;&#49;&#46;&#x31;&#x2e;&#x32;&#45;&#x74;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#49;:6&#x2F;10[2012-11-14 15:18:51] &#67;&#108;&#105;&#x65;&#110;&#x74;&#84;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#x53;&#101;&#x72;&#118;&#x65;&#114;&#x42;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#x32;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#x64;&#x5f;&#50;:7&#x2F;10[2012-11-14 15:18:51] &#67;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x53;&#101;&#114;&#118;&#101;&#114;&#66;&#64;&#49;&#x2e;&#49;&#x2e;&#49;&#46;&#50;&#45;&#x74;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#51;:8&#x2F;10[2012-11-14 15:18:51] &#x43;&#108;&#105;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#114;&#x76;&#101;&#114;&#x42;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#46;&#x32;&#45;&#x74;&#x68;&#x72;&#101;&#x61;&#100;&#x5f;&#x34;:9&#x2F;10[2012-11-14 15:18:51] &#83;&#101;&#114;&#118;&#x65;&#114;&#x42;&#64;&#x31;&#46;&#49;&#x2e;&#49;&#46;&#50;:end freshing…[2012-11-14 15:18:51] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:51] End event: NodeChildrenChanged[2012-11-14 15:18:51] &#83;&#x65;&#x72;&#118;&#101;&#114;&#66;&#x40;&#x31;&#46;&#x31;&#46;&#49;&#46;&#x32;, mod&#x3D;1,base&#x3D;10[2012-11-14 15:18:51] &#67;&#108;&#105;&#101;&#110;&#116;&#x54;&#104;&#114;&#101;&#x61;&#x64;&#95;&#83;&#x65;&#114;&#x76;&#101;&#x72;&#66;&#64;&#49;&#x2e;&#49;&#46;&#x31;&#x2e;&#50;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#100;&#95;&#x30;:5&#x2F;10[2012-11-14 15:18:51] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#x54;&#104;&#x72;&#x65;&#97;&#x64;&#x5f;&#83;&#101;&#x72;&#x76;&#101;&#x72;&#x42;&#64;&#x31;&#x2e;&#x31;&#46;&#49;&#46;&#50;&#x2d;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#49;:6&#x2F;10[2012-11-14 15:18:51] &#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#101;&#97;&#x64;&#95;&#x53;&#101;&#114;&#118;&#101;&#x72;&#66;&#64;&#49;&#46;&#x31;&#46;&#x31;&#x2e;&#x32;&#x2d;&#116;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#50;:7&#x2F;10[2012-11-14 15:18:51] &#67;&#x6c;&#105;&#x65;&#x6e;&#116;&#84;&#x68;&#114;&#101;&#x61;&#100;&#x5f;&#x53;&#x65;&#x72;&#118;&#101;&#x72;&#x42;&#x40;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#50;&#45;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#51;:8&#x2F;10[2012-11-14 15:18:51] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#x65;&#x72;&#x76;&#101;&#114;&#x42;&#64;&#49;&#46;&#49;&#46;&#49;&#46;&#x32;&#x2d;&#116;&#104;&#x72;&#x65;&#x61;&#100;&#x5f;&#x34;:9&#x2F;10[2012-11-14 15:18:51] &#83;&#101;&#114;&#x76;&#x65;&#114;&#x42;&#64;&#49;&#46;&#49;&#46;&#49;&#46;&#50; finish initializing…[2012-11-14 15:18:51] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:51] New zk connection session: 0[2012-11-14 15:18:51] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:51] &#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#67;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#x33; initializing…[2012-11-14 15:18:56] Thread-12 get an event.Path:null,state:SyncConnected,type:None[2012-11-14 15:18:56] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:18:56] In event: NodeChildrenChanged[2012-11-14 15:18:56] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:56] &#83;&#101;&#114;&#118;&#101;&#x72;&#x41;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#46;&#x31;:freshing…[2012-11-14 15:18:56] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:18:56] In event: NodeChildrenChanged[2012-11-14 15:18:56] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:56] &#x53;&#x65;&#x72;&#118;&#x65;&#x72;&#x42;&#x40;&#x31;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#50;:freshing…[2012-11-14 15:18:56] Thread-12 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:18:56] In event: NodeChildrenChanged[2012-11-14 15:18:56] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:56] &#x53;&#101;&#114;&#118;&#101;&#x72;&#67;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#46;&#x33;:freshing…[2012-11-14 15:18:56] SYSTEM VERSION: 1[2012-11-14 15:18:56] SYSTEM VERSION: 1[2012-11-14 15:18:56] SYSTEM VERSION: 1[2012-11-14 15:18:56] Server count:3[2012-11-14 15:18:56] &#x53;&#x65;&#x72;&#118;&#x65;&#114;&#65;&#64;&#x31;&#46;&#x31;&#46;&#x31;&#x2e;&#49;, mod&#x3D;0,base&#x3D;15[2012-11-14 15:18:56] &#67;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#x53;&#x65;&#x72;&#x76;&#101;&#x72;&#65;&#x40;&#49;&#46;&#49;&#x2e;&#49;&#46;&#49;&#45;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#48;:0&#x2F;15[2012-11-14 15:18:56] Server count:3[2012-11-14 15:18:56] &#x43;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#101;&#x61;&#100;&#95;&#x53;&#x65;&#x72;&#118;&#x65;&#114;&#65;&#x40;&#x31;&#46;&#x31;&#x2e;&#x31;&#46;&#49;&#x2d;&#x74;&#x68;&#114;&#x65;&#97;&#100;&#95;&#49;:1&#x2F;15[2012-11-14 15:18:56] &#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#x76;&#101;&#x72;&#x41;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#49;&#45;&#116;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#x32;:2&#x2F;15[2012-11-14 15:18:56] &#x43;&#108;&#x69;&#101;&#110;&#116;&#x54;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#83;&#101;&#x72;&#118;&#101;&#x72;&#65;&#x40;&#x31;&#x2e;&#49;&#x2e;&#49;&#46;&#49;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#51;:3&#x2F;15[2012-11-14 15:18:56] &#x43;&#108;&#105;&#x65;&#110;&#116;&#x54;&#x68;&#x72;&#101;&#97;&#100;&#95;&#83;&#101;&#x72;&#118;&#101;&#x72;&#65;&#64;&#49;&#46;&#49;&#x2e;&#49;&#46;&#49;&#x2d;&#116;&#104;&#x72;&#101;&#x61;&#100;&#95;&#52;:4&#x2F;15[2012-11-14 15:18:56] &#83;&#x65;&#114;&#118;&#x65;&#x72;&#x41;&#x40;&#49;&#x2e;&#49;&#46;&#x31;&#x2e;&#49;:end freshing…[2012-11-14 15:18:56] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:56] End event: NodeChildrenChanged[2012-11-14 15:18:56] SYSTEM VERSION: 1[2012-11-14 15:18:56] Server count:3[2012-11-14 15:18:56] &#83;&#x65;&#114;&#x76;&#x65;&#x72;&#x42;&#x40;&#49;&#46;&#49;&#x2e;&#x31;&#x2e;&#50;, mod&#x3D;1,base&#x3D;15[2012-11-14 15:18:56] &#67;&#108;&#105;&#101;&#x6e;&#116;&#x54;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#x53;&#x65;&#114;&#x76;&#x65;&#x72;&#66;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#46;&#x32;&#45;&#x74;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#48;:5&#x2F;15[2012-11-14 15:18:56] &#x43;&#108;&#105;&#101;&#110;&#116;&#84;&#x68;&#114;&#x65;&#97;&#100;&#95;&#83;&#101;&#x72;&#118;&#101;&#x72;&#x42;&#x40;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#x32;&#x2d;&#116;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#49;:6&#x2F;15[2012-11-14 15:18:56] &#67;&#x6c;&#x69;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#101;&#97;&#100;&#95;&#83;&#101;&#114;&#x76;&#101;&#x72;&#x42;&#x40;&#49;&#46;&#x31;&#x2e;&#49;&#46;&#x32;&#x2d;&#x74;&#x68;&#114;&#101;&#x61;&#100;&#x5f;&#x32;:7&#x2F;15[2012-11-14 15:18:56] &#x43;&#108;&#105;&#x65;&#110;&#116;&#x54;&#104;&#114;&#x65;&#97;&#x64;&#x5f;&#x53;&#x65;&#x72;&#118;&#101;&#x72;&#66;&#x40;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#50;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#x33;:8&#x2F;15[2012-11-14 15:18:56] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#104;&#x72;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#x72;&#x42;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#x32;&#x2d;&#116;&#x68;&#114;&#101;&#x61;&#x64;&#95;&#x34;:9&#x2F;15[2012-11-14 15:18:56] &#83;&#x65;&#114;&#x76;&#x65;&#114;&#x42;&#64;&#x31;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#x32;:end freshing…[2012-11-14 15:18:56] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:56] End event: NodeChildrenChanged[2012-11-14 15:18:56] Server count:3[2012-11-14 15:18:56] &#x53;&#101;&#114;&#118;&#101;&#x72;&#x43;&#64;&#x31;&#46;&#x31;&#x2e;&#x31;&#46;&#51;, mod&#x3D;2,base&#x3D;15[2012-11-14 15:18:56] &#x43;&#108;&#105;&#x65;&#110;&#116;&#x54;&#104;&#114;&#101;&#x61;&#100;&#95;&#x53;&#101;&#x72;&#x76;&#101;&#114;&#67;&#64;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#51;&#45;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#48;:10&#x2F;15[2012-11-14 15:18:56] &#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#x65;&#x61;&#100;&#x5f;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#x43;&#64;&#49;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#51;&#45;&#x74;&#104;&#114;&#x65;&#97;&#100;&#x5f;&#x31;:11&#x2F;15[2012-11-14 15:18:56] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#x54;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#x53;&#101;&#114;&#118;&#101;&#114;&#x43;&#64;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#x33;&#45;&#116;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#x32;:12&#x2F;15[2012-11-14 15:18:56] &#67;&#108;&#x69;&#101;&#110;&#x74;&#84;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#83;&#x65;&#114;&#118;&#101;&#x72;&#x43;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#46;&#51;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#x33;:13&#x2F;15[2012-11-14 15:18:56] &#x43;&#x6c;&#105;&#x65;&#110;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#83;&#101;&#114;&#118;&#x65;&#x72;&#67;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#x33;&#45;&#116;&#x68;&#x72;&#101;&#x61;&#100;&#x5f;&#52;:14&#x2F;15[2012-11-14 15:18:56] &#83;&#x65;&#114;&#x76;&#101;&#x72;&#x43;&#64;&#x31;&#46;&#x31;&#46;&#49;&#46;&#51;:end freshing…[2012-11-14 15:18:56] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:56] End event: NodeChildrenChanged[2012-11-14 15:18:56] &#x53;&#x65;&#114;&#x76;&#101;&#114;&#67;&#x40;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#x33;, mod&#x3D;2,base&#x3D;15[2012-11-14 15:18:56] &#x43;&#108;&#105;&#101;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#67;&#64;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#x33;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#100;&#95;&#x30;:10&#x2F;15[2012-11-14 15:18:56] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#84;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#83;&#x65;&#114;&#118;&#x65;&#x72;&#x43;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#x33;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#49;:11&#x2F;15[2012-11-14 15:18:56] &#x43;&#108;&#105;&#x65;&#110;&#x74;&#84;&#x68;&#114;&#101;&#x61;&#100;&#95;&#x53;&#101;&#114;&#118;&#101;&#x72;&#x43;&#x40;&#49;&#46;&#x31;&#46;&#49;&#x2e;&#51;&#45;&#x74;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#50;:12&#x2F;15[2012-11-14 15:18:56] &#x43;&#x6c;&#x69;&#101;&#x6e;&#116;&#x54;&#104;&#114;&#101;&#x61;&#100;&#95;&#83;&#101;&#x72;&#118;&#101;&#x72;&#x43;&#64;&#49;&#46;&#x31;&#x2e;&#49;&#x2e;&#51;&#x2d;&#x74;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#x33;:13&#x2F;15[2012-11-14 15:18:56] &#x43;&#108;&#105;&#x65;&#110;&#116;&#x54;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#83;&#x65;&#x72;&#x76;&#101;&#114;&#67;&#64;&#x31;&#46;&#49;&#x2e;&#x31;&#x2e;&#x33;&#x2d;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x34;:14&#x2F;15[2012-11-14 15:18:56] &#x53;&#101;&#114;&#118;&#101;&#114;&#67;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#x2e;&#51; finish initializing…[2012-11-14 15:18:56] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:18:56] Start &#116;&#104;&#114;&#101;&#x61;&#100;&#x2d;&#67;&#108;&#x69;&#101;&#x6e;&#116;&#x54;&#x68;&#x72;&#101;&#97;&#100;&#95;&#83;&#101;&#x72;&#x76;&#x65;&#x72;&#65;&#x40;&#49;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x31;&#45;&#x74;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#x30;[2012-11-14 15:18:56] Start &#116;&#x68;&#114;&#x65;&#97;&#100;&#x2d;&#67;&#108;&#105;&#101;&#110;&#x74;&#84;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#114;&#118;&#101;&#x72;&#x42;&#x40;&#49;&#46;&#49;&#x2e;&#x31;&#x2e;&#x32;&#x2d;&#x74;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#48;[2012-11-14 15:18:56] Start &#x74;&#x68;&#x72;&#x65;&#x61;&#100;&#x2d;&#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#101;&#97;&#x64;&#95;&#83;&#x65;&#x72;&#x76;&#x65;&#114;&#x43;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#46;&#51;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#x30;[2012-11-14 15:18:56] Start &#116;&#x68;&#114;&#x65;&#97;&#x64;&#45;&#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#84;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#118;&#x65;&#114;&#66;&#64;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#50;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#x31;[2012-11-14 15:18:56] Start &#116;&#104;&#x72;&#101;&#97;&#x64;&#x2d;&#67;&#x6c;&#105;&#x65;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#118;&#101;&#114;&#65;&#x40;&#49;&#x2e;&#49;&#x2e;&#49;&#46;&#49;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#49;[2012-11-14 15:18:56] &#67;&#108;&#105;&#x65;&#x6e;&#116;&#x54;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#x53;&#x65;&#x72;&#x76;&#x65;&#114;&#65;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x31;&#45;&#116;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#x30;&#x2d;&#48;&#x2F;15:15 30[2012-11-14 15:18:56] Start &#116;&#104;&#x72;&#x65;&#x61;&#100;&#45;&#x43;&#x6c;&#x69;&#x65;&#x6e;&#116;&#84;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#114;&#118;&#x65;&#114;&#x41;&#64;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#x31;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#100;&#95;&#x32;[2012-11-14 15:18:56] &#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#x54;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#83;&#x65;&#x72;&#118;&#101;&#x72;&#67;&#x40;&#49;&#46;&#49;&#46;&#x31;&#46;&#51;&#45;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#x30;&#x2d;&#x31;&#48;&#x2F;15:10 25[2012-11-14 15:18:56] Start &#x74;&#x68;&#114;&#x65;&#97;&#100;&#x2d;&#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#x53;&#101;&#x72;&#118;&#x65;&#114;&#65;&#64;&#x31;&#x2e;&#49;&#x2e;&#49;&#46;&#49;&#45;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#x33;[2012-11-14 15:18:56] &#67;&#x6c;&#105;&#x65;&#x6e;&#x74;&#x54;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#66;&#64;&#x31;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#x32;&#x2d;&#x74;&#104;&#x72;&#101;&#x61;&#100;&#x5f;&#48;&#45;&#x35;&#x2F;15:5 20[2012-11-14 15:18:56] Start &#x74;&#104;&#114;&#101;&#x61;&#x64;&#x2d;&#67;&#108;&#105;&#x65;&#110;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#x53;&#x65;&#114;&#x76;&#101;&#x72;&#x41;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#49;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#52;[2012-11-14 15:18:56] &#67;&#x6c;&#x69;&#101;&#110;&#x74;&#x54;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#83;&#x65;&#114;&#x76;&#101;&#114;&#65;&#64;&#49;&#46;&#49;&#46;&#x31;&#46;&#49;&#x2d;&#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#x31;&#x2d;&#x31;&#x2F;15:1 16[2012-11-14 15:18:56] &#67;&#108;&#105;&#x65;&#x6e;&#116;&#84;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#101;&#114;&#x76;&#x65;&#x72;&#x41;&#64;&#x31;&#46;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2d;&#116;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#51;&#x2d;&#51;&#x2F;15:3 18[2012-11-14 15:18:56] &#x43;&#108;&#105;&#x65;&#110;&#x74;&#x54;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x53;&#101;&#114;&#118;&#x65;&#x72;&#x41;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#49;&#45;&#116;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#x32;&#x2d;&#x32;&#x2F;15:2 17[2012-11-14 15:18:56] Start &#116;&#104;&#x72;&#x65;&#97;&#x64;&#x2d;&#x43;&#108;&#x69;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#83;&#x65;&#x72;&#118;&#101;&#114;&#x42;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#50;&#45;&#116;&#104;&#114;&#x65;&#x61;&#100;&#95;&#x32;[2012-11-14 15:18:56] &#67;&#108;&#105;&#101;&#110;&#x74;&#84;&#x68;&#114;&#101;&#97;&#x64;&#95;&#x53;&#101;&#114;&#118;&#x65;&#114;&#66;&#64;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#50;&#x2d;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#x31;&#45;&#54;&#x2F;15:6 21[2012-11-14 15:18:56] Start &#x74;&#104;&#x72;&#101;&#x61;&#x64;&#x2d;&#67;&#108;&#105;&#x65;&#110;&#116;&#84;&#104;&#114;&#x65;&#97;&#x64;&#95;&#83;&#x65;&#114;&#118;&#101;&#x72;&#x42;&#x40;&#x31;&#x2e;&#x31;&#46;&#x31;&#46;&#x32;&#45;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#x33;[2012-11-14 15:18:56] &#67;&#108;&#x69;&#x65;&#x6e;&#116;&#x54;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#114;&#118;&#101;&#x72;&#66;&#64;&#x31;&#46;&#49;&#46;&#49;&#x2e;&#x32;&#x2d;&#116;&#x68;&#x72;&#101;&#x61;&#100;&#x5f;&#50;&#x2d;&#55;&#x2F;15:7 22[2012-11-14 15:18:56] &#x43;&#x6c;&#x69;&#x65;&#110;&#116;&#x54;&#104;&#114;&#101;&#x61;&#x64;&#95;&#x53;&#101;&#x72;&#118;&#101;&#x72;&#x42;&#64;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#x32;&#45;&#116;&#x68;&#x72;&#101;&#97;&#100;&#95;&#x33;&#x2d;&#56;&#x2F;15:8 23[2012-11-14 15:18:56] Start &#x74;&#x68;&#x72;&#x65;&#97;&#100;&#x2d;&#67;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#104;&#114;&#101;&#97;&#100;&#95;&#83;&#x65;&#114;&#x76;&#x65;&#x72;&#x43;&#64;&#49;&#46;&#x31;&#46;&#49;&#x2e;&#51;&#x2d;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#x31;[2012-11-14 15:18:56] Start &#116;&#104;&#x72;&#x65;&#x61;&#100;&#45;&#x43;&#x6c;&#105;&#x65;&#110;&#x74;&#84;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#83;&#x65;&#x72;&#118;&#x65;&#x72;&#66;&#64;&#49;&#46;&#x31;&#x2e;&#49;&#46;&#50;&#45;&#116;&#104;&#x72;&#101;&#97;&#x64;&#95;&#52;[2012-11-14 15:18:56] &#67;&#x6c;&#105;&#101;&#110;&#116;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#x53;&#101;&#x72;&#118;&#x65;&#114;&#67;&#64;&#49;&#46;&#x31;&#46;&#x31;&#x2e;&#51;&#x2d;&#x74;&#104;&#114;&#x65;&#97;&#x64;&#x5f;&#49;&#x2d;&#x31;&#x31;&#x2F;15:11 26[2012-11-14 15:18:56] &#67;&#108;&#x69;&#x65;&#110;&#x74;&#84;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#x53;&#x65;&#x72;&#x76;&#101;&#x72;&#65;&#x40;&#x31;&#46;&#49;&#x2e;&#x31;&#46;&#x31;&#45;&#x74;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#52;&#45;&#52;&#x2F;15:4 19[2012-11-14 15:18:56] Start &#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#45;&#x43;&#108;&#105;&#101;&#x6e;&#x74;&#x54;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#x65;&#114;&#118;&#101;&#x72;&#x43;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#51;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#x32;[2012-11-14 15:18:56] &#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#84;&#104;&#114;&#x65;&#x61;&#100;&#95;&#83;&#x65;&#114;&#x76;&#x65;&#114;&#66;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#x2e;&#50;&#x2d;&#x74;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#52;&#x2d;&#x39;&#x2F;15:9 24[2012-11-14 15:18:56] Start &#x74;&#104;&#x72;&#101;&#97;&#100;&#45;&#67;&#108;&#105;&#101;&#x6e;&#116;&#x54;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#118;&#101;&#x72;&#x43;&#x40;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#x33;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#51;[2012-11-14 15:18:56] &#67;&#108;&#x69;&#101;&#110;&#116;&#84;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#x43;&#64;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#51;&#45;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#x32;&#x2d;&#x31;&#x32;&#x2F;15:12 27[2012-11-14 15:18:56] Start &#116;&#104;&#114;&#101;&#97;&#100;&#x2d;&#x43;&#108;&#x69;&#x65;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#x61;&#x64;&#95;&#x53;&#101;&#114;&#x76;&#101;&#114;&#x43;&#64;&#x31;&#46;&#x31;&#x2e;&#49;&#46;&#51;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#x34;[2012-11-14 15:18:56] &#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#101;&#114;&#x76;&#x65;&#x72;&#x43;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#x33;&#45;&#116;&#x68;&#x72;&#101;&#x61;&#100;&#x5f;&#51;&#x2d;&#x31;&#x33;&#x2F;15:13 28[2012-11-14 15:18:56] &#x43;&#x6c;&#x69;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#114;&#118;&#x65;&#114;&#x43;&#64;&#x31;&#x2e;&#49;&#46;&#49;&#x2e;&#x33;&#x2d;&#x74;&#104;&#114;&#101;&#97;&#100;&#95;&#x34;&#x2d;&#49;&#52;&#x2F;15:14 29[2012-11-14 15:19:01] &#67;&#108;&#x69;&#101;&#110;&#116;&#84;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#x72;&#118;&#101;&#x72;&#x42;&#x40;&#x31;&#x2e;&#49;&#x2e;&#49;&#46;&#50;&#x2d;&#x74;&#104;&#114;&#101;&#x61;&#100;&#95;&#48;&#45;&#53;&#x2F;15:5 20[2012-11-14 15:19:01] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#x54;&#104;&#x72;&#101;&#97;&#100;&#95;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#65;&#64;&#x31;&#46;&#49;&#46;&#x31;&#x2e;&#49;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#x64;&#95;&#51;&#x2d;&#51;&#x2F;15:3 18[2012-11-14 15:19:01] &#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#x53;&#101;&#114;&#x76;&#x65;&#114;&#65;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#46;&#49;&#x2d;&#116;&#104;&#114;&#x65;&#97;&#100;&#x5f;&#48;&#x2d;&#48;&#x2F;15:15 30[2012-11-14 15:19:01] &#x43;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#x76;&#x65;&#x72;&#x42;&#64;&#x31;&#46;&#49;&#x2e;&#x31;&#x2e;&#50;&#45;&#x74;&#x68;&#x72;&#101;&#97;&#x64;&#x5f;&#x31;&#45;&#x36;&#x2F;15:6 21[2012-11-14 15:19:01] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#x54;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#83;&#x65;&#114;&#x76;&#x65;&#x72;&#65;&#x40;&#49;&#x2e;&#49;&#x2e;&#49;&#46;&#49;&#x2d;&#x74;&#104;&#x72;&#101;&#x61;&#100;&#95;&#49;&#45;&#49;&#x2F;15:1 16[2012-11-14 15:19:01] &#67;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#104;&#114;&#x65;&#x61;&#100;&#x5f;&#x53;&#x65;&#114;&#118;&#x65;&#x72;&#x43;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#x33;&#45;&#116;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#x30;&#45;&#x31;&#x30;&#x2F;15:10 25[2012-11-14 15:19:01] &#67;&#108;&#x69;&#101;&#x6e;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#95;&#83;&#x65;&#x72;&#118;&#x65;&#114;&#65;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#49;&#45;&#116;&#x68;&#114;&#x65;&#x61;&#100;&#95;&#50;&#45;&#x32;&#x2F;15:2 17[2012-11-14 15:19:01] &#67;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#x72;&#118;&#x65;&#114;&#x42;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#50;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#50;&#45;&#55;&#x2F;15:7 22[2012-11-14 15:19:01] &#x43;&#108;&#x69;&#x65;&#110;&#116;&#84;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#83;&#101;&#114;&#x76;&#x65;&#114;&#67;&#64;&#x31;&#46;&#x31;&#x2e;&#x31;&#x2e;&#x33;&#45;&#116;&#x68;&#x72;&#x65;&#x61;&#x64;&#95;&#x31;&#45;&#x31;&#49;&#x2F;15:11 26[2012-11-14 15:19:01] &#67;&#108;&#105;&#x65;&#x6e;&#x74;&#84;&#x68;&#114;&#101;&#x61;&#x64;&#95;&#x53;&#101;&#x72;&#x76;&#x65;&#x72;&#66;&#64;&#x31;&#x2e;&#49;&#x2e;&#49;&#46;&#x32;&#x2d;&#x74;&#x68;&#114;&#101;&#97;&#100;&#95;&#x33;&#x2d;&#56;&#x2F;15:8 23[2012-11-14 15:19:01] &#x43;&#x6c;&#x69;&#101;&#110;&#116;&#84;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#x76;&#x65;&#114;&#65;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#x2e;&#49;&#45;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#x34;&#x2d;&#x34;&#x2F;15:4 19[2012-11-14 15:19:01] &#x43;&#x6c;&#105;&#x65;&#110;&#116;&#x54;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#x53;&#x65;&#114;&#x76;&#x65;&#114;&#67;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#51;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#50;&#45;&#49;&#x32;&#x2F;15:12 27[2012-11-14 15:19:01] &#x43;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#104;&#114;&#101;&#97;&#100;&#x5f;&#x53;&#101;&#114;&#x76;&#101;&#x72;&#66;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#46;&#x32;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#x34;&#x2d;&#57;&#x2F;15:9 24[2012-11-14 15:19:01] &#67;&#108;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#83;&#x65;&#x72;&#118;&#101;&#x72;&#67;&#64;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#x33;&#x2d;&#116;&#104;&#x72;&#101;&#x61;&#100;&#95;&#x33;&#45;&#x31;&#x33;&#x2F;15:13 28[2012-11-14 15:19:01] &#x43;&#x6c;&#105;&#x65;&#x6e;&#x74;&#84;&#104;&#114;&#101;&#x61;&#x64;&#95;&#83;&#101;&#114;&#118;&#101;&#114;&#x43;&#x40;&#x31;&#x2e;&#49;&#46;&#49;&#46;&#x33;&#x2d;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#52;&#x2d;&#x31;&#x34;&#x2F;15:14 29[2012-11-14 15:19:02] Thread-0 get an event.Path:&#x2F;demo&#x2F;1.1.1.1,state:SyncConnected,type:NodeDeleted[2012-11-14 15:19:02] In event: NodeDeleted[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] &#83;&#x65;&#x72;&#118;&#x65;&#114;&#x41;&#x40;&#49;&#46;&#49;&#46;&#49;&#46;&#49;:freshing…[2012-11-14 15:19:02] Thread-12 get an event.Path:&#x2F;demo&#x2F;1.1.1.1,state:SyncConnected,type:NodeDeleted[2012-11-14 15:19:02] In event: NodeDeleted[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] &#83;&#x65;&#x72;&#x76;&#101;&#x72;&#x43;&#x40;&#x31;&#46;&#x31;&#46;&#x31;&#x2e;&#51;:freshing…[2012-11-14 15:19:02] Thread-6 get an event.Path:&#x2F;demo&#x2F;1.1.1.1,state:SyncConnected,type:NodeDeleted[2012-11-14 15:19:02] In event: NodeDeleted[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] &#83;&#101;&#114;&#118;&#x65;&#x72;&#66;&#64;&#x31;&#x2e;&#49;&#46;&#49;&#46;&#50;:freshing…[2012-11-14 15:19:02] SYSTEM VERSION: 1[2012-11-14 15:19:02] SYSTEM VERSION: 1[2012-11-14 15:19:02] SYSTEM VERSION: 1[2012-11-14 15:19:02] Server count:2[2012-11-14 15:19:02] Server count:2Did not get the mod number for &#x53;&#101;&#x72;&#118;&#101;&#x72;&#x41;&#x40;&#49;&#x2e;&#49;&#46;&#49;&#46;&#49;[2012-11-14 15:19:02] &#83;&#x65;&#x72;&#x76;&#101;&#114;&#65;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#49;:end freshing…[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] End event: NodeDeleted[2012-11-14 15:19:02] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:02] In event: NodeChildrenChanged[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] &#x53;&#101;&#114;&#x76;&#x65;&#x72;&#x41;&#64;&#49;&#46;&#49;&#x2e;&#49;&#x2e;&#49;:freshing…[2012-11-14 15:19:02] Server count:2[2012-11-14 15:19:02] &#x53;&#x65;&#114;&#x76;&#x65;&#x72;&#67;&#64;&#49;&#46;&#49;&#x2e;&#49;&#46;&#x33;, mod&#x3D;2,base&#x3D;10[2012-11-14 15:19:02] &#67;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#x53;&#x65;&#114;&#x76;&#x65;&#114;&#x43;&#x40;&#x31;&#x2e;&#49;&#x2e;&#49;&#x2e;&#x33;&#45;&#116;&#104;&#x72;&#x65;&#97;&#100;&#95;&#48;:10&#x2F;10[2012-11-14 15:19:02] &#x43;&#x6c;&#105;&#101;&#110;&#116;&#x54;&#x68;&#114;&#101;&#97;&#x64;&#95;&#83;&#x65;&#114;&#x76;&#101;&#114;&#67;&#64;&#49;&#x2e;&#49;&#46;&#x31;&#46;&#x33;&#x2d;&#116;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#x31;:11&#x2F;10[2012-11-14 15:19:02] &#67;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#104;&#114;&#x65;&#97;&#x64;&#x5f;&#83;&#101;&#114;&#x76;&#101;&#114;&#x43;&#64;&#x31;&#x2e;&#49;&#46;&#49;&#x2e;&#x33;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#x32;:12&#x2F;10[2012-11-14 15:19:02] &#x43;&#x6c;&#x69;&#101;&#x6e;&#116;&#x54;&#104;&#114;&#101;&#97;&#x64;&#95;&#x53;&#x65;&#x72;&#x76;&#x65;&#114;&#67;&#64;&#x31;&#46;&#49;&#46;&#49;&#x2e;&#x33;&#x2d;&#116;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#51;:13&#x2F;10[2012-11-14 15:19:02] &#x43;&#x6c;&#x69;&#101;&#x6e;&#x74;&#x54;&#x68;&#114;&#101;&#97;&#100;&#95;&#83;&#x65;&#114;&#118;&#x65;&#114;&#x43;&#x40;&#x31;&#46;&#x31;&#x2e;&#x31;&#46;&#x33;&#45;&#x74;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#52;:14&#x2F;10[2012-11-14 15:19:02] &#x53;&#101;&#x72;&#118;&#x65;&#114;&#x43;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#46;&#x33;:end freshing…[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] End event: NodeDeleted[2012-11-14 15:19:02] Thread-12 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:02] In event: NodeChildrenChanged[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] &#83;&#x65;&#114;&#x76;&#x65;&#114;&#x43;&#64;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#51;:freshing…[2012-11-14 15:19:02] &#83;&#x65;&#x72;&#x76;&#101;&#x72;&#66;&#64;&#49;&#x2e;&#49;&#x2e;&#49;&#46;&#x32;, mod&#x3D;1,base&#x3D;10[2012-11-14 15:19:02] SYSTEM VERSION: 1[2012-11-14 15:19:02] &#67;&#108;&#105;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#x53;&#x65;&#x72;&#118;&#101;&#114;&#x42;&#x40;&#49;&#x2e;&#49;&#46;&#x31;&#46;&#x32;&#x2d;&#116;&#104;&#114;&#x65;&#97;&#x64;&#95;&#48;:5&#x2F;10[2012-11-14 15:19:02] &#x43;&#x6c;&#105;&#x65;&#x6e;&#x74;&#84;&#x68;&#x72;&#101;&#97;&#x64;&#x5f;&#x53;&#101;&#x72;&#x76;&#x65;&#114;&#66;&#x40;&#49;&#x2e;&#x31;&#x2e;&#49;&#46;&#x32;&#x2d;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#95;&#x31;:6&#x2F;10[2012-11-14 15:19:02] &#67;&#108;&#x69;&#101;&#x6e;&#x74;&#84;&#104;&#114;&#x65;&#97;&#100;&#95;&#83;&#x65;&#114;&#x76;&#101;&#x72;&#x42;&#64;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#50;&#45;&#x74;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#x32;:7&#x2F;10[2012-11-14 15:19:02] &#67;&#108;&#x69;&#101;&#110;&#x74;&#84;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#x53;&#x65;&#114;&#118;&#101;&#x72;&#66;&#64;&#x31;&#46;&#x31;&#x2e;&#x31;&#46;&#50;&#x2d;&#x74;&#104;&#114;&#101;&#97;&#x64;&#95;&#x33;:8&#x2F;10[2012-11-14 15:19:02] &#x43;&#108;&#x69;&#x65;&#x6e;&#116;&#x54;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#114;&#66;&#x40;&#x31;&#46;&#49;&#46;&#49;&#46;&#50;&#45;&#x74;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#x34;:9&#x2F;10[2012-11-14 15:19:02] &#x53;&#101;&#114;&#118;&#101;&#114;&#66;&#x40;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#50;:end freshing…[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] End event: NodeDeleted[2012-11-14 15:19:02] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:02] In event: NodeChildrenChanged[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] &#x53;&#x65;&#114;&#118;&#101;&#114;&#66;&#x40;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#x32;:freshing…[2012-11-14 15:19:02] SYSTEM VERSION: 1[2012-11-14 15:19:02] Server count:2[2012-11-14 15:19:02] &#x53;&#x65;&#114;&#x76;&#x65;&#114;&#65;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#46;&#49;:end freshing…[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] End event: NodeChildrenChangedDid not get the mod number for &#x53;&#x65;&#x72;&#118;&#101;&#114;&#65;&#x40;&#49;&#46;&#49;&#x2e;&#x31;&#46;&#49;[2012-11-14 15:19:02] SYSTEM VERSION: 1[2012-11-14 15:19:02] Server count:2[2012-11-14 15:19:02] Server count:2[2012-11-14 15:19:02] &#x53;&#101;&#114;&#118;&#x65;&#x72;&#x43;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#51;, mod&#x3D;2,base&#x3D;10[2012-11-14 15:19:02] &#67;&#x6c;&#x69;&#101;&#110;&#x74;&#84;&#104;&#114;&#x65;&#97;&#x64;&#x5f;&#83;&#101;&#x72;&#118;&#x65;&#x72;&#x43;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#x33;&#45;&#116;&#104;&#114;&#101;&#97;&#x64;&#95;&#48;:10&#x2F;10[2012-11-14 15:19:02] &#67;&#x6c;&#105;&#x65;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#97;&#100;&#95;&#x53;&#101;&#x72;&#118;&#x65;&#114;&#x43;&#64;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#x33;&#45;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#49;:11&#x2F;10[2012-11-14 15:19:02] &#67;&#x6c;&#105;&#x65;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#x61;&#x64;&#95;&#x53;&#101;&#x72;&#118;&#x65;&#x72;&#67;&#64;&#49;&#46;&#49;&#x2e;&#x31;&#46;&#51;&#x2d;&#116;&#104;&#114;&#101;&#x61;&#x64;&#95;&#50;:12&#x2F;10[2012-11-14 15:19:02] &#67;&#x6c;&#x69;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#67;&#x40;&#x31;&#46;&#49;&#46;&#x31;&#46;&#x33;&#x2d;&#x74;&#x68;&#114;&#x65;&#x61;&#100;&#95;&#51;:13&#x2F;10[2012-11-14 15:19:02] &#83;&#x65;&#114;&#x76;&#101;&#x72;&#66;&#64;&#x31;&#46;&#x31;&#46;&#x31;&#x2e;&#50;, mod&#x3D;1,base&#x3D;10[2012-11-14 15:19:02] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#x54;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#83;&#x65;&#114;&#118;&#101;&#x72;&#67;&#64;&#49;&#46;&#x31;&#x2e;&#49;&#x2e;&#x33;&#45;&#x74;&#104;&#114;&#x65;&#x61;&#x64;&#95;&#x34;:14&#x2F;10[2012-11-14 15:19:02] &#67;&#x6c;&#105;&#x65;&#x6e;&#x74;&#84;&#104;&#114;&#101;&#97;&#x64;&#95;&#83;&#x65;&#x72;&#118;&#101;&#x72;&#x42;&#64;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#50;&#45;&#116;&#104;&#x72;&#101;&#97;&#100;&#95;&#48;:5&#x2F;10[2012-11-14 15:19:02] &#83;&#101;&#x72;&#x76;&#101;&#x72;&#x43;&#64;&#49;&#46;&#49;&#46;&#x31;&#x2e;&#x33;:end freshing…[2012-11-14 15:19:02] &#67;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#x68;&#x72;&#101;&#97;&#100;&#95;&#x53;&#101;&#x72;&#118;&#x65;&#x72;&#66;&#64;&#x31;&#46;&#49;&#46;&#x31;&#x2e;&#50;&#45;&#x74;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#49;:6&#x2F;10[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] End event: NodeChildrenChanged[2012-11-14 15:19:02] &#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#x65;&#x61;&#100;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#114;&#x42;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#46;&#x32;&#45;&#x74;&#104;&#114;&#x65;&#97;&#x64;&#95;&#x32;:7&#x2F;10[2012-11-14 15:19:02] &#67;&#108;&#105;&#x65;&#110;&#116;&#x54;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#83;&#101;&#114;&#x76;&#x65;&#x72;&#x42;&#64;&#x31;&#x2e;&#49;&#x2e;&#49;&#x2e;&#x32;&#45;&#116;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#51;:8&#x2F;10[2012-11-14 15:19:02] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#84;&#104;&#114;&#101;&#x61;&#100;&#95;&#83;&#101;&#x72;&#x76;&#101;&#x72;&#66;&#64;&#49;&#x2e;&#49;&#46;&#49;&#46;&#50;&#x2d;&#116;&#104;&#114;&#x65;&#x61;&#100;&#95;&#x34;:9&#x2F;10[2012-11-14 15:19:02] &#83;&#101;&#x72;&#x76;&#x65;&#x72;&#x42;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#x2e;&#50;:end freshing…[2012-11-14 15:19:02] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:02] End event: NodeChildrenChanged[2012-11-14 15:19:06] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#x53;&#x65;&#x72;&#x76;&#x65;&#114;&#x41;&#x40;&#x31;&#46;&#49;&#46;&#49;&#46;&#49;&#x2d;&#116;&#104;&#114;&#x65;&#x61;&#100;&#95;&#49;&#x2d;&#x31;&#x2F;10:1 11 21[2012-11-14 15:19:06] &#67;&#x6c;&#x69;&#101;&#x6e;&#116;&#84;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#83;&#x65;&#114;&#118;&#x65;&#x72;&#x42;&#64;&#x31;&#46;&#x31;&#46;&#49;&#46;&#50;&#45;&#x74;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#x31;&#45;&#x36;&#x2F;10:6 16 26[2012-11-14 15:19:06] &#67;&#108;&#105;&#x65;&#110;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#x53;&#x65;&#x72;&#118;&#101;&#x72;&#x42;&#x40;&#49;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x32;&#x2d;&#x74;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#48;&#45;&#53;&#x2F;10:5 15 25[2012-11-14 15:19:06] &#x43;&#108;&#105;&#101;&#110;&#x74;&#84;&#x68;&#114;&#101;&#97;&#100;&#95;&#83;&#101;&#x72;&#x76;&#101;&#114;&#x41;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#x31;&#45;&#116;&#104;&#x72;&#x65;&#97;&#100;&#95;&#x32;&#45;&#50;&#x2F;10:2 12 22[2012-11-14 15:19:06] &#67;&#x6c;&#x69;&#x65;&#x6e;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#101;&#x72;&#x76;&#101;&#x72;&#x43;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#x2e;&#51;&#45;&#116;&#104;&#x72;&#101;&#97;&#x64;&#95;&#x30;&#45;&#49;&#x30;&#x2F;10:[2012-11-14 15:19:06] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#x65;&#x72;&#118;&#x65;&#x72;&#65;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#46;&#x31;&#45;&#x74;&#104;&#114;&#101;&#97;&#100;&#95;&#x33;&#45;&#51;&#x2F;10:3 13 23[2012-11-14 15:19:06] &#67;&#x6c;&#x69;&#101;&#110;&#116;&#x54;&#104;&#x72;&#x65;&#x61;&#100;&#x5f;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#65;&#64;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#x31;&#x2d;&#x74;&#104;&#114;&#101;&#97;&#100;&#95;&#x30;&#45;&#x30;&#x2F;10:10 20 30[2012-11-14 15:19:06] &#67;&#108;&#105;&#101;&#x6e;&#116;&#x54;&#104;&#x72;&#x65;&#x61;&#100;&#x5f;&#x53;&#x65;&#114;&#x76;&#101;&#x72;&#65;&#x40;&#49;&#46;&#x31;&#x2e;&#x31;&#46;&#x31;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#100;&#95;&#52;&#x2d;&#52;&#x2F;10:4 14 24[2012-11-14 15:19:06] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#x68;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#101;&#x72;&#118;&#101;&#x72;&#66;&#x40;&#49;&#x2e;&#x31;&#x2e;&#x31;&#46;&#50;&#45;&#x74;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#50;&#45;&#x37;&#x2F;10:7 17 27[2012-11-14 15:19:06] &#x43;&#x6c;&#105;&#x65;&#x6e;&#116;&#x54;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#118;&#101;&#x72;&#66;&#64;&#x31;&#46;&#49;&#x2e;&#49;&#46;&#50;&#45;&#x74;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#x33;&#45;&#x38;&#x2F;10:8 18 28[2012-11-14 15:19:06] &#67;&#x6c;&#105;&#x65;&#x6e;&#116;&#84;&#x68;&#114;&#x65;&#97;&#x64;&#x5f;&#83;&#101;&#x72;&#x76;&#101;&#114;&#67;&#64;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#51;&#x2d;&#116;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#49;&#45;&#49;&#49;&#x2F;10:[2012-11-14 15:19:06] &#x43;&#108;&#105;&#x65;&#x6e;&#x74;&#x54;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#x53;&#101;&#114;&#x76;&#x65;&#x72;&#67;&#x40;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#51;&#45;&#116;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#x32;&#45;&#x31;&#50;&#x2F;10:[2012-11-14 15:19:06] &#67;&#x6c;&#105;&#101;&#110;&#116;&#84;&#104;&#114;&#x65;&#97;&#x64;&#95;&#x53;&#101;&#114;&#118;&#x65;&#x72;&#66;&#64;&#49;&#x2e;&#49;&#46;&#49;&#46;&#50;&#45;&#x74;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#x34;&#45;&#57;&#x2F;10:9 19 29[2012-11-14 15:19:06] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#84;&#104;&#114;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#114;&#118;&#101;&#x72;&#x43;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x33;&#x2d;&#116;&#x68;&#114;&#101;&#97;&#x64;&#95;&#x33;&#45;&#x31;&#x33;&#x2F;10:[2012-11-14 15:19:06] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#x43;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#51;&#x2d;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#52;&#x2d;&#49;&#x34;&#x2F;10:[2012-11-14 15:19:07] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:07] In event: NodeChildrenChanged[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] &#83;&#101;&#114;&#x76;&#x65;&#114;&#x41;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#46;&#49;:freshing…[2012-11-14 15:19:07] Thread-12 get an event.Path:&#x2F;demo&#x2F;1.1.1.2,state:SyncConnected,type:NodeDeleted[2012-11-14 15:19:07] In event: NodeDeleted[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] &#x53;&#x65;&#114;&#118;&#x65;&#x72;&#x43;&#x40;&#49;&#46;&#49;&#46;&#49;&#46;&#x33;:freshing…[2012-11-14 15:19:07] Thread-6 get an event.Path:&#x2F;demo&#x2F;1.1.1.2,state:SyncConnected,type:NodeDeleted[2012-11-14 15:19:07] In event: NodeDeleted[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] &#x53;&#101;&#x72;&#118;&#x65;&#x72;&#x42;&#64;&#49;&#x2e;&#x31;&#46;&#49;&#46;&#50;:freshing…[2012-11-14 15:19:07] SYSTEM VERSION: 1Did not get the mod number for &#83;&#101;&#114;&#118;&#x65;&#114;&#x41;&#x40;&#x31;&#46;&#x31;&#46;&#x31;&#x2e;&#x31;[2012-11-14 15:19:07] Server count:1[2012-11-14 15:19:07] &#83;&#101;&#114;&#x76;&#x65;&#x72;&#x41;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#46;&#49;:end freshing…[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] End event: NodeChildrenChanged[2012-11-14 15:19:07] SYSTEM VERSION: 1[2012-11-14 15:19:07] SYSTEM VERSION: 1[2012-11-14 15:19:07] Server count:1[2012-11-14 15:19:07] Server count:1[2012-11-14 15:19:07] &#83;&#101;&#x72;&#118;&#x65;&#x72;&#66;&#64;&#49;&#46;&#x31;&#x2e;&#49;&#x2e;&#50;:end freshing…[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] End event: NodeDeleted[2012-11-14 15:19:07] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:07] In event: NodeChildrenChanged[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] &#83;&#x65;&#x72;&#118;&#101;&#114;&#66;&#64;&#49;&#46;&#49;&#46;&#49;&#x2e;&#x32;:freshing…Did not get the mod number for &#83;&#101;&#114;&#118;&#x65;&#114;&#x42;&#x40;&#x31;&#x2e;&#49;&#46;&#49;&#46;&#x32;[2012-11-14 15:19:07] &#x53;&#x65;&#x72;&#118;&#101;&#114;&#x43;&#64;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#51;, mod&#x3D;2,base&#x3D;5[2012-11-14 15:19:07] &#x43;&#108;&#x69;&#101;&#110;&#x74;&#84;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#x72;&#x76;&#x65;&#x72;&#x43;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#46;&#51;&#x2d;&#x74;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#x30;:10&#x2F;5[2012-11-14 15:19:07] &#67;&#x6c;&#105;&#x65;&#110;&#x74;&#x54;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#83;&#101;&#114;&#x76;&#x65;&#114;&#x43;&#64;&#49;&#46;&#49;&#x2e;&#x31;&#46;&#x33;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#x31;:11&#x2F;5[2012-11-14 15:19:07] &#x43;&#108;&#105;&#x65;&#x6e;&#116;&#x54;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#118;&#x65;&#x72;&#x43;&#x40;&#49;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x33;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#x32;:12&#x2F;5[2012-11-14 15:19:07] &#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#83;&#101;&#x72;&#118;&#x65;&#x72;&#67;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#46;&#x33;&#45;&#116;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#x33;:13&#x2F;5[2012-11-14 15:19:07] &#67;&#108;&#105;&#x65;&#110;&#116;&#84;&#104;&#x72;&#101;&#x61;&#100;&#x5f;&#83;&#101;&#114;&#118;&#x65;&#114;&#x43;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#46;&#51;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#x34;:14&#x2F;5[2012-11-14 15:19:07] &#x53;&#x65;&#114;&#x76;&#x65;&#114;&#x43;&#64;&#49;&#46;&#49;&#46;&#49;&#46;&#x33;:end freshing…[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] End event: NodeDeleted[2012-11-14 15:19:07] Thread-12 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:07] In event: NodeChildrenChanged[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] &#x53;&#101;&#x72;&#118;&#x65;&#114;&#67;&#64;&#x31;&#46;&#49;&#46;&#49;&#46;&#x33;:freshing…[2012-11-14 15:19:07] SYSTEM VERSION: 1Did not get the mod number for &#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#66;&#64;&#49;&#46;&#49;&#x2e;&#49;&#x2e;&#x32;[2012-11-14 15:19:07] Server count:1[2012-11-14 15:19:07] &#x53;&#101;&#114;&#x76;&#101;&#x72;&#x42;&#x40;&#49;&#46;&#49;&#46;&#x31;&#46;&#x32;:end freshing…[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] End event: NodeChildrenChanged[2012-11-14 15:19:07] SYSTEM VERSION: 1[2012-11-14 15:19:07] Server count:1[2012-11-14 15:19:07] &#x53;&#x65;&#x72;&#x76;&#101;&#114;&#67;&#x40;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#x33;, mod&#x3D;2,base&#x3D;5[2012-11-14 15:19:07] &#67;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x54;&#x68;&#114;&#101;&#97;&#100;&#95;&#83;&#x65;&#x72;&#118;&#101;&#x72;&#67;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#x33;&#45;&#x74;&#x68;&#114;&#101;&#x61;&#x64;&#95;&#48;:10&#x2F;5[2012-11-14 15:19:07] &#67;&#x6c;&#x69;&#101;&#110;&#x74;&#x54;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#83;&#x65;&#114;&#118;&#101;&#114;&#x43;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#46;&#x33;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x31;:11&#x2F;5[2012-11-14 15:19:07] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#116;&#84;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#x53;&#101;&#114;&#x76;&#x65;&#114;&#67;&#64;&#49;&#46;&#x31;&#46;&#x31;&#x2e;&#51;&#x2d;&#116;&#x68;&#114;&#101;&#x61;&#100;&#95;&#x32;:12&#x2F;5[2012-11-14 15:19:07] &#x43;&#108;&#105;&#101;&#110;&#116;&#x54;&#104;&#114;&#101;&#97;&#100;&#95;&#83;&#101;&#114;&#x76;&#x65;&#x72;&#67;&#x40;&#49;&#x2e;&#49;&#46;&#49;&#46;&#x33;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#x33;:13&#x2F;5[2012-11-14 15:19:07] &#67;&#x6c;&#x69;&#x65;&#110;&#116;&#x54;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#x72;&#x43;&#64;&#x31;&#46;&#49;&#46;&#x31;&#46;&#51;&#45;&#116;&#104;&#114;&#x65;&#x61;&#100;&#95;&#52;:14&#x2F;5[2012-11-14 15:19:07] &#83;&#101;&#x72;&#x76;&#101;&#114;&#67;&#64;&#49;&#x2e;&#49;&#46;&#x31;&#x2e;&#51;:end freshing…[2012-11-14 15:19:07] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:07] End event: NodeChildrenChanged[2012-11-14 15:19:11] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#83;&#x65;&#x72;&#118;&#x65;&#x72;&#x42;&#x40;&#49;&#46;&#x31;&#x2e;&#49;&#x2e;&#x32;&#45;&#x74;&#104;&#114;&#101;&#97;&#100;&#x5f;&#x31;&#x2d;&#54;&#x2F;5:[2012-11-14 15:19:11] &#x43;&#108;&#105;&#x65;&#x6e;&#x74;&#84;&#104;&#114;&#x65;&#97;&#x64;&#95;&#83;&#101;&#x72;&#118;&#x65;&#114;&#65;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#x2e;&#x31;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x30;&#x2d;&#x30;&#x2F;5:5 10 15 20 25 30[2012-11-14 15:19:11] &#x43;&#108;&#x69;&#101;&#110;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#83;&#101;&#x72;&#x76;&#x65;&#x72;&#x43;&#x40;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#x33;&#45;&#116;&#104;&#114;&#x65;&#x61;&#x64;&#95;&#48;&#x2d;&#49;&#x30;&#x2F;5:[2012-11-14 15:19:11] &#67;&#x6c;&#105;&#x65;&#110;&#116;&#84;&#x68;&#x72;&#101;&#97;&#100;&#95;&#x53;&#101;&#x72;&#x76;&#101;&#x72;&#x41;&#64;&#49;&#46;&#49;&#x2e;&#x31;&#x2e;&#49;&#45;&#x74;&#x68;&#114;&#101;&#97;&#x64;&#95;&#x31;&#x2d;&#x31;&#x2F;5:1 6 11 16 21 26[2012-11-14 15:19:11] &#x43;&#108;&#105;&#101;&#110;&#x74;&#x54;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#118;&#101;&#x72;&#65;&#x40;&#49;&#46;&#x31;&#x2e;&#x31;&#x2e;&#49;&#45;&#116;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#51;&#x2d;&#51;&#x2F;5:3 8 13 18 23 28[2012-11-14 15:19:11] &#67;&#108;&#x69;&#101;&#110;&#116;&#84;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#83;&#101;&#x72;&#x76;&#101;&#x72;&#x42;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#46;&#50;&#x2d;&#x74;&#104;&#x72;&#x65;&#97;&#100;&#95;&#48;&#x2d;&#53;&#x2F;5:[2012-11-14 15:19:11] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#104;&#114;&#101;&#97;&#100;&#95;&#83;&#x65;&#x72;&#118;&#x65;&#114;&#65;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#46;&#49;&#x2d;&#x74;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#50;&#45;&#50;&#x2F;5:2 7 12 17 22 27[2012-11-14 15:19:11] &#x43;&#108;&#105;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#x72;&#67;&#x40;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#51;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#49;&#45;&#49;&#49;&#x2F;5:[2012-11-14 15:19:11] &#67;&#108;&#105;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#x76;&#x65;&#x72;&#x42;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#46;&#50;&#45;&#116;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#51;&#x2d;&#x38;&#x2F;5:[2012-11-14 15:19:11] &#67;&#x6c;&#x69;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#101;&#97;&#100;&#95;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#66;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#46;&#50;&#x2d;&#x74;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#50;&#45;&#x37;&#x2F;5:[2012-11-14 15:19:11] &#67;&#108;&#x69;&#101;&#110;&#x74;&#84;&#104;&#114;&#x65;&#x61;&#100;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#x72;&#65;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x31;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#x34;&#45;&#52;&#x2F;5:4 9 14 19 24 29[2012-11-14 15:19:11] &#67;&#108;&#105;&#101;&#110;&#116;&#x54;&#104;&#x72;&#x65;&#97;&#100;&#95;&#83;&#x65;&#x72;&#x76;&#x65;&#114;&#66;&#64;&#49;&#x2e;&#49;&#46;&#x31;&#x2e;&#50;&#45;&#116;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#52;&#x2d;&#x39;&#x2F;5:[2012-11-14 15:19:11] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#x65;&#114;&#x76;&#101;&#x72;&#x43;&#x40;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#x33;&#x2d;&#116;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#50;&#x2d;&#49;&#50;&#x2F;5:[2012-11-14 15:19:11] &#67;&#108;&#105;&#101;&#110;&#116;&#x54;&#x68;&#x72;&#101;&#97;&#x64;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#x72;&#x43;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#51;&#45;&#116;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x34;&#x2d;&#49;&#52;&#x2F;5:[2012-11-14 15:19:11] &#x43;&#x6c;&#105;&#x65;&#110;&#116;&#x54;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#x65;&#x72;&#118;&#x65;&#114;&#x43;&#64;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#x33;&#45;&#116;&#x68;&#114;&#101;&#97;&#100;&#95;&#x33;&#x2d;&#x31;&#x33;&#x2F;5:[2012-11-14 15:19:12] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:12] In event: NodeChildrenChanged[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] &#x53;&#101;&#x72;&#x76;&#101;&#114;&#65;&#64;&#49;&#46;&#49;&#x2e;&#49;&#x2e;&#x31;:freshing…[2012-11-14 15:19:12] Thread-12 get an event.Path:&#x2F;demo&#x2F;1.1.1.3,state:SyncConnected,type:NodeDeleted[2012-11-14 15:19:12] In event: NodeDeleted[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] &#83;&#101;&#x72;&#118;&#x65;&#114;&#x43;&#x40;&#49;&#46;&#49;&#46;&#x31;&#46;&#51;:freshing…[2012-11-14 15:19:12] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:12] In event: NodeChildrenChanged[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] &#83;&#101;&#x72;&#x76;&#101;&#x72;&#x42;&#64;&#49;&#46;&#x31;&#46;&#x31;&#46;&#50;:freshing…[2012-11-14 15:19:12] SYSTEM VERSION: 1[2012-11-14 15:19:12] SYSTEM VERSION: 1[2012-11-14 15:19:12] Server count:0[2012-11-14 15:19:12] &#83;&#x65;&#x72;&#118;&#x65;&#114;&#x42;&#64;&#49;&#46;&#x31;&#x2e;&#49;&#x2e;&#x32;:end freshing…[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] End event: NodeChildrenChanged[2012-11-14 15:19:12] SYSTEM VERSION: 1[2012-11-14 15:19:12] Server count:0[2012-11-14 15:19:12] &#83;&#101;&#x72;&#x76;&#x65;&#114;&#65;&#64;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#x31;:end freshing…[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] End event: NodeChildrenChanged[2012-11-14 15:19:12] Server count:0[2012-11-14 15:19:12] &#83;&#101;&#114;&#118;&#x65;&#x72;&#67;&#x40;&#x31;&#x2e;&#x31;&#46;&#x31;&#46;&#51;:end freshing…[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] End event: NodeDeleted[2012-11-14 15:19:12] Thread-12 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:12] In event: NodeChildrenChanged[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] &#x53;&#101;&#x72;&#x76;&#x65;&#114;&#67;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#51;:freshing…[2012-11-14 15:19:12] SYSTEM VERSION: 1[2012-11-14 15:19:12] Server count:0[2012-11-14 15:19:12] &#x53;&#101;&#114;&#x76;&#101;&#x72;&#67;&#64;&#x31;&#46;&#49;&#46;&#x31;&#x2e;&#x33;:end freshing…[2012-11-14 15:19:12] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:12] End event: NodeChildrenChanged[2012-11-14 15:19:16] &#x43;&#108;&#105;&#x65;&#x6e;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#83;&#x65;&#114;&#x76;&#x65;&#114;&#66;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#50;&#x2d;&#116;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#49;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#67;&#108;&#105;&#101;&#110;&#x74;&#x54;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#83;&#x65;&#x72;&#x76;&#101;&#x72;&#65;&#64;&#49;&#x2e;&#49;&#x2e;&#x31;&#46;&#x31;&#45;&#116;&#104;&#x72;&#101;&#x61;&#100;&#95;&#50;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#x43;&#108;&#105;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#100;&#95;&#x53;&#101;&#x72;&#x76;&#101;&#114;&#x42;&#64;&#x31;&#46;&#49;&#x2e;&#49;&#x2e;&#x32;&#x2d;&#x74;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#x30;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#67;&#108;&#105;&#101;&#x6e;&#x74;&#x54;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#x53;&#x65;&#114;&#118;&#101;&#114;&#65;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#x31;&#45;&#116;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#49;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#x43;&#x6c;&#105;&#x65;&#110;&#x74;&#x54;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#x53;&#x65;&#x72;&#x76;&#101;&#114;&#67;&#x40;&#x31;&#46;&#x31;&#46;&#49;&#46;&#51;&#45;&#116;&#104;&#114;&#x65;&#x61;&#100;&#x5f;&#x30;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#83;&#101;&#x72;&#118;&#101;&#x72;&#x41;&#64;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#49;&#45;&#116;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#x33;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#67;&#108;&#x69;&#101;&#110;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#x65;&#x72;&#x76;&#x65;&#114;&#65;&#x40;&#49;&#46;&#49;&#x2e;&#x31;&#46;&#49;&#45;&#x74;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#48;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#67;&#108;&#105;&#101;&#110;&#116;&#84;&#104;&#114;&#x65;&#97;&#x64;&#x5f;&#x53;&#101;&#114;&#x76;&#101;&#x72;&#65;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#x2e;&#x31;&#45;&#x74;&#104;&#114;&#x65;&#97;&#100;&#95;&#52;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#x53;&#101;&#114;&#x76;&#x65;&#x72;&#x42;&#x40;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#x32;&#x2d;&#116;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#51;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#x43;&#x6c;&#105;&#x65;&#x6e;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#83;&#x65;&#x72;&#x76;&#101;&#x72;&#67;&#64;&#x31;&#46;&#49;&#46;&#49;&#46;&#51;&#45;&#116;&#104;&#114;&#x65;&#x61;&#100;&#95;&#x31;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#67;&#108;&#105;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#83;&#101;&#114;&#118;&#101;&#x72;&#66;&#64;&#x31;&#46;&#49;&#x2e;&#x31;&#46;&#x32;&#x2d;&#x74;&#104;&#x72;&#x65;&#x61;&#100;&#x5f;&#50;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#x43;&#108;&#x69;&#x65;&#x6e;&#x74;&#x54;&#x68;&#114;&#101;&#97;&#x64;&#95;&#83;&#101;&#x72;&#118;&#101;&#x72;&#x42;&#64;&#x31;&#x2e;&#x31;&#46;&#x31;&#46;&#x32;&#45;&#x74;&#x68;&#114;&#101;&#x61;&#100;&#x5f;&#x34;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#x43;&#x6c;&#x69;&#x65;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#101;&#x72;&#118;&#x65;&#114;&#67;&#x40;&#49;&#46;&#49;&#x2e;&#x31;&#46;&#51;&#x2d;&#116;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#50;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#x43;&#x6c;&#105;&#x65;&#x6e;&#x74;&#x54;&#104;&#x72;&#101;&#97;&#x64;&#95;&#x53;&#x65;&#x72;&#x76;&#101;&#114;&#x43;&#64;&#49;&#46;&#x31;&#46;&#49;&#46;&#51;&#x2d;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#51;: did not get server_count and modNum!!![2012-11-14 15:19:16] &#67;&#108;&#105;&#101;&#x6e;&#116;&#84;&#104;&#114;&#x65;&#97;&#100;&#95;&#83;&#101;&#114;&#x76;&#x65;&#114;&#67;&#x40;&#x31;&#46;&#x31;&#46;&#x31;&#x2e;&#x33;&#45;&#116;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#52;: did not get server_count and modNum!!![2012-11-14 15:19:20] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:20] In event: NodeChildrenChanged[2012-11-14 15:19:20] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:20] &#83;&#x65;&#x72;&#x76;&#101;&#114;&#x41;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#x31;:freshing…[2012-11-14 15:19:20] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:20] In event: NodeChildrenChanged[2012-11-14 15:19:20] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:20] &#83;&#101;&#114;&#118;&#x65;&#x72;&#66;&#64;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#x32;:freshing…[2012-11-14 15:19:20] Thread-12 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:20] In event: NodeChildrenChanged[2012-11-14 15:19:20] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:20] &#x53;&#x65;&#x72;&#118;&#101;&#x72;&#x43;&#x40;&#x31;&#46;&#49;&#x2e;&#x31;&#x2e;&#x33;:freshing…[2012-11-14 15:19:20] SYSTEM VERSION: 1[2012-11-14 15:19:20] SYSTEM VERSION: 1[2012-11-14 15:19:20] SYSTEM VERSION: 1[2012-11-14 15:19:20] Server count:1Did not get the mod number for &#83;&#101;&#114;&#118;&#101;&#x72;&#x43;&#64;&#x31;&#46;&#49;&#x2e;&#49;&#46;&#x33;[2012-11-14 15:19:20] Server count:1[2012-11-14 15:19:20] &#83;&#x65;&#x72;&#118;&#101;&#x72;&#67;&#x40;&#x31;&#46;&#x31;&#46;&#x31;&#x2e;&#51;:end freshing…[2012-11-14 15:19:20] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:20] End event: NodeChildrenChanged[2012-11-14 15:19:20] &#x53;&#x65;&#114;&#118;&#101;&#114;&#65;&#x40;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#49;, mod&#x3D;0,base&#x3D;5[2012-11-14 15:19:20] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#x53;&#101;&#x72;&#118;&#101;&#x72;&#x41;&#x40;&#49;&#x2e;&#x31;&#46;&#49;&#x2e;&#49;&#45;&#x74;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#48;:0&#x2F;5[2012-11-14 15:19:20] &#x43;&#x6c;&#x69;&#x65;&#110;&#x74;&#84;&#104;&#x72;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#x72;&#x76;&#101;&#114;&#x41;&#64;&#49;&#x2e;&#49;&#x2e;&#49;&#46;&#49;&#x2d;&#116;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#x31;:1&#x2F;5[2012-11-14 15:19:20] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#84;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#101;&#114;&#x76;&#101;&#114;&#65;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#46;&#49;&#45;&#116;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#x32;:2&#x2F;5[2012-11-14 15:19:20] &#x43;&#108;&#x69;&#x65;&#x6e;&#x74;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#83;&#x65;&#114;&#x76;&#x65;&#114;&#65;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2d;&#x74;&#104;&#x72;&#101;&#97;&#x64;&#95;&#x33;:3&#x2F;5[2012-11-14 15:19:20] &#67;&#x6c;&#x69;&#101;&#110;&#x74;&#x54;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#x72;&#65;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#x31;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#x34;:4&#x2F;5[2012-11-14 15:19:20] &#x53;&#x65;&#114;&#118;&#x65;&#x72;&#65;&#x40;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#49;:end freshing…[2012-11-14 15:19:20] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:20] End event: NodeChildrenChangedDid not get the mod number for &#x53;&#101;&#114;&#x76;&#101;&#x72;&#66;&#x40;&#49;&#x2e;&#49;&#x2e;&#49;&#x2e;&#x32;[2012-11-14 15:19:20] Server count:1[2012-11-14 15:19:20] &#x53;&#x65;&#114;&#x76;&#x65;&#114;&#x42;&#64;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#50;:end freshing…[2012-11-14 15:19:20] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:20] End event: NodeChildrenChanged[2012-11-14 15:19:21] &#x43;&#108;&#x69;&#101;&#110;&#116;&#84;&#104;&#x72;&#101;&#97;&#x64;&#95;&#x53;&#101;&#x72;&#118;&#101;&#114;&#x42;&#x40;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#x32;&#x2d;&#x74;&#104;&#x72;&#x65;&#97;&#100;&#95;&#49;&#45;&#54;&#x2F;5:[2012-11-14 15:19:21] &#x43;&#108;&#x69;&#x65;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#97;&#x64;&#95;&#x53;&#101;&#114;&#x76;&#x65;&#x72;&#65;&#64;&#49;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#49;&#x2d;&#116;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#48;&#x2d;&#48;&#x2F;5:5 10 15 20 25 30[2012-11-14 15:19:21] &#67;&#x6c;&#105;&#101;&#110;&#x74;&#84;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#83;&#101;&#x72;&#x76;&#x65;&#114;&#65;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#46;&#x31;&#x2d;&#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#50;&#x2d;&#x32;&#x2F;5:2 7 12 17 22 27[2012-11-14 15:19:21] &#x43;&#108;&#105;&#x65;&#110;&#x74;&#84;&#104;&#x72;&#x65;&#97;&#x64;&#95;&#83;&#101;&#x72;&#118;&#x65;&#x72;&#65;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#46;&#x31;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#49;&#x2d;&#49;&#x2F;5:1 6 11 16 21 26[2012-11-14 15:19:21] &#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#x54;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#x72;&#118;&#101;&#x72;&#x41;&#x40;&#49;&#46;&#x31;&#x2e;&#x31;&#x2e;&#49;&#45;&#116;&#x68;&#114;&#101;&#x61;&#100;&#95;&#x33;&#45;&#51;&#x2F;5:3 8 13 18 23 28[2012-11-14 15:19:21] &#x43;&#x6c;&#105;&#x65;&#110;&#116;&#x54;&#x68;&#114;&#101;&#97;&#100;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#x72;&#x43;&#64;&#49;&#x2e;&#49;&#46;&#x31;&#46;&#x33;&#45;&#116;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#48;&#x2d;&#x31;&#x30;&#x2F;5:[2012-11-14 15:19:21] &#67;&#108;&#x69;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#83;&#101;&#x72;&#118;&#x65;&#114;&#x42;&#64;&#49;&#46;&#x31;&#46;&#49;&#x2e;&#50;&#x2d;&#116;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#x30;&#45;&#x35;&#x2F;5:[2012-11-14 15:19:21] &#x43;&#x6c;&#x69;&#101;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#83;&#101;&#114;&#x76;&#101;&#x72;&#67;&#x40;&#x31;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#51;&#x2d;&#116;&#x68;&#114;&#x65;&#97;&#x64;&#x5f;&#x31;&#x2d;&#x31;&#x31;&#x2F;5:[2012-11-14 15:19:21] &#67;&#x6c;&#105;&#x65;&#x6e;&#116;&#84;&#104;&#x72;&#101;&#x61;&#100;&#x5f;&#x53;&#101;&#114;&#x76;&#x65;&#114;&#x42;&#64;&#x31;&#46;&#x31;&#x2e;&#49;&#46;&#x32;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#x33;&#45;&#56;&#x2F;5:[2012-11-14 15:19:21] &#x43;&#108;&#105;&#x65;&#x6e;&#x74;&#84;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#83;&#101;&#x72;&#118;&#x65;&#x72;&#x41;&#64;&#x31;&#46;&#49;&#x2e;&#x31;&#46;&#49;&#x2d;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#x34;&#x2d;&#x34;&#x2F;5:4 9 14 19 24 29[2012-11-14 15:19:21] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#95;&#83;&#101;&#x72;&#118;&#x65;&#x72;&#66;&#64;&#49;&#x2e;&#x31;&#46;&#x31;&#46;&#50;&#x2d;&#116;&#x68;&#114;&#101;&#97;&#100;&#95;&#x32;&#45;&#55;&#x2F;5:[2012-11-14 15:19:21] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#x65;&#97;&#100;&#95;&#83;&#x65;&#114;&#x76;&#x65;&#114;&#x43;&#x40;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#51;&#x2d;&#116;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#x32;&#45;&#49;&#x32;&#x2F;5:[2012-11-14 15:19:21] &#x43;&#x6c;&#x69;&#101;&#x6e;&#116;&#84;&#x68;&#114;&#101;&#97;&#100;&#95;&#83;&#x65;&#114;&#118;&#x65;&#x72;&#66;&#x40;&#49;&#46;&#49;&#46;&#49;&#x2e;&#x32;&#45;&#116;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x34;&#x2d;&#57;&#x2F;5:[2012-11-14 15:19:21] &#x43;&#x6c;&#105;&#x65;&#110;&#x74;&#84;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#101;&#x72;&#x76;&#101;&#x72;&#x43;&#64;&#49;&#46;&#49;&#x2e;&#49;&#46;&#51;&#x2d;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#x34;&#x2d;&#49;&#x34;&#x2F;5:[2012-11-14 15:19:21] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#x43;&#x40;&#49;&#x2e;&#x31;&#46;&#x31;&#x2e;&#51;&#x2d;&#116;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#x33;&#x2d;&#x31;&#51;&#x2F;5:[2012-11-14 15:19:25] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:25] In event: NodeChildrenChanged[2012-11-14 15:19:25] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:25] &#83;&#x65;&#x72;&#118;&#101;&#x72;&#x41;&#x40;&#49;&#46;&#49;&#x2e;&#x31;&#x2e;&#x31;:freshing…[2012-11-14 15:19:25] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:25] In event: NodeChildrenChanged[2012-11-14 15:19:25] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:25] &#83;&#101;&#114;&#x76;&#x65;&#x72;&#x42;&#64;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#x32;:freshing…[2012-11-14 15:19:25] Thread-12 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:25] In event: NodeChildrenChanged[2012-11-14 15:19:25] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:25] &#x53;&#x65;&#114;&#118;&#101;&#x72;&#x43;&#64;&#x31;&#x2e;&#49;&#x2e;&#49;&#46;&#x33;:freshing…[2012-11-14 15:19:25] SYSTEM VERSION: 1[2012-11-14 15:19:25] SYSTEM VERSION: 1[2012-11-14 15:19:25] SYSTEM VERSION: 1[2012-11-14 15:19:25] Server count:2[2012-11-14 15:19:25] &#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#67;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#x2e;&#x33;:end freshing…[2012-11-14 15:19:25] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Did not get the mod number for &#x53;&#101;&#114;&#118;&#x65;&#114;&#67;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#x33;[2012-11-14 15:19:25] End event: NodeChildrenChanged[2012-11-14 15:19:25] Server count:2[2012-11-14 15:19:25] Server count:2[2012-11-14 15:19:25] &#x53;&#x65;&#x72;&#118;&#x65;&#x72;&#66;&#64;&#x31;&#46;&#x31;&#46;&#x31;&#x2e;&#50;, mod&#x3D;1,base&#x3D;10[2012-11-14 15:19:25] &#67;&#x6c;&#x69;&#101;&#110;&#x74;&#x54;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#83;&#x65;&#114;&#118;&#101;&#x72;&#66;&#x40;&#x31;&#46;&#49;&#x2e;&#x31;&#x2e;&#x32;&#x2d;&#x74;&#104;&#x72;&#x65;&#97;&#x64;&#x5f;&#x30;:5&#x2F;10[2012-11-14 15:19:25] &#67;&#x6c;&#105;&#x65;&#110;&#116;&#x54;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#x72;&#x42;&#64;&#49;&#46;&#49;&#46;&#49;&#46;&#50;&#x2d;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#95;&#49;:6&#x2F;10[2012-11-14 15:19:25] &#67;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#104;&#x72;&#101;&#x61;&#100;&#95;&#83;&#101;&#114;&#x76;&#101;&#x72;&#x42;&#64;&#x31;&#46;&#49;&#46;&#x31;&#46;&#50;&#x2d;&#x74;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#50;:7&#x2F;10[2012-11-14 15:19:25] &#x43;&#108;&#105;&#x65;&#110;&#116;&#x54;&#104;&#x72;&#101;&#97;&#x64;&#95;&#83;&#x65;&#x72;&#x76;&#x65;&#x72;&#x42;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#x2e;&#50;&#45;&#x74;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#x33;:8&#x2F;10[2012-11-14 15:19:25] &#67;&#x6c;&#x69;&#101;&#x6e;&#116;&#84;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#83;&#101;&#114;&#x76;&#x65;&#114;&#66;&#64;&#49;&#x2e;&#49;&#46;&#49;&#46;&#x32;&#x2d;&#x74;&#104;&#114;&#101;&#97;&#100;&#x5f;&#x34;:9&#x2F;10[2012-11-14 15:19:25] &#83;&#x65;&#114;&#x76;&#x65;&#x72;&#x42;&#x40;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#50;:end freshing…[2012-11-14 15:19:25] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:25] End event: NodeChildrenChanged[2012-11-14 15:19:25] &#x53;&#x65;&#114;&#118;&#x65;&#x72;&#65;&#64;&#x31;&#x2e;&#49;&#x2e;&#49;&#x2e;&#49;, mod&#x3D;0,base&#x3D;10[2012-11-14 15:19:25] &#x43;&#x6c;&#105;&#101;&#110;&#116;&#x54;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#118;&#x65;&#114;&#65;&#x40;&#x31;&#46;&#49;&#46;&#49;&#46;&#49;&#x2d;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#x30;:0&#x2F;10[2012-11-14 15:19:25] &#x43;&#108;&#105;&#x65;&#x6e;&#x74;&#84;&#x68;&#x72;&#101;&#x61;&#100;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#114;&#x41;&#64;&#49;&#46;&#49;&#x2e;&#x31;&#46;&#49;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#49;:1&#x2F;10[2012-11-14 15:19:25] &#x43;&#108;&#105;&#x65;&#110;&#116;&#84;&#x68;&#114;&#x65;&#x61;&#100;&#95;&#x53;&#101;&#x72;&#118;&#x65;&#x72;&#65;&#64;&#49;&#x2e;&#x31;&#46;&#49;&#46;&#x31;&#45;&#116;&#104;&#114;&#101;&#x61;&#x64;&#95;&#50;:2&#x2F;10[2012-11-14 15:19:25] &#67;&#108;&#105;&#x65;&#110;&#116;&#x54;&#104;&#114;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#x41;&#64;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#49;&#x2d;&#116;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#x33;:3&#x2F;10[2012-11-14 15:19:25] &#67;&#x6c;&#105;&#101;&#110;&#116;&#84;&#104;&#114;&#101;&#97;&#100;&#x5f;&#83;&#x65;&#114;&#118;&#101;&#114;&#65;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#46;&#49;&#45;&#116;&#104;&#x72;&#101;&#x61;&#100;&#x5f;&#52;:4&#x2F;10[2012-11-14 15:19:25] &#83;&#101;&#x72;&#118;&#x65;&#114;&#65;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#49;:end freshing…[2012-11-14 15:19:25] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:25] End event: NodeChildrenChanged[2012-11-14 15:19:26] &#67;&#108;&#x69;&#101;&#x6e;&#x74;&#84;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#x53;&#101;&#x72;&#x76;&#101;&#x72;&#65;&#64;&#49;&#46;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2d;&#x74;&#x68;&#x72;&#101;&#97;&#x64;&#x5f;&#50;&#45;&#x32;&#x2F;10:2 12 22[2012-11-14 15:19:26] &#x43;&#108;&#x69;&#x65;&#110;&#116;&#84;&#x68;&#114;&#101;&#97;&#100;&#95;&#83;&#101;&#x72;&#118;&#101;&#x72;&#x41;&#64;&#49;&#x2e;&#x31;&#46;&#x31;&#x2e;&#49;&#45;&#116;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#x33;&#45;&#x33;&#x2F;10:3 13 23[2012-11-14 15:19:26] &#x43;&#x6c;&#105;&#x65;&#x6e;&#x74;&#x54;&#104;&#x72;&#101;&#x61;&#100;&#x5f;&#x53;&#x65;&#x72;&#x76;&#101;&#114;&#x41;&#x40;&#49;&#x2e;&#x31;&#46;&#x31;&#x2e;&#x31;&#45;&#x74;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#48;&#45;&#48;&#x2F;10:10 20 30[2012-11-14 15:19:26] &#67;&#108;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#83;&#101;&#x72;&#x76;&#x65;&#x72;&#x41;&#64;&#x31;&#x2e;&#49;&#x2e;&#x31;&#46;&#49;&#45;&#x74;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#49;&#x2d;&#x31;&#x2F;10:1 11 21[2012-11-14 15:19:26] &#67;&#108;&#105;&#101;&#110;&#x74;&#x54;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#83;&#101;&#114;&#x76;&#x65;&#x72;&#x43;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#46;&#51;&#45;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#x30;&#45;&#x31;&#48;&#x2F;10:[2012-11-14 15:19:26] &#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#x54;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#83;&#x65;&#114;&#x76;&#x65;&#114;&#x42;&#x40;&#49;&#x2e;&#x31;&#x2e;&#x31;&#46;&#x32;&#x2d;&#x74;&#104;&#114;&#x65;&#97;&#x64;&#95;&#x30;&#45;&#53;&#x2F;10:5 15 25[2012-11-14 15:19:26] &#x43;&#x6c;&#x69;&#101;&#110;&#x74;&#84;&#x68;&#x72;&#101;&#97;&#100;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#x72;&#66;&#x40;&#x31;&#46;&#x31;&#x2e;&#49;&#x2e;&#50;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#x31;&#x2d;&#54;&#x2F;10:6 16 26[2012-11-14 15:19:26] &#67;&#x6c;&#x69;&#x65;&#110;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#83;&#101;&#114;&#x76;&#x65;&#114;&#65;&#64;&#49;&#46;&#x31;&#x2e;&#x31;&#46;&#49;&#45;&#116;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#x34;&#45;&#52;&#x2F;10:4 14 24[2012-11-14 15:19:26] &#x43;&#108;&#105;&#x65;&#110;&#x74;&#84;&#x68;&#114;&#101;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#x76;&#101;&#114;&#67;&#x40;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#51;&#x2d;&#x74;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#x31;&#x2d;&#49;&#x31;&#x2F;10:[2012-11-14 15:19:26] &#67;&#108;&#105;&#101;&#110;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#x72;&#66;&#x40;&#49;&#x2e;&#49;&#x2e;&#49;&#x2e;&#x32;&#x2d;&#x74;&#x68;&#114;&#101;&#x61;&#100;&#95;&#x33;&#45;&#56;&#x2F;10:8 18 28[2012-11-14 15:19:26] &#x43;&#108;&#105;&#101;&#x6e;&#x74;&#x54;&#104;&#114;&#x65;&#x61;&#x64;&#95;&#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#x42;&#x40;&#49;&#46;&#x31;&#46;&#49;&#x2e;&#50;&#x2d;&#116;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#50;&#x2d;&#x37;&#x2F;10:7 17 27[2012-11-14 15:19:26] &#67;&#108;&#x69;&#101;&#110;&#116;&#84;&#104;&#x72;&#x65;&#97;&#100;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#66;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#x2e;&#50;&#45;&#x74;&#104;&#x72;&#x65;&#97;&#x64;&#95;&#x34;&#x2d;&#57;&#x2F;10:9 19 29[2012-11-14 15:19:26] &#67;&#108;&#x69;&#x65;&#x6e;&#116;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#83;&#x65;&#x72;&#118;&#x65;&#114;&#67;&#64;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#51;&#45;&#x74;&#104;&#x72;&#x65;&#97;&#x64;&#x5f;&#x32;&#x2d;&#x31;&#50;&#x2F;10:[2012-11-14 15:19:26] &#x43;&#108;&#x69;&#x65;&#110;&#x74;&#x54;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#83;&#101;&#114;&#x76;&#101;&#114;&#67;&#64;&#x31;&#46;&#49;&#46;&#49;&#46;&#51;&#x2d;&#116;&#104;&#114;&#101;&#97;&#100;&#95;&#52;&#x2d;&#x31;&#52;&#x2F;10:[2012-11-14 15:19:26] &#x43;&#x6c;&#x69;&#x65;&#110;&#x74;&#84;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#x53;&#x65;&#x72;&#x76;&#x65;&#114;&#x43;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#46;&#x33;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x33;&#45;&#x31;&#x33;&#x2F;10:[2012-11-14 15:19:31] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#x54;&#x68;&#x72;&#101;&#x61;&#100;&#x5f;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#x41;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#x31;&#x2d;&#116;&#x68;&#114;&#101;&#x61;&#100;&#95;&#x31;&#45;&#49;&#x2F;10:1 11 21[2012-11-14 15:19:31] &#x43;&#108;&#105;&#101;&#x6e;&#116;&#x54;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#x76;&#101;&#x72;&#x41;&#x40;&#49;&#x2e;&#x31;&#46;&#x31;&#46;&#x31;&#45;&#x74;&#x68;&#x72;&#x65;&#x61;&#x64;&#95;&#x30;&#45;&#48;&#x2F;10:10 20 30[2012-11-14 15:19:31] &#67;&#108;&#x69;&#x65;&#x6e;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#100;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#x42;&#64;&#x31;&#46;&#49;&#46;&#49;&#x2e;&#x32;&#45;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#x30;&#45;&#53;&#x2F;10:5 15 25[2012-11-14 15:19:31] &#67;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#x53;&#101;&#114;&#118;&#x65;&#114;&#67;&#64;&#x31;&#46;&#49;&#x2e;&#x31;&#46;&#51;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#x30;&#x2d;&#49;&#48;&#x2F;10:[2012-11-14 15:19:31] &#x43;&#108;&#x69;&#101;&#x6e;&#116;&#x54;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#101;&#114;&#x76;&#101;&#x72;&#x41;&#x40;&#49;&#x2e;&#x31;&#x2e;&#49;&#46;&#49;&#45;&#116;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x32;&#x2d;&#50;&#x2F;10:2 12 22[2012-11-14 15:19:31] &#67;&#108;&#105;&#x65;&#110;&#x74;&#84;&#x68;&#x72;&#101;&#97;&#x64;&#95;&#x53;&#x65;&#x72;&#x76;&#101;&#114;&#65;&#x40;&#x31;&#x2e;&#49;&#46;&#x31;&#x2e;&#x31;&#45;&#116;&#x68;&#114;&#101;&#x61;&#100;&#95;&#x33;&#45;&#51;&#x2F;10:3 13 23[2012-11-14 15:19:31] &#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#x68;&#114;&#101;&#97;&#x64;&#95;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#66;&#x40;&#49;&#46;&#49;&#46;&#x31;&#x2e;&#x32;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#x64;&#95;&#49;&#45;&#x36;&#x2F;10:6 16 26[2012-11-14 15:19:31] &#x43;&#108;&#105;&#101;&#110;&#116;&#x54;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#x65;&#x72;&#118;&#x65;&#114;&#67;&#64;&#49;&#x2e;&#49;&#46;&#x31;&#46;&#x33;&#45;&#116;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#x31;&#x2d;&#x31;&#x31;&#x2F;10:[2012-11-14 15:19:31] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#83;&#x65;&#114;&#118;&#x65;&#x72;&#65;&#x40;&#x31;&#46;&#x31;&#46;&#49;&#46;&#x31;&#x2d;&#x74;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#x34;&#45;&#x34;&#x2F;10:4 14 24[2012-11-14 15:19:31] &#x43;&#x6c;&#105;&#101;&#110;&#116;&#x54;&#104;&#114;&#101;&#x61;&#x64;&#x5f;&#83;&#101;&#114;&#118;&#x65;&#x72;&#66;&#x40;&#49;&#x2e;&#x31;&#46;&#x31;&#46;&#x32;&#x2d;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x33;&#x2d;&#56;&#x2F;10:8 18 28[2012-11-14 15:19:31] &#67;&#x6c;&#x69;&#101;&#110;&#116;&#x54;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#83;&#101;&#x72;&#118;&#x65;&#x72;&#x42;&#64;&#x31;&#46;&#49;&#46;&#49;&#46;&#x32;&#x2d;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#95;&#50;&#45;&#55;&#x2F;10:7 17 27[2012-11-14 15:19:31] &#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#95;&#83;&#101;&#x72;&#x76;&#101;&#114;&#66;&#x40;&#49;&#46;&#49;&#46;&#x31;&#x2e;&#x32;&#x2d;&#x74;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#x34;&#x2d;&#57;&#x2F;10:9 19 29[2012-11-14 15:19:31] &#67;&#x6c;&#105;&#101;&#110;&#116;&#x54;&#104;&#114;&#x65;&#x61;&#100;&#x5f;&#83;&#x65;&#x72;&#x76;&#x65;&#114;&#x43;&#64;&#x31;&#46;&#x31;&#46;&#49;&#x2e;&#51;&#x2d;&#116;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#x32;&#x2d;&#x31;&#x32;&#x2F;10:[2012-11-14 15:19:31] &#67;&#x6c;&#x69;&#101;&#110;&#x74;&#84;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#118;&#101;&#x72;&#67;&#x40;&#x31;&#x2e;&#49;&#46;&#x31;&#46;&#x33;&#x2d;&#116;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#x33;&#x2d;&#49;&#x33;&#x2F;10:[2012-11-14 15:19:31] &#67;&#108;&#x69;&#101;&#110;&#x74;&#x54;&#104;&#114;&#x65;&#x61;&#100;&#x5f;&#83;&#x65;&#114;&#118;&#x65;&#114;&#67;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#46;&#x33;&#45;&#116;&#x68;&#114;&#x65;&#97;&#x64;&#x5f;&#52;&#x2d;&#49;&#x34;&#x2F;10:[2012-11-14 15:19:31] Thread-0 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:31] In event: NodeChildrenChanged[2012-11-14 15:19:31] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:31] &#x53;&#x65;&#114;&#118;&#x65;&#x72;&#65;&#x40;&#x31;&#46;&#49;&#x2e;&#49;&#x2e;&#x31;:freshing…[2012-11-14 15:19:31] Thread-12 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:31] In event: NodeChildrenChanged[2012-11-14 15:19:31] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:31] &#x53;&#x65;&#x72;&#118;&#x65;&#114;&#67;&#x40;&#x31;&#46;&#49;&#46;&#49;&#x2e;&#x33;:freshing…[2012-11-14 15:19:31] Thread-6 get an event.Path:&#x2F;demo,state:SyncConnected,type:NodeChildrenChanged[2012-11-14 15:19:31] In event: NodeChildrenChanged[2012-11-14 15:19:31] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:31] &#x53;&#x65;&#x72;&#x76;&#101;&#114;&#66;&#x40;&#x31;&#46;&#x31;&#x2e;&#x31;&#46;&#x32;:freshing…[2012-11-14 15:19:31] SYSTEM VERSION: 1[2012-11-14 15:19:31] SYSTEM VERSION: 1[2012-11-14 15:19:31] SYSTEM VERSION: 1[2012-11-14 15:19:31] Server count:3[2012-11-14 15:19:31] Server count:3[2012-11-14 15:19:31] &#83;&#x65;&#x72;&#x76;&#x65;&#x72;&#x41;&#64;&#x31;&#46;&#49;&#x2e;&#x31;&#x2e;&#x31;, mod&#x3D;0,base&#x3D;15[2012-11-14 15:19:31] &#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#118;&#101;&#114;&#x41;&#64;&#49;&#46;&#x31;&#46;&#x31;&#46;&#x31;&#x2d;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#95;&#x30;:0&#x2F;15[2012-11-14 15:19:31] &#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#x54;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#x72;&#x76;&#x65;&#114;&#65;&#64;&#49;&#46;&#49;&#46;&#x31;&#46;&#49;&#45;&#x74;&#x68;&#x72;&#101;&#97;&#100;&#x5f;&#x31;:1&#x2F;15[2012-11-14 15:19:31] &#67;&#108;&#x69;&#x65;&#x6e;&#116;&#84;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#83;&#101;&#x72;&#118;&#101;&#114;&#x41;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#x2e;&#49;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#50;:2&#x2F;15[2012-11-14 15:19:31] &#x43;&#x6c;&#105;&#101;&#110;&#x74;&#84;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#x72;&#x41;&#64;&#49;&#46;&#49;&#x2e;&#49;&#46;&#x31;&#45;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#x33;:3&#x2F;15[2012-11-14 15:19:31] &#x43;&#108;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#x61;&#x64;&#x5f;&#x53;&#101;&#114;&#118;&#101;&#114;&#65;&#64;&#49;&#x2e;&#x31;&#46;&#x31;&#46;&#49;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#100;&#x5f;&#x34;:4&#x2F;15[2012-11-14 15:19:31] &#83;&#x65;&#114;&#x76;&#x65;&#x72;&#x41;&#x40;&#49;&#x2e;&#49;&#x2e;&#49;&#46;&#x31;:end freshing…[2012-11-14 15:19:31] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:31] End event: NodeChildrenChanged[2012-11-14 15:19:31] Server count:3[2012-11-14 15:19:31] &#83;&#x65;&#114;&#x76;&#101;&#x72;&#x43;&#64;&#x31;&#46;&#49;&#46;&#x31;&#46;&#x33;, mod&#x3D;2,base&#x3D;15[2012-11-14 15:19:31] &#67;&#108;&#105;&#101;&#110;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#83;&#x65;&#114;&#118;&#101;&#114;&#67;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#46;&#51;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#48;:10&#x2F;15[2012-11-14 15:19:31] &#x43;&#108;&#105;&#101;&#x6e;&#x74;&#x54;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#x53;&#x65;&#x72;&#118;&#x65;&#114;&#67;&#64;&#49;&#x2e;&#x31;&#46;&#x31;&#x2e;&#51;&#x2d;&#x74;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#x31;:11&#x2F;15[2012-11-14 15:19:31] &#67;&#x6c;&#x69;&#x65;&#110;&#x74;&#84;&#104;&#114;&#x65;&#x61;&#100;&#95;&#83;&#101;&#x72;&#x76;&#x65;&#114;&#x43;&#x40;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#51;&#45;&#116;&#104;&#114;&#x65;&#x61;&#100;&#95;&#50;:12&#x2F;15[2012-11-14 15:19:31] &#x43;&#x6c;&#105;&#x65;&#x6e;&#x74;&#84;&#x68;&#x72;&#x65;&#97;&#x64;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#114;&#x43;&#64;&#49;&#46;&#x31;&#46;&#49;&#46;&#x33;&#x2d;&#116;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#x33;:13&#x2F;15[2012-11-14 15:19:31] &#67;&#x6c;&#105;&#x65;&#110;&#x74;&#x54;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#83;&#x65;&#114;&#118;&#x65;&#114;&#x43;&#64;&#49;&#46;&#x31;&#46;&#x31;&#46;&#x33;&#45;&#x74;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#x34;:14&#x2F;15[2012-11-14 15:19:31] &#83;&#x65;&#114;&#118;&#101;&#114;&#x43;&#64;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#51;:end freshing…[2012-11-14 15:19:31] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:31] End event: NodeChildrenChanged[2012-11-14 15:19:31] &#x53;&#x65;&#x72;&#x76;&#101;&#114;&#66;&#64;&#49;&#x2e;&#x31;&#46;&#x31;&#x2e;&#50;, mod&#x3D;1,base&#x3D;15[2012-11-14 15:19:31] &#x43;&#x6c;&#105;&#101;&#x6e;&#x74;&#x54;&#x68;&#x72;&#x65;&#x61;&#x64;&#95;&#83;&#101;&#114;&#118;&#101;&#114;&#66;&#x40;&#49;&#46;&#49;&#x2e;&#49;&#46;&#x32;&#x2d;&#116;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#48;:5&#x2F;15[2012-11-14 15:19:31] &#67;&#108;&#105;&#x65;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#x5f;&#83;&#x65;&#x72;&#118;&#101;&#114;&#x42;&#x40;&#49;&#46;&#49;&#x2e;&#49;&#x2e;&#x32;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#49;:6&#x2F;15[2012-11-14 15:19:31] &#x43;&#108;&#105;&#x65;&#110;&#x74;&#x54;&#104;&#x72;&#x65;&#97;&#x64;&#x5f;&#x53;&#x65;&#114;&#x76;&#x65;&#x72;&#66;&#64;&#x31;&#x2e;&#x31;&#46;&#49;&#x2e;&#x32;&#45;&#116;&#x68;&#x72;&#101;&#x61;&#100;&#95;&#x32;:7&#x2F;15[2012-11-14 15:19:31] &#x43;&#x6c;&#105;&#x65;&#x6e;&#116;&#84;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#x72;&#x76;&#101;&#114;&#66;&#64;&#49;&#x2e;&#x31;&#46;&#x31;&#46;&#50;&#45;&#x74;&#x68;&#114;&#x65;&#97;&#x64;&#x5f;&#x33;:8&#x2F;15[2012-11-14 15:19:31] &#x43;&#x6c;&#x69;&#x65;&#x6e;&#116;&#84;&#x68;&#x72;&#x65;&#97;&#100;&#95;&#83;&#x65;&#114;&#x76;&#x65;&#x72;&#66;&#64;&#49;&#46;&#x31;&#46;&#x31;&#x2e;&#x32;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x34;:9&#x2F;15[2012-11-14 15:19:31] &#83;&#x65;&#114;&#118;&#101;&#x72;&#x42;&#x40;&#49;&#46;&#x31;&#x2e;&#49;&#x2e;&#50;:end freshing…[2012-11-14 15:19:31] &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;[2012-11-14 15:19:31] End event: NodeChildrenChanged[2012-11-14 15:19:36] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#x53;&#101;&#114;&#x76;&#101;&#x72;&#66;&#64;&#x31;&#46;&#49;&#46;&#49;&#46;&#x32;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#x30;&#45;&#x35;&#x2F;15:5 20[2012-11-14 15:19:36] &#67;&#x6c;&#105;&#101;&#x6e;&#116;&#84;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#x53;&#x65;&#114;&#118;&#x65;&#114;&#65;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#46;&#x31;&#x2d;&#x74;&#104;&#114;&#x65;&#97;&#x64;&#95;&#x32;&#x2d;&#x32;&#x2F;15:2 17[2012-11-14 15:19:36] &#67;&#108;&#x69;&#x65;&#x6e;&#x74;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#95;&#83;&#101;&#x72;&#x76;&#x65;&#x72;&#65;&#64;&#x31;&#46;&#49;&#46;&#49;&#46;&#49;&#45;&#x74;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#51;&#45;&#x33;&#x2F;15:3 18[2012-11-14 15:19:36] &#x43;&#x6c;&#x69;&#x65;&#110;&#116;&#84;&#x68;&#x72;&#101;&#97;&#x64;&#95;&#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#x43;&#64;&#x31;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#x33;&#45;&#x74;&#104;&#114;&#101;&#x61;&#100;&#95;&#48;&#45;&#x31;&#48;&#x2F;15:10 25[2012-11-14 15:19:36] &#x43;&#x6c;&#x69;&#101;&#x6e;&#116;&#x54;&#x68;&#114;&#101;&#97;&#x64;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#114;&#x41;&#x40;&#49;&#x2e;&#x31;&#x2e;&#49;&#46;&#49;&#x2d;&#116;&#x68;&#114;&#101;&#97;&#x64;&#95;&#48;&#x2d;&#x30;&#x2F;15:15 30[2012-11-14 15:19:36] &#x43;&#x6c;&#105;&#x65;&#110;&#x74;&#84;&#104;&#114;&#x65;&#x61;&#100;&#95;&#83;&#x65;&#x72;&#x76;&#101;&#x72;&#65;&#64;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2d;&#x74;&#x68;&#x72;&#101;&#97;&#x64;&#95;&#49;&#45;&#x31;&#x2F;15:1 16[2012-11-14 15:19:36] &#67;&#108;&#105;&#101;&#110;&#x74;&#84;&#104;&#x72;&#101;&#x61;&#100;&#95;&#x53;&#101;&#114;&#118;&#x65;&#x72;&#66;&#x40;&#49;&#46;&#x31;&#x2e;&#49;&#46;&#50;&#x2d;&#116;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#x31;&#45;&#54;&#x2F;15:6 21[2012-11-14 15:19:36] &#x43;&#108;&#105;&#101;&#110;&#116;&#x54;&#x68;&#114;&#101;&#97;&#100;&#95;&#x53;&#x65;&#x72;&#118;&#101;&#114;&#x43;&#64;&#x31;&#x2e;&#x31;&#x2e;&#49;&#46;&#51;&#x2d;&#116;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#x31;&#x2d;&#49;&#49;&#x2F;15:11 26[2012-11-14 15:19:36] &#x43;&#108;&#x69;&#x65;&#110;&#116;&#84;&#104;&#x72;&#x65;&#x61;&#x64;&#x5f;&#x53;&#x65;&#114;&#x76;&#101;&#x72;&#x42;&#64;&#x31;&#46;&#49;&#46;&#x31;&#46;&#50;&#45;&#x74;&#x68;&#x72;&#101;&#97;&#x64;&#x5f;&#x33;&#x2d;&#x38;&#x2F;15:8 23[2012-11-14 15:19:36] &#x43;&#108;&#x69;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#x65;&#97;&#100;&#95;&#83;&#101;&#114;&#118;&#101;&#114;&#65;&#64;&#x31;&#x2e;&#49;&#x2e;&#49;&#46;&#x31;&#45;&#x74;&#104;&#x72;&#101;&#x61;&#x64;&#95;&#52;&#45;&#52;&#x2F;15:4 19[2012-11-14 15:19:36] &#67;&#108;&#x69;&#101;&#x6e;&#116;&#84;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#66;&#64;&#x31;&#46;&#49;&#x2e;&#x31;&#46;&#50;&#x2d;&#x74;&#x68;&#114;&#x65;&#97;&#x64;&#95;&#x32;&#x2d;&#x37;&#x2F;15:7 22[2012-11-14 15:19:36] &#67;&#108;&#x69;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#100;&#95;&#83;&#101;&#114;&#118;&#x65;&#114;&#67;&#64;&#49;&#46;&#49;&#46;&#x31;&#x2e;&#x33;&#45;&#116;&#104;&#114;&#x65;&#97;&#x64;&#95;&#50;&#45;&#49;&#50;&#x2F;15:12 27[2012-11-14 15:19:36] &#x43;&#108;&#105;&#101;&#x6e;&#116;&#x54;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#83;&#x65;&#114;&#x76;&#x65;&#x72;&#66;&#x40;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#50;&#45;&#116;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#52;&#x2d;&#57;&#x2F;15:9 24[2012-11-14 15:19:36] &#67;&#108;&#x69;&#x65;&#110;&#116;&#84;&#x68;&#114;&#101;&#97;&#100;&#95;&#x53;&#x65;&#x72;&#118;&#x65;&#x72;&#x43;&#64;&#x31;&#x2e;&#49;&#46;&#49;&#x2e;&#51;&#x2d;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#52;&#45;&#49;&#52;&#x2F;15:14 29[2012-11-14 15:19:36] &#x43;&#x6c;&#x69;&#101;&#110;&#x74;&#x54;&#104;&#114;&#101;&#97;&#100;&#95;&#x53;&#x65;&#x72;&#x76;&#x65;&#x72;&#x43;&#64;&#x31;&#x2e;&#x31;&#46;&#x31;&#46;&#51;&#x2d;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#51;&#45;&#x31;&#51;&#x2F;15:13 28[2012-11-14 15:19:41] &#67;&#x6c;&#105;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#101;&#97;&#x64;&#x5f;&#x53;&#x65;&#114;&#x76;&#101;&#114;&#67;&#x40;&#49;&#x2e;&#x31;&#x2e;&#49;&#46;&#x33;&#x2d;&#x74;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#48;&#x2d;&#x31;&#48;&#x2F;15:10 25[2012-11-14 15:19:41] &#67;&#108;&#105;&#x65;&#110;&#116;&#x54;&#104;&#x72;&#101;&#x61;&#100;&#95;&#83;&#x65;&#x72;&#x76;&#x65;&#x72;&#65;&#x40;&#x31;&#46;&#49;&#46;&#49;&#46;&#49;&#45;&#116;&#104;&#x72;&#x65;&#97;&#x64;&#x5f;&#48;&#x2d;&#x30;&#x2F;15:15 30[2012-11-14 15:19:41] &#67;&#108;&#105;&#x65;&#x6e;&#x74;&#x54;&#104;&#114;&#101;&#97;&#x64;&#95;&#83;&#x65;&#x72;&#x76;&#101;&#x72;&#66;&#x40;&#49;&#x2e;&#49;&#x2e;&#49;&#46;&#50;&#x2d;&#116;&#104;&#114;&#101;&#97;&#x64;&#x5f;&#49;&#x2d;&#x36;&#x2F;15:6 21[2012-11-14 15:19:41] &#67;&#x6c;&#x69;&#101;&#x6e;&#x74;&#x54;&#x68;&#x72;&#x65;&#97;&#x64;&#95;&#83;&#x65;&#x72;&#118;&#101;&#114;&#x41;&#64;&#49;&#x2e;&#x31;&#x2e;&#49;&#46;&#49;&#x2d;&#x74;&#x68;&#114;&#101;&#x61;&#x64;&#x5f;&#51;&#x2d;&#x33;&#x2F;15:3 18[2012-11-14 15:19:41] &#67;&#108;&#x69;&#101;&#110;&#x74;&#x54;&#104;&#x72;&#x65;&#97;&#x64;&#95;&#83;&#101;&#x72;&#118;&#x65;&#x72;&#x42;&#x40;&#x31;&#x2e;&#x31;&#46;&#x31;&#x2e;&#50;&#x2d;&#x74;&#x68;&#114;&#101;&#x61;&#x64;&#95;&#x30;&#45;&#x35;&#x2F;15:5 20[2012-11-14 15:19:41] &#67;&#108;&#x69;&#x65;&#110;&#116;&#84;&#104;&#114;&#101;&#x61;&#100;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#x72;&#x41;&#64;&#49;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#49;&#45;&#116;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#x31;&#45;&#49;&#x2F;15:1 16[2012-11-14 15:19:41] &#x43;&#x6c;&#x69;&#101;&#x6e;&#x74;&#84;&#x68;&#114;&#x65;&#x61;&#100;&#x5f;&#x53;&#101;&#x72;&#118;&#x65;&#x72;&#65;&#x40;&#49;&#46;&#49;&#46;&#x31;&#x2e;&#49;&#45;&#116;&#x68;&#x72;&#x65;&#x61;&#100;&#95;&#50;&#45;&#x32;&#x2F;15:2 17[2012-11-14 15:19:41] &#67;&#x6c;&#105;&#x65;&#x6e;&#116;&#x54;&#104;&#x72;&#101;&#x61;&#x64;&#x5f;&#x53;&#x65;&#x72;&#118;&#x65;&#x72;&#x42;&#x40;&#49;&#x2e;&#49;&#46;&#49;&#x2e;&#50;&#45;&#116;&#104;&#x72;&#101;&#97;&#x64;&#95;&#51;&#x2d;&#x38;&#x2F;15:8 23[2012-11-14 15:19:41] &#x43;&#108;&#105;&#x65;&#x6e;&#116;&#84;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#x53;&#x65;&#114;&#118;&#101;&#114;&#x42;&#64;&#x31;&#46;&#x31;&#46;&#x31;&#46;&#x32;&#45;&#x74;&#x68;&#x72;&#x65;&#97;&#100;&#x5f;&#x32;&#x2d;&#55;&#x2F;15:7 22[2012-11-14 15:19:41] &#x43;&#108;&#105;&#101;&#110;&#116;&#84;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#x72;&#118;&#101;&#x72;&#65;&#x40;&#49;&#46;&#x31;&#46;&#x31;&#46;&#x31;&#x2d;&#116;&#104;&#114;&#x65;&#97;&#100;&#95;&#52;&#45;&#52;&#x2F;15:4 19[2012-11-14 15:19:41] &#x43;&#108;&#105;&#x65;&#110;&#x74;&#x54;&#104;&#x72;&#101;&#97;&#100;&#x5f;&#83;&#x65;&#x72;&#118;&#101;&#114;&#x43;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#49;&#x2e;&#51;&#x2d;&#x74;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#x31;&#45;&#49;&#x31;&#x2F;15:11 26[2012-11-14 15:19:41] &#67;&#x6c;&#x69;&#101;&#110;&#x74;&#x54;&#x68;&#114;&#x65;&#97;&#100;&#x5f;&#83;&#x65;&#114;&#x76;&#101;&#114;&#x43;&#x40;&#x31;&#46;&#x31;&#x2e;&#x31;&#x2e;&#x33;&#x2d;&#x74;&#104;&#114;&#x65;&#x61;&#x64;&#x5f;&#50;&#x2d;&#x31;&#x32;&#x2F;15:12 27[2012-11-14 15:19:41] &#67;&#x6c;&#x69;&#101;&#x6e;&#x74;&#84;&#104;&#x72;&#x65;&#x61;&#100;&#95;&#83;&#x65;&#x72;&#x76;&#x65;&#x72;&#66;&#64;&#x31;&#46;&#49;&#x2e;&#49;&#46;&#50;&#x2d;&#116;&#104;&#x72;&#x65;&#x61;&#100;&#x5f;&#x34;&#x2d;&#57;&#x2F;15:9 24[2012-11-14 15:19:41] &#x43;&#108;&#x69;&#101;&#x6e;&#x74;&#x54;&#x68;&#114;&#x65;&#x61;&#x64;&#x5f;&#x53;&#101;&#114;&#x76;&#x65;&#x72;&#67;&#x40;&#x31;&#x2e;&#x31;&#x2e;&#x31;&#x2e;&#51;&#x2d;&#x74;&#x68;&#x72;&#x65;&#x61;&#x64;&#95;&#x34;&#45;&#49;&#x34;&#x2F;15:14 29[2012-11-14 15:19:41] &#x43;&#108;&#x69;&#101;&#110;&#x74;&#x54;&#x68;&#x72;&#101;&#x61;&#x64;&#95;&#83;&#x65;&#x72;&#118;&#x65;&#114;&#67;&#x40;&#49;&#46;&#49;&#46;&#x31;&#x2e;&#x33;&#45;&#116;&#104;&#x72;&#x65;&#97;&#100;&#x5f;&#51;&#x2d;&#49;&#x33;&#x2F;15:13 28","categories":[{"name":"分布式应用","slug":"分布式应用","permalink":"https://maohong.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"}],"tags":[{"name":"zookeeper","slug":"zookeeper","permalink":"https://maohong.github.io/tags/zookeeper/"},{"name":"横向扩展","slug":"横向扩展","permalink":"https://maohong.github.io/tags/%E6%A8%AA%E5%90%91%E6%89%A9%E5%B1%95/"},{"name":"分布式协调","slug":"分布式协调","permalink":"https://maohong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83/"}]}],"categories":[{"name":"Storm","slug":"Storm","permalink":"https://maohong.github.io/categories/Storm/"},{"name":"Kafka","slug":"Kafka","permalink":"https://maohong.github.io/categories/Kafka/"},{"name":"Spark","slug":"Spark","permalink":"https://maohong.github.io/categories/Spark/"},{"name":"问题分析","slug":"问题分析","permalink":"https://maohong.github.io/categories/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"},{"name":"Hadoop","slug":"Hadoop","permalink":"https://maohong.github.io/categories/Hadoop/"},{"name":"工具","slug":"工具","permalink":"https://maohong.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"Redis","slug":"Redis","permalink":"https://maohong.github.io/categories/Redis/"},{"name":"分布式应用","slug":"分布式应用","permalink":"https://maohong.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"},{"name":"Shell","slug":"Shell","permalink":"https://maohong.github.io/categories/Shell/"}],"tags":[{"name":"storm","slug":"storm","permalink":"https://maohong.github.io/tags/storm/"},{"name":"源码编译","slug":"源码编译","permalink":"https://maohong.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"},{"name":"本地调试","slug":"本地调试","permalink":"https://maohong.github.io/tags/%E6%9C%AC%E5%9C%B0%E8%B0%83%E8%AF%95/"},{"name":"kafka","slug":"kafka","permalink":"https://maohong.github.io/tags/kafka/"},{"name":"源码分析","slug":"源码分析","permalink":"https://maohong.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"},{"name":"实时计算","slug":"实时计算","permalink":"https://maohong.github.io/tags/%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97/"},{"name":"spark","slug":"spark","permalink":"https://maohong.github.io/tags/spark/"},{"name":"yarn","slug":"yarn","permalink":"https://maohong.github.io/tags/yarn/"},{"name":"内存分配","slug":"内存分配","permalink":"https://maohong.github.io/tags/%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"},{"name":"supervisor","slug":"supervisor","permalink":"https://maohong.github.io/tags/supervisor/"},{"name":"异常排查","slug":"异常排查","permalink":"https://maohong.github.io/tags/%E5%BC%82%E5%B8%B8%E6%8E%92%E6%9F%A5/"},{"name":"swap分区","slug":"swap分区","permalink":"https://maohong.github.io/tags/swap%E5%88%86%E5%8C%BA/"},{"name":"问题分析","slug":"问题分析","permalink":"https://maohong.github.io/tags/%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90/"},{"name":"jvm调优","slug":"jvm调优","permalink":"https://maohong.github.io/tags/jvm%E8%B0%83%E4%BC%98/"},{"name":"hadoop","slug":"hadoop","permalink":"https://maohong.github.io/tags/hadoop/"},{"name":"eclipse","slug":"eclipse","permalink":"https://maohong.github.io/tags/eclipse/"},{"name":"hexo","slug":"hexo","permalink":"https://maohong.github.io/tags/hexo/"},{"name":"gitpage","slug":"gitpage","permalink":"https://maohong.github.io/tags/gitpage/"},{"name":"redis","slug":"redis","permalink":"https://maohong.github.io/tags/redis/"},{"name":"连接断开","slug":"连接断开","permalink":"https://maohong.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%96%AD%E5%BC%80/"},{"name":"zookeeper","slug":"zookeeper","permalink":"https://maohong.github.io/tags/zookeeper/"},{"name":"分布式协调","slug":"分布式协调","permalink":"https://maohong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83/"},{"name":"分布式应用","slug":"分布式应用","permalink":"https://maohong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8/"},{"name":"httpclient","slug":"httpclient","permalink":"https://maohong.github.io/tags/httpclient/"},{"name":"tcp连接数","slug":"tcp连接数","permalink":"https://maohong.github.io/tags/tcp%E8%BF%9E%E6%8E%A5%E6%95%B0/"},{"name":"web开发","slug":"web开发","permalink":"https://maohong.github.io/tags/web%E5%BC%80%E5%8F%91/"},{"name":"java","slug":"java","permalink":"https://maohong.github.io/tags/java/"},{"name":"shell","slug":"shell","permalink":"https://maohong.github.io/tags/shell/"},{"name":"linux","slug":"linux","permalink":"https://maohong.github.io/tags/linux/"},{"name":"RPC","slug":"RPC","permalink":"https://maohong.github.io/tags/RPC/"},{"name":"任务调度","slug":"任务调度","permalink":"https://maohong.github.io/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/"},{"name":"横向扩展","slug":"横向扩展","permalink":"https://maohong.github.io/tags/%E6%A8%AA%E5%90%91%E6%89%A9%E5%B1%95/"}]}